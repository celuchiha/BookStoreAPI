import { DataToModelConverter } from './data-to-model-converter';
import { ElementTypeUtility } from './utils';
import { Document } from './document';
import { ModelDelegateImpl } from './model-delegate';
import { ElementMapImpl } from './element-map';
import { ElementComparerImpl } from './element-comparer';
export class ModelReader {
    constructor() {
        /**
         * Contains all profiles that were read from the main document or any referenced documents.
         */
        this.allProfiles = [];
        this.elementMap = new ElementMapImpl();
        this.modelDelegate = new ModelDelegateImpl(this.elementMap);
        this.converter = new DataToModelConverter(this.elementMap, this.modelDelegate, ElementComparerImpl.getInstance());
    }
    static canRead(data) {
        if (!data.modelTypeName)
            return false;
        return ("yellicode yml" === data.modelTypeName.toLowerCase());
    }
    static readDocument(documentData) {
        var instance = new ModelReader();
        return instance.readDocumentRecursive(documentData, false);
    }
    readDocumentRecursive(documentData, isReferencedDocument) {
        // Obsolete: Ids must be prefixed if we are loading a referenced document, because references to it 
        // are prefixed with the document id      
        // const elementIdPrefix = isReferencedDocument ? documentData.id : null;
        // Convert the document's referenced documents first
        this.readReferencedDocumentsRecursive(documentData);
        // Convert the document's profiles first (this allows the converter to resolve references to them)
        const profilesInDocument = documentData.profiles ? this.converter.convert(documentData.profiles, null) : null;
        if (profilesInDocument) {
            profilesInDocument.packagedElements.forEach(p => {
                if (ElementTypeUtility.isProfile(p.elementType)) { // the element can also be a Enum or other type
                    this.allProfiles.push(p);
                }
            });
        }
        // Then convert the model, using the profiles
        const modelInDocument = documentData.model ? this.converter.convert(documentData.model, this.allProfiles) : null;
        const document = new Document(this.modelDelegate);
        document.id = documentData.id;
        document.modelTypeName = documentData.modelTypeName;
        document.modelTypeVersion = documentData.modelTypeVersion;
        document.creator = documentData.creator;
        document.profiles = profilesInDocument;
        document.model = modelInDocument;
        return document;
        //return documentData.model ? ModelReader.converter.convert(documentData.model, ModelReader.profiles, elementIdPrefix) : null;
    }
    readReferencedDocumentsRecursive(documentData) {
        if (!documentData.references)
            return;
        documentData.references.forEach(r => {
            if (!r.document)
                return;
            // Load the document. This will load the document's model elements into memory so that the converter can 
            // resolve any references to it. We don't use the referenced document's main model here, it is not returned 
            // through the API but may be referenced by the main document.
            this.readDocumentRecursive(r.document, true);
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWwtcmVhZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vZGVsLXJlYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFTQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDN0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN0QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRy9DLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXpELE1BQU07SUFrQkY7UUFMQTs7V0FFRztRQUNLLGdCQUFXLEdBQXlCLEVBQUUsQ0FBQztRQUczQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksY0FBYyxFQUFFLENBQUM7UUFDdkMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksb0JBQW9CLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLG1CQUFtQixDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFDdEgsQ0FBQztJQUdNLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBUztRQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWE7WUFBRSxPQUFPLEtBQUssQ0FBQztRQUN0QyxPQUFPLENBQUMsZUFBZSxLQUFLLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRU0sTUFBTSxDQUFDLFlBQVksQ0FBQyxZQUErQjtRQUN0RCxJQUFJLFFBQVEsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQ2pDLE9BQU8sUUFBUSxDQUFDLHFCQUFxQixDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBR08scUJBQXFCLENBQUMsWUFBK0IsRUFBRSxvQkFBNkI7UUFDeEYsb0dBQW9HO1FBQ3BHLDBDQUEwQztRQUMxQyx5RUFBeUU7UUFFekUsb0RBQW9EO1FBQ3BELElBQUksQ0FBQyxnQ0FBZ0MsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVwRCxrR0FBa0c7UUFDbEcsTUFBTSxrQkFBa0IsR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDOUcsSUFBSSxrQkFBa0IsRUFBRTtZQUNwQixrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQzVDLElBQUksa0JBQWtCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLCtDQUErQztvQkFDOUYsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBdUIsQ0FBQyxDQUFDO2lCQUNsRDtZQUNMLENBQUMsQ0FBQyxDQUFDO1NBQ047UUFFRCw2Q0FBNkM7UUFDN0MsTUFBTSxlQUFlLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNqSCxNQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDbEQsUUFBUSxDQUFDLEVBQUUsR0FBRyxZQUFZLENBQUMsRUFBRSxDQUFDO1FBQzlCLFFBQVEsQ0FBQyxhQUFhLEdBQUcsWUFBWSxDQUFDLGFBQWEsQ0FBQztRQUNwRCxRQUFRLENBQUMsZ0JBQWdCLEdBQUcsWUFBWSxDQUFDLGdCQUFnQixDQUFDO1FBQzFELFFBQVEsQ0FBQyxPQUFPLEdBQUksWUFBWSxDQUFDLE9BQU8sQ0FBQztRQUN6QyxRQUFRLENBQUMsUUFBUSxHQUFHLGtCQUFrQixDQUFDO1FBQ3ZDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsZUFBZSxDQUFDO1FBQ2pDLE9BQU8sUUFBUSxDQUFDO1FBRWhCLDhIQUE4SDtJQUNsSSxDQUFDO0lBRU8sZ0NBQWdDLENBQUMsWUFBK0I7UUFDcEUsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVO1lBQ3hCLE9BQU87UUFFWCxZQUFZLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNoQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVE7Z0JBQUUsT0FBTztZQUN4Qix5R0FBeUc7WUFDekcsNEdBQTRHO1lBQzVHLDhEQUE4RDtZQUM5RCxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNqRCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSiJ9