import * as utils from "./utils";
/**
 * Default implementation of the TypeNameProvider interface. This implementation
 * returns type names as-is, but allows inheritors to provide their own implementation
 * by overriding getTypeNameForType and/or getTypeNameForTypedElement.
 */
export class DefaultTypeNameProvider {
    getTypeName(typeOrTypedElement) {
        if (utils.isTypedElement(typeOrTypedElement)) {
            // The argument is a typedElement            
            const isMultiValued = utils.isMultiplicityElement(typeOrTypedElement) && typeOrTypedElement.isMultivalued();
            return this.getTypeNameForTypedElement(typeOrTypedElement, utils.isDataType(typeOrTypedElement.type), isMultiValued);
        }
        else {
            // The argument is a type
            return this.getTypeNameForType(typeOrTypedElement, utils.isDataType(typeOrTypedElement));
        }
    }
    /**
    * Returns the name of the provided type. This function is also called by getTypeNameOfTypedElement() if that function is not overridden.
    * @param type The type information.
    * @param isDataType Indicates if the type is a data type (that is, an Enumeration, PrimitiveType or DataType).
    */
    getTypeNameForType(type, isDataType) {
        // Note: we don't use isDataType in this default implementation, but it is considered relevant for implementers.
        return type ? type.name : null;
    }
    /**
    * Returns the name of the provided element's type. Internally, this function calls getTypeNameForType for the type, but
    * you should override this function if you need to provide different type names for a type depending on the context.
    * For example, you may return a different type name for a property or parameter that is multi-valued.
    * @param typedElement Any element that has a type.
    * @param isDataType Indicates if the element's type is a data type (that is, an Enumeration, PrimitiveType or DataType).
    * @param isMultiValued Indicates if the TypedElement is multi-valued (that is, has an upper bound greater than 1).
    */
    getTypeNameForTypedElement(typedElement, isDataType, isMultiValued) {
        // Note: we don't use isMultiValued in this default implementation, but it is considered relevant for implementers.
        return this.getTypeNameForType(typedElement.type, isDataType);
    }
    /**
     * DEPRECATED: Returns the name of the provided element's data type. Override this function to map primitives and other data types
     * (both built-in or types exported from a profile) to the target language. The default implementation calls the
     * getDataTypeNameForType function using the type of the typedElement.
     * @param typedElement Any TypedElement instance.
     * @deprecated Please override getTypeNameForTypedElement instead.
     */
    getDataTypeName(typedElement) {
        console.warn(`DefaultTypeNameProvider.getDataTypeName is deprecated. Please override getTypeNameForTypedElement instead.`);
        const isMultiValued = utils.isMultiplicityElement(typedElement) && typedElement.isMultivalued();
        return this.getTypeNameForTypedElement(typedElement, true, isMultiValued);
    }
    /**
    * DEPRECATED: Returns the name of the provided data type. Override this function to map primitives and other data types
    * (both built-in or types exported from a profile) to the target language.
    * @param type The type information.
    * @deprecated Please override getTypeNameForType instead.
    */
    getDataTypeNameForType(type) {
        console.warn(`DefaultTypeNameProvider.getDataTypeNameForType is deprecated. Please override getTypeNameForType instead.`);
        return this.getTypeNameForType(type, true);
    }
    /**
     * DEPRECATED: Returns the name of the provided element's complex type (any type that is not a DataType). Override this function to provide
     * a custom name for the complex type. The default implementation calls the getComplexTypeNameForType function using
     * the type of the typedElement.
     * @param typedElement Any TypedElement instance.
     * @deprecated Please override getTypeNameForTypedElement instead.
     */
    getComplexTypeName(typedElement) {
        console.warn(`DefaultTypeNameProvider.getComplexTypeName is deprecated. Please override getTypeNameForTypedElement instead.`);
        const isMultiValued = utils.isMultiplicityElement(typedElement) && typedElement.isMultivalued();
        return this.getTypeNameForTypedElement(typedElement, false, isMultiValued);
    }
    /**
    * DEPRECATED: Returns the name of the provided complex type (any type that is not a DataType). Override this function to provide
    * a custom name for the complex type.
    * @param type The type information.
    * @deprecated Please override getTypeNameForType instead.
    */
    getComplexTypeNameForType(type) {
        console.warn(`DefaultTypeNameProvider.getComplexTypeNameForType is deprecated. Please override getTypeNameForType instead.`);
        return this.getTypeNameForType(type, false);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZS1uYW1lLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3R5cGUtbmFtZS1wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFRQSxPQUFPLEtBQUssS0FBSyxNQUFNLFNBQVMsQ0FBQztBQXVCakM7Ozs7R0FJRztBQUNILE1BQU07SUFXSyxXQUFXLENBQUMsa0JBQWdFO1FBQy9FLElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFO1lBQzFDLDZDQUE2QztZQUM3QyxNQUFNLGFBQWEsR0FBRyxLQUFLLENBQUMscUJBQXFCLENBQUMsa0JBQWtCLENBQUMsSUFBSSxrQkFBa0IsQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUM1RyxPQUFPLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1NBQ3hIO2FBQ0k7WUFDRCx5QkFBeUI7WUFDekIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7U0FDNUY7SUFDTCxDQUFDO0lBRUE7Ozs7TUFJRTtJQUNxQixrQkFBa0IsQ0FBQyxJQUEwQixFQUFFLFVBQW1CO1FBQ3RGLGdIQUFnSDtRQUNoSCxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ25DLENBQUM7SUFFQTs7Ozs7OztNQU9FO0lBQ3FCLDBCQUEwQixDQUFDLFlBQW1DLEVBQUUsVUFBbUIsRUFBRSxhQUFzQjtRQUMvSCxtSEFBbUg7UUFDbkgsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ21CLGVBQWUsQ0FBQyxZQUFtQztRQUNyRSxPQUFPLENBQUMsSUFBSSxDQUFDLDRHQUE0RyxDQUFDLENBQUM7UUFDM0gsTUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFDLHFCQUFxQixDQUFDLFlBQVksQ0FBQyxJQUFJLFlBQVksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNoRyxPQUFPLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFFQTs7Ozs7TUFLRTtJQUNtQixzQkFBc0IsQ0FBQyxJQUEwQjtRQUNuRSxPQUFPLENBQUMsSUFBSSxDQUFDLDJHQUEyRyxDQUFDLENBQUM7UUFDMUgsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDbUIsa0JBQWtCLENBQUMsWUFBbUM7UUFDeEUsT0FBTyxDQUFDLElBQUksQ0FBQywrR0FBK0csQ0FBQyxDQUFDO1FBQzlILE1BQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxZQUFZLENBQUMsSUFBSSxZQUFZLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDaEcsT0FBTyxJQUFJLENBQUMsMEJBQTBCLENBQUMsWUFBWSxFQUFFLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQztJQUMvRSxDQUFDO0lBRUE7Ozs7O01BS0U7SUFDbUIseUJBQXlCLENBQUMsSUFBMEI7UUFDdEUsT0FBTyxDQUFDLElBQUksQ0FBQyw4R0FBOEcsQ0FBQyxDQUFDO1FBQzdILE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNoRCxDQUFDO0NBRUoifQ==