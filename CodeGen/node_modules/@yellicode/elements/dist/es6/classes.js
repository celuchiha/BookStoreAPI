/*
* Copyright (c) 2019 Yellicode
*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0. If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/**
* This code was generated by a tool.
*
* Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
*/
import * as elements from './interfaces';
export class Element {
    constructor(modelDelegate, owner) {
        this.modelDelegate = modelDelegate;
        this.appliedStereotypes = [];
        this.id = '';
        this.ownedComments = [];
        this.owner = null;
        this.taggedValues = [];
        this.owner = owner;
    }
    /**
    * Gets the text contents of the first comment in the element's owned comments, or an empty string if
    * the element has no comments.
    * @returns {string} The body string of the first comment. If the element has no comments, an empty
    * string is returned.
    */
    getFirstCommentBody() {
        return this.modelDelegate.getFirstCommentBody(this);
    }
}
export class TaggedValueSpecification {
}
export class StereotypeExtension {
    constructor() {
        this.isRequired = false;
    }
}
export class Class extends Element {
    constructor(modelDelegate, owner) {
        super(modelDelegate, owner);
        this.elementType = elements.ElementType.class;
        this.appliedStereotypes = [];
        this.generalizations = [];
        this.interfaceRealizations = [];
        this.isAbstract = false;
        this.isActive = false;
        this.isFinalSpecialization = false;
        this.isInferred = false;
        this.isLeaf = false;
        this.name = '';
        this.ownedAttributes = [];
        this.ownedOperations = [];
        this.taggedValues = [];
        this.visibility = null;
    }
    get package() {
        return this.modelDelegate.getPackage(this);
    }
    /**
    * Returns both inherited and owned attributes.
    * @returns {elements.Property[]}
    */
    getAllAttributes() {
        return this.modelDelegate.getAllAttributes(this);
    }
    /**
    * Returns both inherited and owned operations. Any inherited operation that has the same signature
    * (having the same name and parameter type order) in an inheriting type is not included.
    * @returns {elements.Operation[]}
    */
    getAllOperations() {
        return this.modelDelegate.getAllOperations(this);
    }
    /**
    * Returns all of the direct and indirect ancestors of a generalized Classifier, working outwards: more
    * specific classifiers will appear before more general classifiers.
    * @returns {elements.Classifier[]}
    */
    getAllParents() {
        return this.modelDelegate.getAllParents(this);
    }
    /**
    * Gets all classifiers of which this element is a direct or indirect general.
    * @returns {elements.Classifier[]}
    */
    getAllSpecializations() {
        return this.modelDelegate.getAllSpecializations(this);
    }
    /**
    * Gets the first direct generalization relationship of the element.
    * @returns {elements.Generalization}
    */
    getFirstGeneralization() {
        return this.modelDelegate.getFirstGeneralization(this);
    }
    /**
    * Gets the first classifier that is an immediate general of the current element.
    * @returns {elements.Classifier}
    */
    getFirstParent() {
        return this.modelDelegate.getFirstParent(this);
    }
    /**
    * Constructs a name from the names of the nesting packages. The name is constructed working inwards
    * from the package that is defined as namespace root up to but not including the PackageableElement
    * itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    getNamespaceName(separator) {
        return this.modelDelegate.getNamespaceName(this, separator);
    }
    /**
    * Gets all packages that contain this Package, working inwards from the top Package to the owning
    * package.
    * @returns {elements.Package[]} A collection of Packages.
    */
    getNestingPackages() {
        return this.modelDelegate.getNestingPackages(this);
    }
    /**
    * Gives all of the immediate ancestors of a generalized Classifier.
    * @returns {elements.Classifier[]}
    */
    getParents() {
        return this.modelDelegate.getParents(this);
    }
    /**
    * Constructs a name from the PackageableElement and the names of the nesting packages. The name is
    * constructed working inwards from the package that is defined as namespace root up to and including
    * the PackageableElement itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    getQualifiedName(separator) {
        return this.modelDelegate.getQualifiedName(this, separator);
    }
    /**
    * Gets all classifiers of which this classifier is a direct general.
    * @returns {elements.Classifier[]}
    */
    getSpecializations() {
        return this.modelDelegate.getSpecializations(this);
    }
    /**
    * Gets the superclasses of a Class, derived from its Generalizations.
    * @returns {elements.Class[]}
    */
    getSuperClasses() {
        return this.modelDelegate.getSuperClasses(this);
    }
}
export class Stereotype extends Element {
    constructor(modelDelegate, owner) {
        super(modelDelegate, owner);
        this.elementType = elements.ElementType.stereotype;
        this.appliedStereotypes = [];
        this.extends = [];
        this.generalizations = [];
        this.interfaceRealizations = [];
        this.isAbstract = false;
        this.isActive = false;
        this.isFinalSpecialization = false;
        this.isInferred = false;
        this.isLeaf = false;
        this.name = '';
        this.ownedAttributes = [];
        this.ownedOperations = [];
        this.safeName = '';
        this.taggedValues = [];
        this.visibility = null;
    }
    get package() {
        return this.modelDelegate.getPackage(this);
    }
    /**
    * Returns both inherited and owned attributes.
    * @returns {elements.Property[]}
    */
    getAllAttributes() {
        return this.modelDelegate.getAllAttributes(this);
    }
    /**
    * Returns both inherited and owned operations. Any inherited operation that has the same signature
    * (having the same name and parameter type order) in an inheriting type is not included.
    * @returns {elements.Operation[]}
    */
    getAllOperations() {
        return this.modelDelegate.getAllOperations(this);
    }
    /**
    * Returns all of the direct and indirect ancestors of a generalized Classifier, working outwards: more
    * specific classifiers will appear before more general classifiers.
    * @returns {elements.Classifier[]}
    */
    getAllParents() {
        return this.modelDelegate.getAllParents(this);
    }
    /**
    * Gets all classifiers of which this element is a direct or indirect general.
    * @returns {elements.Classifier[]}
    */
    getAllSpecializations() {
        return this.modelDelegate.getAllSpecializations(this);
    }
    /**
    * Gets the first direct generalization relationship of the element.
    * @returns {elements.Generalization}
    */
    getFirstGeneralization() {
        return this.modelDelegate.getFirstGeneralization(this);
    }
    /**
    * Gets the first classifier that is an immediate general of the current element.
    * @returns {elements.Classifier}
    */
    getFirstParent() {
        return this.modelDelegate.getFirstParent(this);
    }
    /**
    * Constructs a name from the names of the nesting packages. The name is constructed working inwards
    * from the package that is defined as namespace root up to but not including the PackageableElement
    * itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    getNamespaceName(separator) {
        return this.modelDelegate.getNamespaceName(this, separator);
    }
    /**
    * Gets all packages that contain this Package, working inwards from the top Package to the owning
    * package.
    * @returns {elements.Package[]} A collection of Packages.
    */
    getNestingPackages() {
        return this.modelDelegate.getNestingPackages(this);
    }
    /**
    * Gives all of the immediate ancestors of a generalized Classifier.
    * @returns {elements.Classifier[]}
    */
    getParents() {
        return this.modelDelegate.getParents(this);
    }
    /**
    * Constructs a name from the PackageableElement and the names of the nesting packages. The name is
    * constructed working inwards from the package that is defined as namespace root up to and including
    * the PackageableElement itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    getQualifiedName(separator) {
        return this.modelDelegate.getQualifiedName(this, separator);
    }
    /**
    * Gets all classifiers of which this classifier is a direct general.
    * @returns {elements.Classifier[]}
    */
    getSpecializations() {
        return this.modelDelegate.getSpecializations(this);
    }
    /**
    * Gets the superclasses of a Class, derived from its Generalizations.
    * @returns {elements.Class[]}
    */
    getSuperClasses() {
        return this.modelDelegate.getSuperClasses(this);
    }
}
export class Property extends Element {
    constructor(modelDelegate, owner) {
        super(modelDelegate, owner);
        this.elementType = elements.ElementType.property;
        this.aggregation = elements.AggregationKind.none;
        this.appliedStereotypes = [];
        this.defaultValue = null;
        this.isDerived = false;
        this.isDerivedUnion = false;
        this.isID = false;
        this.isLeaf = false;
        this.isNavigable = false;
        this.isOrdered = false;
        this.isReadOnly = false;
        this.isStatic = false;
        this.isUnique = false;
        this.lowerValue = null;
        this.name = '';
        this.order = 0;
        this.taggedValues = [];
        this.type = null;
        this.upperValue = null;
        this.visibility = null;
    }
    get association() {
        return this.modelDelegate.getAssociation(this);
    }
    get lower() {
        return this.modelDelegate.getLower(this);
    }
    get upper() {
        return this.modelDelegate.getUpper(this);
    }
    /**
    * Gets the value of the DefaultValue property.
    * @returns {any} The default value (the type depending on the type of value), or null if no default
    * value can be determined.
    */
    getDefault() {
        return this.modelDelegate.getDefault(this);
    }
    /**
    * The query lowerBound() returns the lower bound of the multiplicity as an integer, which is the
    * integerValue of lowerValue, if this is given, and 1 otherwise.
    * @returns {number}
    */
    getLowerBound() {
        return this.modelDelegate.getLowerBound(this);
    }
    /**
    * Gets the name of the typed element's type.
    * @returns {string} The type name, or an empty string if the element has no type.
    */
    getTypeName() {
        return this.modelDelegate.getTypeName(this);
    }
    /**
    * The query upperBound() returns the upper bound of the multiplicity for a bounded multiplicity as an
    * unlimited natural, which is the unlimitedNaturalValue of upperValue, if given, and 1, otherwise.
    * @returns {elements.UnlimitedNatural}
    */
    getUpperBound() {
        return this.modelDelegate.getUpperBound(this);
    }
    /**
    * The query isMultivalued() checks whether this multiplicity has an upper bound greater than one.
    * @returns {boolean}
    */
    isMultivalued() {
        return this.modelDelegate.isMultivalued(this);
    }
    /**
    * The query isOptional checks whether this multiplicity has a lower bound of 0 (0..n).
    * @returns {boolean}
    */
    isOptional() {
        return this.modelDelegate.isOptional(this);
    }
    /**
    * The query isOptionalAndSingleValued checks whether this multiplicity has a lower bound of 0 and an
    * upper bound of 1 (0..1).
    * @returns {boolean}
    */
    isOptionalAndSinglevalued() {
        return this.modelDelegate.isOptionalAndSinglevalued(this);
    }
    /**
    * The query isRequiredAndSinglevalued checks whether this multiplicity has a lower bound of 1 and an
    * upper bound of 1 (1..1).
    * @returns {boolean}
    */
    isRequiredAndSinglevalued() {
        return this.modelDelegate.isRequiredAndSinglevalued(this);
    }
}
export class Package extends Element {
    constructor(modelDelegate, owner) {
        super(modelDelegate, owner);
        this.elementType = elements.ElementType.package;
        this.appliedProfiles = [];
        this.appliedStereotypes = [];
        this.isNamespaceRoot = false;
        this.name = '';
        this.packagedElements = [];
        this.taggedValues = [];
        this.visibility = null;
    }
    get package() {
        return this.modelDelegate.getPackage(this);
    }
    /**
    * Gets all classes that are owned by this Package, including the ones owned by nested packages.
    * @returns {elements.Class[]}
    */
    getAllClasses() {
        return this.modelDelegate.getAllClasses(this);
    }
    /**
    * Gets all data types that are owned by this Package, including the ones owned by nested packages.
    * @returns {elements.DataType[]}
    */
    getAllDataTypes() {
        return this.modelDelegate.getAllDataTypes(this);
    }
    /**
    * Gets all enumerations that are owned by this Package, including the ones owned by nested packages.
    * @returns {elements.Enumeration[]}
    */
    getAllEnumerations() {
        return this.modelDelegate.getAllEnumerations(this);
    }
    /**
    * Gets all interfaces that are owned by this Package, including the ones owned by nested packages.
    * @returns {elements.Interface[]}
    */
    getAllInterfaces() {
        return this.modelDelegate.getAllInterfaces(this);
    }
    /**
    * Gets all types that are owned by this Package, including the ones owned by nested packages. This
    * includes the following types of elements: Class, Interface, DataType, PrimitiveType and Enumeration.
    * @returns {elements.Classifier[]} A subset of PackagedElements.
    */
    getAllTypes() {
        return this.modelDelegate.getAllTypes(this);
    }
    /**
    * Gets all classes that are owned by this Package.
    * @returns {elements.Class[]} A subset of PackagedElements.
    */
    getClasses() {
        return this.modelDelegate.getClasses(this);
    }
    /**
    * Gets all data types that are owned by this Package.
    * @returns {elements.DataType[]} A subset of PackagedElements.
    */
    getDataTypes() {
        return this.modelDelegate.getDataTypes(this);
    }
    /**
    * Gets all enumerations that are owned by this Package.
    * @returns {elements.Enumeration[]} A subset of PackagedElements.
    */
    getEnumerations() {
        return this.modelDelegate.getEnumerations(this);
    }
    /**
    * Gets all interfaces that are owned by this Package.
    * @returns {elements.Interface[]} A subset of PackagedElements.
    */
    getInterfaces() {
        return this.modelDelegate.getInterfaces(this);
    }
    /**
    * Constructs a name from the names of the nesting packages. The name is constructed working inwards
    * from the package that is defined as namespace root up to but not including the PackageableElement
    * itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    getNamespaceName(separator) {
        return this.modelDelegate.getNamespaceName(this, separator);
    }
    /**
    * Gets all packages that are owned by this Package.
    * @returns {elements.Package[]} A subset of PackagedElements.
    */
    getNestedPackages() {
        return this.modelDelegate.getNestedPackages(this);
    }
    /**
    * Gets all packages that contain this Package, working inwards from the top Package to the owning
    * package.
    * @returns {elements.Package[]} A collection of Packages.
    */
    getNestingPackages() {
        return this.modelDelegate.getNestingPackages(this);
    }
    /**
    * Constructs a name from the PackageableElement and the names of the nesting packages. The name is
    * constructed working inwards from the package that is defined as namespace root up to and including
    * the PackageableElement itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    getQualifiedName(separator) {
        return this.modelDelegate.getQualifiedName(this, separator);
    }
    /**
    * Gets all types that are owned by this Package. This includes the following types of elements: Class,
    * Interface, DataType, PrimitiveType and Enumeration.
    * @returns {elements.Classifier[]} A subset of PackagedElements.
    */
    getTypes() {
        return this.modelDelegate.getTypes(this);
    }
}
export class Profile extends Element {
    constructor(modelDelegate, owner) {
        super(modelDelegate, owner);
        this.elementType = elements.ElementType.profile;
        this.appliedProfiles = [];
        this.appliedStereotypes = [];
        this.isNamespaceRoot = false;
        this.name = '';
        this.packagedElements = [];
        this.safeName = '';
        this.taggedValues = [];
        this.visibility = null;
    }
    get package() {
        return this.modelDelegate.getPackage(this);
    }
    /**
    * Gets all classes that are owned by this Package, including the ones owned by nested packages.
    * @returns {elements.Class[]}
    */
    getAllClasses() {
        return this.modelDelegate.getAllClasses(this);
    }
    /**
    * Gets all data types that are owned by this Package, including the ones owned by nested packages.
    * @returns {elements.DataType[]}
    */
    getAllDataTypes() {
        return this.modelDelegate.getAllDataTypes(this);
    }
    /**
    * Gets all enumerations that are owned by this Package, including the ones owned by nested packages.
    * @returns {elements.Enumeration[]}
    */
    getAllEnumerations() {
        return this.modelDelegate.getAllEnumerations(this);
    }
    /**
    * Gets all interfaces that are owned by this Package, including the ones owned by nested packages.
    * @returns {elements.Interface[]}
    */
    getAllInterfaces() {
        return this.modelDelegate.getAllInterfaces(this);
    }
    /**
    * Gets all types that are owned by this Package, including the ones owned by nested packages. This
    * includes the following types of elements: Class, Interface, DataType, PrimitiveType and Enumeration.
    * @returns {elements.Classifier[]} A subset of PackagedElements.
    */
    getAllTypes() {
        return this.modelDelegate.getAllTypes(this);
    }
    /**
    * Gets all classes that are owned by this Package.
    * @returns {elements.Class[]} A subset of PackagedElements.
    */
    getClasses() {
        return this.modelDelegate.getClasses(this);
    }
    /**
    * Gets all data types that are owned by this Package.
    * @returns {elements.DataType[]} A subset of PackagedElements.
    */
    getDataTypes() {
        return this.modelDelegate.getDataTypes(this);
    }
    /**
    * Gets all enumerations that are owned by this Package.
    * @returns {elements.Enumeration[]} A subset of PackagedElements.
    */
    getEnumerations() {
        return this.modelDelegate.getEnumerations(this);
    }
    /**
    * Gets all interfaces that are owned by this Package.
    * @returns {elements.Interface[]} A subset of PackagedElements.
    */
    getInterfaces() {
        return this.modelDelegate.getInterfaces(this);
    }
    /**
    * Constructs a name from the names of the nesting packages. The name is constructed working inwards
    * from the package that is defined as namespace root up to but not including the PackageableElement
    * itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    getNamespaceName(separator) {
        return this.modelDelegate.getNamespaceName(this, separator);
    }
    /**
    * Gets all packages that are owned by this Package.
    * @returns {elements.Package[]} A subset of PackagedElements.
    */
    getNestedPackages() {
        return this.modelDelegate.getNestedPackages(this);
    }
    /**
    * Gets all packages that contain this Package, working inwards from the top Package to the owning
    * package.
    * @returns {elements.Package[]} A collection of Packages.
    */
    getNestingPackages() {
        return this.modelDelegate.getNestingPackages(this);
    }
    /**
    * Constructs a name from the PackageableElement and the names of the nesting packages. The name is
    * constructed working inwards from the package that is defined as namespace root up to and including
    * the PackageableElement itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    getQualifiedName(separator) {
        return this.modelDelegate.getQualifiedName(this, separator);
    }
    /**
    * Gets all types that are owned by this Package. This includes the following types of elements: Class,
    * Interface, DataType, PrimitiveType and Enumeration.
    * @returns {elements.Classifier[]} A subset of PackagedElements.
    */
    getTypes() {
        return this.modelDelegate.getTypes(this);
    }
}
export class DataType extends Element {
    constructor(modelDelegate, owner) {
        super(modelDelegate, owner);
        this.elementType = elements.ElementType.dataType;
        this.appliedStereotypes = [];
        this.generalizations = [];
        this.isAbstract = false;
        this.isFinalSpecialization = false;
        this.isInferred = false;
        this.isLeaf = false;
        this.name = '';
        this.ownedAttributes = [];
        this.ownedOperations = [];
        this.taggedValues = [];
        this.visibility = null;
    }
    get package() {
        return this.modelDelegate.getPackage(this);
    }
    /**
    * Returns both inherited and owned attributes.
    * @returns {elements.Property[]}
    */
    getAllAttributes() {
        return this.modelDelegate.getAllAttributes(this);
    }
    /**
    * Returns both inherited and owned operations. Any inherited operation that has the same signature
    * (having the same name and parameter type order) in an inheriting type is not included.
    * @returns {elements.Operation[]}
    */
    getAllOperations() {
        return this.modelDelegate.getAllOperations(this);
    }
    /**
    * Returns all of the direct and indirect ancestors of a generalized Classifier, working outwards: more
    * specific classifiers will appear before more general classifiers.
    * @returns {elements.Classifier[]}
    */
    getAllParents() {
        return this.modelDelegate.getAllParents(this);
    }
    /**
    * Gets all classifiers of which this element is a direct or indirect general.
    * @returns {elements.Classifier[]}
    */
    getAllSpecializations() {
        return this.modelDelegate.getAllSpecializations(this);
    }
    /**
    * Gets the first direct generalization relationship of the element.
    * @returns {elements.Generalization}
    */
    getFirstGeneralization() {
        return this.modelDelegate.getFirstGeneralization(this);
    }
    /**
    * Gets the first classifier that is an immediate general of the current element.
    * @returns {elements.Classifier}
    */
    getFirstParent() {
        return this.modelDelegate.getFirstParent(this);
    }
    /**
    * Constructs a name from the names of the nesting packages. The name is constructed working inwards
    * from the package that is defined as namespace root up to but not including the PackageableElement
    * itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    getNamespaceName(separator) {
        return this.modelDelegate.getNamespaceName(this, separator);
    }
    /**
    * Gets all packages that contain this Package, working inwards from the top Package to the owning
    * package.
    * @returns {elements.Package[]} A collection of Packages.
    */
    getNestingPackages() {
        return this.modelDelegate.getNestingPackages(this);
    }
    /**
    * Gives all of the immediate ancestors of a generalized Classifier.
    * @returns {elements.Classifier[]}
    */
    getParents() {
        return this.modelDelegate.getParents(this);
    }
    /**
    * Constructs a name from the PackageableElement and the names of the nesting packages. The name is
    * constructed working inwards from the package that is defined as namespace root up to and including
    * the PackageableElement itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    getQualifiedName(separator) {
        return this.modelDelegate.getQualifiedName(this, separator);
    }
    /**
    * Gets all classifiers of which this classifier is a direct general.
    * @returns {elements.Classifier[]}
    */
    getSpecializations() {
        return this.modelDelegate.getSpecializations(this);
    }
}
export class PrimitiveType extends Element {
    constructor(modelDelegate, owner) {
        super(modelDelegate, owner);
        this.elementType = elements.ElementType.primitiveType;
        this.appliedStereotypes = [];
        this.generalizations = [];
        this.isAbstract = false;
        this.isFinalSpecialization = false;
        this.isInferred = false;
        this.isLeaf = false;
        this.name = '';
        this.ownedAttributes = [];
        this.ownedOperations = [];
        this.taggedValues = [];
        this.visibility = null;
    }
    get package() {
        return this.modelDelegate.getPackage(this);
    }
    /**
    * Returns both inherited and owned attributes.
    * @returns {elements.Property[]}
    */
    getAllAttributes() {
        return this.modelDelegate.getAllAttributes(this);
    }
    /**
    * Returns both inherited and owned operations. Any inherited operation that has the same signature
    * (having the same name and parameter type order) in an inheriting type is not included.
    * @returns {elements.Operation[]}
    */
    getAllOperations() {
        return this.modelDelegate.getAllOperations(this);
    }
    /**
    * Returns all of the direct and indirect ancestors of a generalized Classifier, working outwards: more
    * specific classifiers will appear before more general classifiers.
    * @returns {elements.Classifier[]}
    */
    getAllParents() {
        return this.modelDelegate.getAllParents(this);
    }
    /**
    * Gets all classifiers of which this element is a direct or indirect general.
    * @returns {elements.Classifier[]}
    */
    getAllSpecializations() {
        return this.modelDelegate.getAllSpecializations(this);
    }
    /**
    * Gets the first direct generalization relationship of the element.
    * @returns {elements.Generalization}
    */
    getFirstGeneralization() {
        return this.modelDelegate.getFirstGeneralization(this);
    }
    /**
    * Gets the first classifier that is an immediate general of the current element.
    * @returns {elements.Classifier}
    */
    getFirstParent() {
        return this.modelDelegate.getFirstParent(this);
    }
    /**
    * Constructs a name from the names of the nesting packages. The name is constructed working inwards
    * from the package that is defined as namespace root up to but not including the PackageableElement
    * itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    getNamespaceName(separator) {
        return this.modelDelegate.getNamespaceName(this, separator);
    }
    /**
    * Gets all packages that contain this Package, working inwards from the top Package to the owning
    * package.
    * @returns {elements.Package[]} A collection of Packages.
    */
    getNestingPackages() {
        return this.modelDelegate.getNestingPackages(this);
    }
    /**
    * Gives all of the immediate ancestors of a generalized Classifier.
    * @returns {elements.Classifier[]}
    */
    getParents() {
        return this.modelDelegate.getParents(this);
    }
    /**
    * Constructs a name from the PackageableElement and the names of the nesting packages. The name is
    * constructed working inwards from the package that is defined as namespace root up to and including
    * the PackageableElement itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    getQualifiedName(separator) {
        return this.modelDelegate.getQualifiedName(this, separator);
    }
    /**
    * Gets all classifiers of which this classifier is a direct general.
    * @returns {elements.Classifier[]}
    */
    getSpecializations() {
        return this.modelDelegate.getSpecializations(this);
    }
}
export class Parameter extends Element {
    constructor(modelDelegate, owner) {
        super(modelDelegate, owner);
        this.elementType = elements.ElementType.parameter;
        this.appliedStereotypes = [];
        this.defaultValue = null;
        this.direction = elements.ParameterDirectionKind.in;
        this.isException = false;
        this.isOrdered = false;
        this.isStream = false;
        this.isUnique = false;
        this.lowerValue = null;
        this.name = '';
        this.order = 0;
        this.taggedValues = [];
        this.type = null;
        this.upperValue = null;
        this.visibility = null;
    }
    get lower() {
        return this.modelDelegate.getLower(this);
    }
    get upper() {
        return this.modelDelegate.getUpper(this);
    }
    /**
    * Gets the value of the DefaultValue property.
    * @returns {any} The default value (the type depending on the type of value), or null if no default
    * value can be determined.
    */
    getDefault() {
        return this.modelDelegate.getDefault(this);
    }
    /**
    * The query lowerBound() returns the lower bound of the multiplicity as an integer, which is the
    * integerValue of lowerValue, if this is given, and 1 otherwise.
    * @returns {number}
    */
    getLowerBound() {
        return this.modelDelegate.getLowerBound(this);
    }
    /**
    * Gets the name of the typed element's type.
    * @returns {string} The type name, or an empty string if the element has no type.
    */
    getTypeName() {
        return this.modelDelegate.getTypeName(this);
    }
    /**
    * The query upperBound() returns the upper bound of the multiplicity for a bounded multiplicity as an
    * unlimited natural, which is the unlimitedNaturalValue of upperValue, if given, and 1, otherwise.
    * @returns {elements.UnlimitedNatural}
    */
    getUpperBound() {
        return this.modelDelegate.getUpperBound(this);
    }
    /**
    * The query isMultivalued() checks whether this multiplicity has an upper bound greater than one.
    * @returns {boolean}
    */
    isMultivalued() {
        return this.modelDelegate.isMultivalued(this);
    }
    /**
    * The query isOptional checks whether this multiplicity has a lower bound of 0 (0..n).
    * @returns {boolean}
    */
    isOptional() {
        return this.modelDelegate.isOptional(this);
    }
    /**
    * The query isOptionalAndSingleValued checks whether this multiplicity has a lower bound of 0 and an
    * upper bound of 1 (0..1).
    * @returns {boolean}
    */
    isOptionalAndSinglevalued() {
        return this.modelDelegate.isOptionalAndSinglevalued(this);
    }
    /**
    * The query isRequiredAndSinglevalued checks whether this multiplicity has a lower bound of 1 and an
    * upper bound of 1 (1..1).
    * @returns {boolean}
    */
    isRequiredAndSinglevalued() {
        return this.modelDelegate.isRequiredAndSinglevalued(this);
    }
}
export class Operation extends Element {
    constructor(modelDelegate, owner) {
        super(modelDelegate, owner);
        this.elementType = elements.ElementType.operation;
        this.appliedStereotypes = [];
        this.isAbstract = false;
        this.isConstructor = false;
        this.isLeaf = false;
        this.isQuery = false;
        this.isStatic = false;
        this.name = '';
        this.order = 0;
        this.ownedParameters = [];
        this.taggedValues = [];
        this.visibility = null;
    }
    get lower() {
        return this.modelDelegate.getLower(this);
    }
    get upper() {
        return this.modelDelegate.getUpper(this);
    }
    /**
    * Returns the ownedParameters with direction in and inout.
    * @returns {elements.Parameter[]}
    */
    getInputParameters() {
        return this.modelDelegate.getInputParameters(this);
    }
    /**
    * The query lowerBound() returns the lower bound of the return parameter as an integer, which is the
    * integerValue of lowerValue, if this is given, and 1 otherwise. This information is derived from the
    * return result for this Operation.
    * @returns {number}
    */
    getLowerBound() {
        return this.modelDelegate.getLowerBound(this);
    }
    /**
    * Returns the ownedParameters with direction out, inout, or return.
    * @returns {elements.Parameter[]}
    */
    getOutputParameters() {
        return this.modelDelegate.getOutputParameters(this);
    }
    /**
    * Gets the operation's return parameter, if it has one.
    * @returns {elements.Parameter}
    */
    getReturnParameter() {
        return this.modelDelegate.getReturnParameter(this);
    }
    /**
    * Gets the type of the operation's return parameter, if it has any.
    * @returns {elements.Type}
    */
    getReturnType() {
        return this.modelDelegate.getReturnType(this);
    }
    /**
    * The query upperBound() returns the upper bound of the return parameter for a bounded multiplicity as
    * an unlimited natural, which is the unlimitedNaturalValue of upperValue, if given, and 1, otherwise.
    * This information is derived from the return result for this Operation.
    * @returns {elements.UnlimitedNatural}
    */
    getUpperBound() {
        return this.modelDelegate.getUpperBound(this);
    }
    /**
    * The query isMultivalued() checks whether the return parameter has an upper bound greater than one.
    * @returns {boolean}
    */
    isMultivalued() {
        return this.modelDelegate.isMultivalued(this);
    }
    /**
    * The query isOptional checks whether he return parameter has a lower bound of 0 (0..n).
    * @returns {boolean}
    */
    isOptional() {
        return this.modelDelegate.isOptional(this);
    }
    /**
    * The query isOptional checks whether he return parameter has a lower bound of 0 and an upper bound of
    * 1 (0..1).
    * @returns {boolean}
    */
    isOptionalAndSinglevalued() {
        return this.modelDelegate.isOptionalAndSinglevalued(this);
    }
}
export class Model extends Element {
    constructor(modelDelegate, owner) {
        super(modelDelegate, owner);
        this.elementType = elements.ElementType.model;
        this.appliedProfiles = [];
        this.appliedStereotypes = [];
        this.isNamespaceRoot = false;
        this.name = '';
        this.packagedElements = [];
        this.taggedValues = [];
        this.visibility = null;
    }
    get package() {
        return this.modelDelegate.getPackage(this);
    }
    /**
    * Gets all classes that are owned by this Package, including the ones owned by nested packages.
    * @returns {elements.Class[]}
    */
    getAllClasses() {
        return this.modelDelegate.getAllClasses(this);
    }
    /**
    * Gets all data types that are owned by this Package, including the ones owned by nested packages.
    * @returns {elements.DataType[]}
    */
    getAllDataTypes() {
        return this.modelDelegate.getAllDataTypes(this);
    }
    /**
    * Gets all enumerations that are owned by this Package, including the ones owned by nested packages.
    * @returns {elements.Enumeration[]}
    */
    getAllEnumerations() {
        return this.modelDelegate.getAllEnumerations(this);
    }
    /**
    * Gets all interfaces that are owned by this Package, including the ones owned by nested packages.
    * @returns {elements.Interface[]}
    */
    getAllInterfaces() {
        return this.modelDelegate.getAllInterfaces(this);
    }
    /**
    * Gets all types that are owned by this Package, including the ones owned by nested packages. This
    * includes the following types of elements: Class, Interface, DataType, PrimitiveType and Enumeration.
    * @returns {elements.Classifier[]} A subset of PackagedElements.
    */
    getAllTypes() {
        return this.modelDelegate.getAllTypes(this);
    }
    /**
    * Gets all classes that are owned by this Package.
    * @returns {elements.Class[]} A subset of PackagedElements.
    */
    getClasses() {
        return this.modelDelegate.getClasses(this);
    }
    /**
    * Gets all data types that are owned by this Package.
    * @returns {elements.DataType[]} A subset of PackagedElements.
    */
    getDataTypes() {
        return this.modelDelegate.getDataTypes(this);
    }
    /**
    * Gets all enumerations that are owned by this Package.
    * @returns {elements.Enumeration[]} A subset of PackagedElements.
    */
    getEnumerations() {
        return this.modelDelegate.getEnumerations(this);
    }
    /**
    * Gets all interfaces that are owned by this Package.
    * @returns {elements.Interface[]} A subset of PackagedElements.
    */
    getInterfaces() {
        return this.modelDelegate.getInterfaces(this);
    }
    /**
    * Constructs a name from the names of the nesting packages. The name is constructed working inwards
    * from the package that is defined as namespace root up to but not including the PackageableElement
    * itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    getNamespaceName(separator) {
        return this.modelDelegate.getNamespaceName(this, separator);
    }
    /**
    * Gets all packages that are owned by this Package.
    * @returns {elements.Package[]} A subset of PackagedElements.
    */
    getNestedPackages() {
        return this.modelDelegate.getNestedPackages(this);
    }
    /**
    * Gets all packages that contain this Package, working inwards from the top Package to the owning
    * package.
    * @returns {elements.Package[]} A collection of Packages.
    */
    getNestingPackages() {
        return this.modelDelegate.getNestingPackages(this);
    }
    /**
    * Constructs a name from the PackageableElement and the names of the nesting packages. The name is
    * constructed working inwards from the package that is defined as namespace root up to and including
    * the PackageableElement itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    getQualifiedName(separator) {
        return this.modelDelegate.getQualifiedName(this, separator);
    }
    /**
    * Gets all types that are owned by this Package. This includes the following types of elements: Class,
    * Interface, DataType, PrimitiveType and Enumeration.
    * @returns {elements.Classifier[]} A subset of PackagedElements.
    */
    getTypes() {
        return this.modelDelegate.getTypes(this);
    }
}
export class LiteralUnlimitedNatural extends Element {
    constructor(modelDelegate, owner) {
        super(modelDelegate, owner);
        this.elementType = elements.ElementType.literalUnlimitedNatural;
        this.appliedStereotypes = [];
        this.name = '';
        this.taggedValues = [];
        this.type = null;
        this.visibility = null;
    }
    /**
    * Gets the string representation of the value.
    * @returns {string}
    */
    getStringValue() {
        return this.modelDelegate.getStringValue(this);
    }
    /**
    * Gets the name of the typed element's type.
    * @returns {string} The type name, or an empty string if the element has no type.
    */
    getTypeName() {
        return this.modelDelegate.getTypeName(this);
    }
    /**
    * Gets underlying value of the ValueSpecification. The type depends on the type of ValueSpecification.
    * @returns {any} The underlying value of the ValueSpecification. The type depends on the type of
    * ValueSpecification.
    */
    getValue() {
        return this.modelDelegate.getValue(this);
    }
}
export class LiteralString extends Element {
    constructor(modelDelegate, owner) {
        super(modelDelegate, owner);
        this.elementType = elements.ElementType.literalString;
        this.appliedStereotypes = [];
        this.name = '';
        this.taggedValues = [];
        this.type = null;
        this.value = '';
        this.visibility = null;
    }
    /**
    * Gets the string representation of the value.
    * @returns {string}
    */
    getStringValue() {
        return this.modelDelegate.getStringValue(this);
    }
    /**
    * Gets the name of the typed element's type.
    * @returns {string} The type name, or an empty string if the element has no type.
    */
    getTypeName() {
        return this.modelDelegate.getTypeName(this);
    }
    /**
    * Gets underlying value of the ValueSpecification. The type depends on the type of ValueSpecification.
    * @returns {any} The underlying value of the ValueSpecification. The type depends on the type of
    * ValueSpecification.
    */
    getValue() {
        return this.modelDelegate.getValue(this);
    }
}
export class LiteralReal extends Element {
    constructor(modelDelegate, owner) {
        super(modelDelegate, owner);
        this.elementType = elements.ElementType.literalReal;
        this.appliedStereotypes = [];
        this.name = '';
        this.taggedValues = [];
        this.type = null;
        this.value = 0;
        this.visibility = null;
    }
    /**
    * Gets the string representation of the value.
    * @returns {string}
    */
    getStringValue() {
        return this.modelDelegate.getStringValue(this);
    }
    /**
    * Gets the name of the typed element's type.
    * @returns {string} The type name, or an empty string if the element has no type.
    */
    getTypeName() {
        return this.modelDelegate.getTypeName(this);
    }
    /**
    * Gets underlying value of the ValueSpecification. The type depends on the type of ValueSpecification.
    * @returns {any} The underlying value of the ValueSpecification. The type depends on the type of
    * ValueSpecification.
    */
    getValue() {
        return this.modelDelegate.getValue(this);
    }
}
export class LiteralNull extends Element {
    constructor(modelDelegate, owner) {
        super(modelDelegate, owner);
        this.elementType = elements.ElementType.literalNull;
        this.appliedStereotypes = [];
        this.name = '';
        this.taggedValues = [];
        this.type = null;
        this.visibility = null;
    }
    /**
    * Gets the string representation of the value.
    * @returns {string}
    */
    getStringValue() {
        return this.modelDelegate.getStringValue(this);
    }
    /**
    * Gets the name of the typed element's type.
    * @returns {string} The type name, or an empty string if the element has no type.
    */
    getTypeName() {
        return this.modelDelegate.getTypeName(this);
    }
    /**
    * Gets underlying value of the ValueSpecification. The type depends on the type of ValueSpecification.
    * @returns {any} The underlying value of the ValueSpecification. The type depends on the type of
    * ValueSpecification.
    */
    getValue() {
        return this.modelDelegate.getValue(this);
    }
}
export class LiteralInteger extends Element {
    constructor(modelDelegate, owner) {
        super(modelDelegate, owner);
        this.elementType = elements.ElementType.literalInteger;
        this.appliedStereotypes = [];
        this.name = '';
        this.taggedValues = [];
        this.type = null;
        this.value = 0;
        this.visibility = null;
    }
    /**
    * Gets the string representation of the value.
    * @returns {string}
    */
    getStringValue() {
        return this.modelDelegate.getStringValue(this);
    }
    /**
    * Gets the name of the typed element's type.
    * @returns {string} The type name, or an empty string if the element has no type.
    */
    getTypeName() {
        return this.modelDelegate.getTypeName(this);
    }
    /**
    * Gets underlying value of the ValueSpecification. The type depends on the type of ValueSpecification.
    * @returns {any} The underlying value of the ValueSpecification. The type depends on the type of
    * ValueSpecification.
    */
    getValue() {
        return this.modelDelegate.getValue(this);
    }
}
export class LiteralBoolean extends Element {
    constructor(modelDelegate, owner) {
        super(modelDelegate, owner);
        this.elementType = elements.ElementType.literalBoolean;
        this.appliedStereotypes = [];
        this.name = '';
        this.taggedValues = [];
        this.type = null;
        this.value = false;
        this.visibility = null;
    }
    /**
    * Gets the string representation of the value.
    * @returns {string}
    */
    getStringValue() {
        return this.modelDelegate.getStringValue(this);
    }
    /**
    * Gets the name of the typed element's type.
    * @returns {string} The type name, or an empty string if the element has no type.
    */
    getTypeName() {
        return this.modelDelegate.getTypeName(this);
    }
    /**
    * Gets underlying value of the ValueSpecification. The type depends on the type of ValueSpecification.
    * @returns {any} The underlying value of the ValueSpecification. The type depends on the type of
    * ValueSpecification.
    */
    getValue() {
        return this.modelDelegate.getValue(this);
    }
}
export class InterfaceRealization extends Element {
    constructor(modelDelegate, owner) {
        super(modelDelegate, owner);
        this.elementType = elements.ElementType.interfaceRealization;
        this.appliedStereotypes = [];
        this.taggedValues = [];
    }
}
export class Interface extends Element {
    constructor(modelDelegate, owner) {
        super(modelDelegate, owner);
        this.elementType = elements.ElementType.interface;
        this.appliedStereotypes = [];
        this.generalizations = [];
        this.isAbstract = false;
        this.isFinalSpecialization = false;
        this.isInferred = false;
        this.isLeaf = false;
        this.name = '';
        this.ownedAttributes = [];
        this.ownedOperations = [];
        this.taggedValues = [];
        this.visibility = null;
    }
    get package() {
        return this.modelDelegate.getPackage(this);
    }
    /**
    * Returns both inherited and owned attributes.
    * @returns {elements.Property[]}
    */
    getAllAttributes() {
        return this.modelDelegate.getAllAttributes(this);
    }
    /**
    * Returns both inherited and owned operations. Any inherited operation that has the same signature
    * (having the same name and parameter type order) in an inheriting type is not included.
    * @returns {elements.Operation[]}
    */
    getAllOperations() {
        return this.modelDelegate.getAllOperations(this);
    }
    /**
    * Returns all of the direct and indirect ancestors of a generalized Classifier, working outwards: more
    * specific classifiers will appear before more general classifiers.
    * @returns {elements.Classifier[]}
    */
    getAllParents() {
        return this.modelDelegate.getAllParents(this);
    }
    /**
    * Gets all classifiers of which this element is a direct or indirect general.
    * @returns {elements.Classifier[]}
    */
    getAllSpecializations() {
        return this.modelDelegate.getAllSpecializations(this);
    }
    /**
    * Gets the first direct generalization relationship of the element.
    * @returns {elements.Generalization}
    */
    getFirstGeneralization() {
        return this.modelDelegate.getFirstGeneralization(this);
    }
    /**
    * Gets the first classifier that is an immediate general of the current element.
    * @returns {elements.Classifier}
    */
    getFirstParent() {
        return this.modelDelegate.getFirstParent(this);
    }
    /**
    * Constructs a name from the names of the nesting packages. The name is constructed working inwards
    * from the package that is defined as namespace root up to but not including the PackageableElement
    * itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    getNamespaceName(separator) {
        return this.modelDelegate.getNamespaceName(this, separator);
    }
    /**
    * Gets all packages that contain this Package, working inwards from the top Package to the owning
    * package.
    * @returns {elements.Package[]} A collection of Packages.
    */
    getNestingPackages() {
        return this.modelDelegate.getNestingPackages(this);
    }
    /**
    * Gives all of the immediate ancestors of a generalized Classifier.
    * @returns {elements.Classifier[]}
    */
    getParents() {
        return this.modelDelegate.getParents(this);
    }
    /**
    * Constructs a name from the PackageableElement and the names of the nesting packages. The name is
    * constructed working inwards from the package that is defined as namespace root up to and including
    * the PackageableElement itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    getQualifiedName(separator) {
        return this.modelDelegate.getQualifiedName(this, separator);
    }
    /**
    * Gets all classifiers of which this classifier is a direct general.
    * @returns {elements.Classifier[]}
    */
    getSpecializations() {
        return this.modelDelegate.getSpecializations(this);
    }
}
export class Generalization extends Element {
    constructor(modelDelegate, owner) {
        super(modelDelegate, owner);
        this.elementType = elements.ElementType.generalization;
        this.appliedStereotypes = [];
        this.isSubstitutable = false;
        this.taggedValues = [];
    }
    get specific() {
        return this.modelDelegate.getSpecific(this);
    }
}
export class EnumerationLiteral extends Element {
    constructor(modelDelegate, owner) {
        super(modelDelegate, owner);
        this.elementType = elements.ElementType.enumerationLiteral;
        this.appliedStereotypes = [];
        this.name = '';
        this.order = 0;
        this.taggedValues = [];
        this.visibility = null;
    }
    get enumeration() {
        return this.modelDelegate.getEnumeration(this);
    }
    /**
    * Gets the value of the Specification property.
    * @returns {any} The default value (the type depending on the type of value), or null if no default
    * value can be determined.
    */
    getSpecificationValue() {
        return this.modelDelegate.getSpecificationValue(this);
    }
}
export class Enumeration extends Element {
    constructor(modelDelegate, owner) {
        super(modelDelegate, owner);
        this.elementType = elements.ElementType.enumeration;
        this.appliedStereotypes = [];
        this.baseType = null;
        this.generalizations = [];
        this.isAbstract = false;
        this.isFinalSpecialization = false;
        this.isInferred = false;
        this.isLeaf = false;
        this.name = '';
        this.ownedAttributes = [];
        this.ownedLiterals = [];
        this.ownedOperations = [];
        this.taggedValues = [];
        this.visibility = null;
    }
    get package() {
        return this.modelDelegate.getPackage(this);
    }
    /**
    * Returns both inherited and owned attributes.
    * @returns {elements.Property[]}
    */
    getAllAttributes() {
        return this.modelDelegate.getAllAttributes(this);
    }
    /**
    * Returns both inherited and owned operations. Any inherited operation that has the same signature
    * (having the same name and parameter type order) in an inheriting type is not included.
    * @returns {elements.Operation[]}
    */
    getAllOperations() {
        return this.modelDelegate.getAllOperations(this);
    }
    /**
    * Returns all of the direct and indirect ancestors of a generalized Classifier, working outwards: more
    * specific classifiers will appear before more general classifiers.
    * @returns {elements.Classifier[]}
    */
    getAllParents() {
        return this.modelDelegate.getAllParents(this);
    }
    /**
    * Gets all classifiers of which this element is a direct or indirect general.
    * @returns {elements.Classifier[]}
    */
    getAllSpecializations() {
        return this.modelDelegate.getAllSpecializations(this);
    }
    /**
    * Gets the first direct generalization relationship of the element.
    * @returns {elements.Generalization}
    */
    getFirstGeneralization() {
        return this.modelDelegate.getFirstGeneralization(this);
    }
    /**
    * Gets the first classifier that is an immediate general of the current element.
    * @returns {elements.Classifier}
    */
    getFirstParent() {
        return this.modelDelegate.getFirstParent(this);
    }
    /**
    * Constructs a name from the names of the nesting packages. The name is constructed working inwards
    * from the package that is defined as namespace root up to but not including the PackageableElement
    * itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    getNamespaceName(separator) {
        return this.modelDelegate.getNamespaceName(this, separator);
    }
    /**
    * Gets all packages that contain this Package, working inwards from the top Package to the owning
    * package.
    * @returns {elements.Package[]} A collection of Packages.
    */
    getNestingPackages() {
        return this.modelDelegate.getNestingPackages(this);
    }
    /**
    * Gives all of the immediate ancestors of a generalized Classifier.
    * @returns {elements.Classifier[]}
    */
    getParents() {
        return this.modelDelegate.getParents(this);
    }
    /**
    * Constructs a name from the PackageableElement and the names of the nesting packages. The name is
    * constructed working inwards from the package that is defined as namespace root up to and including
    * the PackageableElement itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    getQualifiedName(separator) {
        return this.modelDelegate.getQualifiedName(this, separator);
    }
    /**
    * Gets all classifiers of which this classifier is a direct general.
    * @returns {elements.Classifier[]}
    */
    getSpecializations() {
        return this.modelDelegate.getSpecializations(this);
    }
}
export class DocumentReference {
    constructor() {
        this.name = '';
        this.path = '';
    }
}
export class Comment extends Element {
    constructor(modelDelegate, owner) {
        super(modelDelegate, owner);
        this.elementType = elements.ElementType.comment;
        this.appliedStereotypes = [];
        this.body = '';
        this.taggedValues = [];
    }
}
export class Association extends Element {
    constructor(modelDelegate, owner) {
        super(modelDelegate, owner);
        this.elementType = elements.ElementType.association;
        this.appliedStereotypes = [];
        this.generalizations = [];
        this.isAbstract = false;
        this.isFinalSpecialization = false;
        this.isInferred = false;
        this.isLeaf = false;
        this.memberEnds = [];
        this.name = '';
        this.ownedEnds = [];
        this.taggedValues = [];
        this.visibility = null;
    }
    get package() {
        return this.modelDelegate.getPackage(this);
    }
    /**
    * Returns all of the direct and indirect ancestors of a generalized Classifier, working outwards: more
    * specific classifiers will appear before more general classifiers.
    * @returns {elements.Classifier[]}
    */
    getAllParents() {
        return this.modelDelegate.getAllParents(this);
    }
    /**
    * Gets all classifiers of which this element is a direct or indirect general.
    * @returns {elements.Classifier[]}
    */
    getAllSpecializations() {
        return this.modelDelegate.getAllSpecializations(this);
    }
    /**
    * Gets the first direct generalization relationship of the element.
    * @returns {elements.Generalization}
    */
    getFirstGeneralization() {
        return this.modelDelegate.getFirstGeneralization(this);
    }
    /**
    * Gets the first classifier that is an immediate general of the current element.
    * @returns {elements.Classifier}
    */
    getFirstParent() {
        return this.modelDelegate.getFirstParent(this);
    }
    /**
    * Constructs a name from the names of the nesting packages. The name is constructed working inwards
    * from the package that is defined as namespace root up to but not including the PackageableElement
    * itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    getNamespaceName(separator) {
        return this.modelDelegate.getNamespaceName(this, separator);
    }
    /**
    * Gets all packages that contain this Package, working inwards from the top Package to the owning
    * package.
    * @returns {elements.Package[]} A collection of Packages.
    */
    getNestingPackages() {
        return this.modelDelegate.getNestingPackages(this);
    }
    /**
    * Gives all of the immediate ancestors of a generalized Classifier.
    * @returns {elements.Classifier[]}
    */
    getParents() {
        return this.modelDelegate.getParents(this);
    }
    /**
    * Constructs a name from the PackageableElement and the names of the nesting packages. The name is
    * constructed working inwards from the package that is defined as namespace root up to and including
    * the PackageableElement itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    getQualifiedName(separator) {
        return this.modelDelegate.getQualifiedName(this, separator);
    }
    /**
    * Gets all classifiers of which this classifier is a direct general.
    * @returns {elements.Classifier[]}
    */
    getSpecializations() {
        return this.modelDelegate.getSpecializations(this);
    }
}
//# sourceMappingURL=data:application/json;base64,