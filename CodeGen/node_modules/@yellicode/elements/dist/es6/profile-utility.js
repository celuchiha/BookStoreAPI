/*
 * Copyright (c) 2019 Yellicode
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
import * as Interfaces from "./interfaces";
export class ProfileUtility {
    static getStereotypes(profile) {
        if (!profile.packagedElements)
            return [];
        return profile.packagedElements.filter((e) => e.elementType === Interfaces.ElementType.stereotype);
    }
    static hasStereotypeId(element, stereotypeId) {
        if (!element || !element.appliedStereotypes)
            return false;
        return ProfileUtility.hasStereotypeIdRecursive(element.appliedStereotypes, stereotypeId);
    }
    static hasStereotypeIdRecursive(stereotypes, stereotypeId) {
        for (var index = 0; index < stereotypes.length; index++) {
            var stereotype = stereotypes[index];
            if (stereotype.id === stereotypeId)
                return true;
            // If the stereotype has parents, check these too                        
            const stereotypeGenerals = stereotype.getParents();
            if (stereotypeGenerals.length > 0 && ProfileUtility.hasStereotypeIdRecursive(stereotypeGenerals, stereotypeId)) {
                return true;
            }
        }
        return false;
    }
    static getMetaClassesExtendedBy(stereotype) {
        // First add the stereotype's own meta classes
        return stereotype.extends.map(ext => ext.metaClass);
    }
    static getAllMetaClassesExtendedBy(stereotype) {
        // First add the stereotype's own meta classes
        const metaClasses = ProfileUtility.getMetaClassesExtendedBy(stereotype);
        // Then add meta classes of the specializing stereotypes
        stereotype.getSpecializations().forEach((derivedStereotype) => {
            derivedStereotype.extends.forEach(extension => {
                if (metaClasses.indexOf(extension.metaClass) === -1) {
                    metaClasses.push(extension.metaClass);
                }
            });
        });
        return metaClasses;
    }
    static hasProfileId(pack, profileId) {
        if (!pack || !pack.appliedProfiles)
            return false;
        return pack.appliedProfiles.some((s) => s.id === profileId);
    }
    /**
     * Filters the array of elements by only including the elements that have a particular stereotype applied.
     */
    static filterByStereotypeId(elements, stereotypeId, elementType) {
        if (!elements)
            return [];
        if (elementType) {
            return elements.filter(e => {
                return e.elementType === elementType && ProfileUtility.hasStereotypeId(e, stereotypeId);
            });
        }
        return elements.filter(e => { return ProfileUtility.hasStereotypeId(e, stereotypeId); });
    }
    /**
     * Filters the array of packageable element by only including the packages that have a particular profile applied.
     */
    static filterByProfileId(elements, profileId) {
        if (!elements)
            return [];
        return elements.filter((e) => e.elementType === Interfaces.ElementType.package &&
            ProfileUtility.hasProfileId(e, profileId));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZmlsZS11dGlsaXR5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Byb2ZpbGUtdXRpbGl0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFDSCxPQUFPLEtBQUssVUFBVSxNQUFNLGNBQWMsQ0FBQztBQUczQyxNQUFNO0lBQ0ssTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUEyQjtRQUNwRCxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQjtZQUFFLE9BQU8sRUFBRSxDQUFDO1FBQ3pDLE9BQU8sT0FBTyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsS0FBSyxVQUFVLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBNEIsQ0FBQztJQUNsSSxDQUFDO0lBRU0sTUFBTSxDQUFDLGVBQWUsQ0FBc0MsT0FBd0IsRUFBRSxZQUFvQjtRQUM3RyxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQjtZQUN2QyxPQUFPLEtBQUssQ0FBQztRQUVqQixPQUFPLGNBQWMsQ0FBQyx3QkFBd0IsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDN0YsQ0FBQztJQUVPLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBc0MsV0FBb0MsRUFBRSxZQUFvQjtRQUNuSSxLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsV0FBVyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUNyRCxJQUFJLFVBQVUsR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDcEMsSUFBSSxVQUFVLENBQUMsRUFBRSxLQUFLLFlBQVk7Z0JBQzlCLE9BQU8sSUFBSSxDQUFDO1lBRWhCLHlFQUF5RTtZQUN6RSxNQUFNLGtCQUFrQixHQUFHLFVBQVUsQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUNuRCxJQUFJLGtC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