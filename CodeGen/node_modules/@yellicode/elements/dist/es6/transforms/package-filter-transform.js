import { ElementTypeUtility } from '../utils';
import * as elements from "../interfaces";
/**
 * Transforms a Model or Package by returning just the Package that matches a specified expression.
 */
export class PackageFilterTransform {
    /**
     * Constructor. Creates a new PackageFilterTransform that only includes the package with the specified name.
     * @param expression The name of the package. If the name ends with a forward-slash ('/'), nested
     * packages will be included. The expression is case-insensitive.
     */
    constructor(expression) {
        if (!expression) {
            throw `Unable to filter packages. The filter expression cannot be empty.`;
        }
        const normalizedExpression = expression.toLowerCase();
        if (normalizedExpression.endsWith('/')) {
            this.includeNestedPackages = true;
            this.packageName = normalizedExpression.substring(0, normalizedExpression.length - 1);
        }
        else {
            this.packageName = normalizedExpression;
            this.includeNestedPackages = false;
        }
    }
    /**
     * Transforms the source Model or Package and returns the first Package that matches the expression.
     * The result will be empty if the package could not be found.
     * @param source The Model or Package to transform.
     */
    transform(source) {
        if (!source || !source.packagedElements)
            return source;
        const pack = PackageFilterTransform.findPackageRecursive(source, (pack) => {
            return (pack.name != null) && (pack.name.toLowerCase() === this.packageName);
        });
        if (!pack)
            throw `Unable to filter packages. Could not find any nested package with name '${this.packageName}'.`;
        // Remove any nested packages if needed
        if (!this.includeNestedPackages && pack.packagedElements != null) {
            pack.packagedElements = pack.packagedElements.filter(e => !(ElementTypeUtility.isPackage(e.elementType)));
        }
        return pack;
    }
    static findPackageRecursive(root, predicate) {
        if (predicate(root))
            return root;
        if (root.packagedElements == null)
            return null;
        // We use a for loop so that we can easily return when we 
        for (var i = 0, len = root.packagedElements.length; i < len; i++) {
            const packagedElement = root.packagedElements[i];
            if (packagedElement.elementType === elements.ElementType.package) {
                const childResult = PackageFilterTransform.findPackageRecursive(packagedElement, predicate);
                if (childResult != null)
                    return childResult;
            }
        }
        return null;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFja2FnZS1maWx0ZXItdHJhbnNmb3JtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3RyYW5zZm9ybXMvcGFja2FnZS1maWx0ZXItdHJhbnNmb3JtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUM5QyxPQUFPLEtBQUssUUFBUSxNQUFNLGVBQWUsQ0FBQztBQUUxQzs7R0FFRztBQUNILE1BQU07SUFJRjs7OztPQUlHO0lBQ0gsWUFBWSxVQUFrQjtRQUMxQixJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2IsTUFBTSxtRUFBbUUsQ0FBQztTQUM3RTtRQUNELE1BQU0sb0JBQW9CLEdBQUcsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3RELElBQUksb0JBQW9CLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3BDLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUM7WUFDbEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLG9CQUFvQixDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztTQUN6RjthQUFNO1lBQ0gsSUFBSSxDQUFDLFdBQVcsR0FBRyxvQkFBb0IsQ0FBQztZQUN4QyxJQUFJLENBQUMscUJBQXFCLEdBQUcsS0FBSyxDQUFDO1NBQ3RDO0lBQ0wsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxTQUFTLENBQUMsTUFBeUM7UUFDdEQsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0I7WUFDbkMsT0FBTyxNQUFNLENBQUM7UUFFbEIsTUFBTSxJQUFJLEdBQUcsc0JBQXNCLENBQUMsb0JBQW9CLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBc0IsRUFBRSxFQUFFO1lBQ3hGLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDakYsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsSUFBSTtZQUNMLE1BQU0sMkVBQTJFLElBQUksQ0FBQyxXQUFXLElBQUksQ0FBQztRQUUxRyx1Q0FBdUM7UUFDdkMsSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLElBQUksSUFBSSxFQUFFO1lBQzlELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzdHO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVPLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxJQUFzQixFQUFFLFNBQThDO1FBQ3RHLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQztZQUFFLE9BQU8sSUFBSSxDQUFDO1FBQ2pDLElBQUksSUFBSSxDQUFDLGdCQUFnQixJQUFJLElBQUk7WUFBRSxPQUFPLElBQUksQ0FBQztRQUMvQywwREFBMEQ7UUFDMUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM5RCxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakQsSUFBSSxlQUFlLENBQUMsV0FBVyxLQUFLLFFBQVEsQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFO2dCQUM5RCxNQUFNLFdBQVcsR0FBRyxzQkFBc0IsQ0FBQyxvQkFBb0IsQ0FBQyxlQUFtQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO2dCQUNoSCxJQUFJLFdBQVcsSUFBSSxJQUFJO29CQUFFLE9BQU8sV0FBVyxDQUFDO2FBQy9DO1NBQ0o7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0NBQ0oifQ==