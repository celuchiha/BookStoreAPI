import { PackagedElementTransform } from './packaged-element-transform';
import { NameUtility } from '@yellicode/core';
import { ElementTypeUtility } from '../utils';
// Note: using plural words here to avoid using reserved keywords.
/**
 * Enumerates which element types to be renamed when performing rename transforms.
 */
export var RenameTargets;
(function (RenameTargets) {
    /**
     * No elements are renamed.
     */
    RenameTargets[RenameTargets["none"] = 0] = "none";
    /**
     * Classes are renamed.
     */
    RenameTargets[RenameTargets["classes"] = 1] = "classes";
    /**
     * Interfaces are renamed.
     */
    RenameTargets[RenameTargets["interfaces"] = 2] = "interfaces";
    /**
     * Properties are renamed.
     */
    RenameTargets[RenameTargets["properties"] = 4] = "properties";
    /**
     * Operations are renamed.
     */
    RenameTargets[RenameTargets["operations"] = 8] = "operations";
    /**
     * Operation parameters are renamed.
     */
    RenameTargets[RenameTargets["parameters"] = 16] = "parameters";
    /**
     * Enumerations are renamed.
     */
    RenameTargets[RenameTargets["enumerations"] = 32] = "enumerations";
    /**
     * Enumeration literals are renamed.
     */
    RenameTargets[RenameTargets["enumerationLiterals"] = 64] = "enumerationLiterals";
    /**
     * All members are renamed: properties, operations, parameters and enumerationLiterals.
     */
    RenameTargets[RenameTargets["allMembers"] = 92] = "allMembers";
    /**
     * All elements are renamed.
     */
    RenameTargets[RenameTargets["all"] = 127] = "all";
})(RenameTargets || (RenameTargets = {}));
/**
 * A base class for renaming classes, interfaces, properties, operations parameters, enumerations and enumeration literals.
 */
export class RenamingTransform extends PackagedElementTransform {
    /**
     * Constructor. Creates a new RenamingTransform with the specified targets.
     * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
     */
    constructor(targets) {
        super();
        this.targets = targets == null ? RenameTargets.all : targets;
    }
    hasTarget(target) {
        if (this.targets & target)
            return true;
        else
            return false;
    }
    transformElement(element) {
        if (!ElementTypeUtility.isMemberedClassifier(element.elementType))
            return;
        if (this.hasTarget(RenameTargets.classes) && ElementTypeUtility.isClass(element.elementType)) {
            element.name = this.rename(element.name, element);
        }
        if (this.hasTarget(RenameTargets.interfaces) && ElementTypeUtility.isInterface(element.elementType)) {
            element.name = this.rename(element.name, element);
        }
        // The element has OwnedAttributes and OwnedOperations
        var classifier = element;
        if (classifier.ownedAttributes != null && this.hasTarget(RenameTargets.properties)) {
            classifier.ownedAttributes.forEach(att => {
                att.name = this.rename(att.name, att);
            });
        }
        if (classifier.ownedOperations != null) {
            classifier.ownedOperations.forEach(op => {
                if (this.hasTarget(RenameTargets.operations)) {
                    op.name = this.rename(op.name, op);
                }
                if (this.hasTarget(RenameTargets.parameters)) {
                    op.ownedParameters.forEach(p => {
                        p.name = this.rename(p.name, p);
                    });
                }
            });
        }
        if (ElementTypeUtility.isEnumeration(element.elementType)) {
            var enumeration = element;
            if (this.hasTarget(RenameTargets.enumerations)) {
                enumeration.name = this.rename(enumeration.name, enumeration);
            }
            if (enumeration.ownedLiterals != null && this.hasTarget(RenameTargets.enumerationLiterals)) {
                enumeration.ownedLiterals.forEach(literal => {
                    literal.name = this.rename(literal.name, literal);
                });
            }
        }
    }
}
/**
 * A transform that capitalizes its rename targets, that is, makes the
 * first character uppercase.
 */
export class CapitalizingTransform extends RenamingTransform {
    /**
     * Constructor. Creates a new CapitalizingTransform with the specified targets.
     * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
     */
    constructor(targets) {
        super(targets);
    }
    rename(name, target) {
        return NameUtility.capitalize(name);
    }
}
/**
 * A transform that uncapitalizes its rename targets, that is, makes the
 * first character lowercase.
 */
export class UnCapitalizingTransform extends RenamingTransform {
    /**
     * Constructor. Creates a new UnCapitalizingTransform with the specified targets.
     * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
     */
    constructor(targets) {
        super(targets);
    }
    rename(name, target) {
        return NameUtility.unCapitalize(name);
    }
}
/**
 * A transform that converts its rename targets from UpperCamelCase to lowerCamelCase.
 */
export class UpperToLowerCamelCaseTransform extends RenamingTransform {
    /**
       * Constructor. Creates a new UpperToLowerCamelCaseTransform with the specified targets.
       * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
       */
    constructor(targets) {
        super(targets);
    }
    rename(name, target) {
        return NameUtility.upperToLowerCamelCase(name);
    }
}
/**
 * A transform that converts its rename targets from lowerCamelCase to UpperCamelCase.
 */
export class LowerToUpperCamelCaseTransform extends RenamingTransform {
    /**
       * Constructor. Creates a new LowerToUpperCamelCaseTransform with the specified targets.
       * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
       */
    constructor(targets) {
        super(targets);
    }
    rename(name, target) {
        return NameUtility.lowerToUpperCamelCase(name);
    }
}
/**
 * A transform that adds a prefix to its rename targets.
 */
export class PrefixingTransform extends RenamingTransform {
    /**
    * Constructor. Creates a new PrefixingTransform with the specified targets.
    * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
    */
    constructor(targets, prefix) {
        super(targets);
        this.prefix = prefix;
    }
    rename(name, target) {
        return this.prefix + name;
    }
}
/**
 * A transform that adds a suffix to its rename targets.
 */
export class SuffixingTransform extends RenamingTransform {
    /**
    * Constructor. Creates a new SuffixingTransform with the specified targets.
    * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
    */
    constructor(targets, suffix) {
        super(targets);
        this.suffix = suffix;
    }
    rename(name, target) {
        return name + this.suffix;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuYW1pbmctdHJhbnNmb3Jtcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90cmFuc2Zvcm1zL3JlbmFtaW5nLXRyYW5zZm9ybXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDeEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUU5QyxrRUFBa0U7QUFFbEU7O0dBRUc7QUFDSCxNQUFNLENBQU4sSUFBWSxhQXlDWDtBQXpDRCxXQUFZLGFBQWE7SUFDckI7O09BRUc7SUFDSCxpREFBUSxDQUFBO0lBQ1I7O09BRUc7SUFDSCx1REFBZ0IsQ0FBQTtJQUNoQjs7T0FFRztJQUNILDZEQUFtQixDQUFBO0lBQ25COztPQUVHO0lBQ0gsNkRBQW1CLENBQUE7SUFDbkI7O09BRUc7SUFDSCw2REFBbUIsQ0FBQTtJQUNuQjs7T0FFRztJQUNILDhEQUFtQixDQUFBO0lBQ25COztPQUVHO0lBQ0gsa0VBQXFCLENBQUE7SUFDckI7O09BRUc7SUFDSCxnRkFBNEIsQ0FBQTtJQUM1Qjs7T0FFRztJQUNILDhEQUF1RSxDQUFBO0lBQ3ZFOztPQUVHO0lBQ0gsaURBQXNHLENBQUE7QUFDMUcsQ0FBQyxFQXpDVyxhQUFhLEtBQWIsYUFBYSxRQXlDeEI7QUFFRDs7R0FFRztBQUNILE1BQU0sd0JBQWtDLFNBQVEsd0JBQXdCO0lBR3BFOzs7T0FHRztJQUNILFlBQVksT0FBdUI7UUFDL0IsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUNqRSxDQUFDO0lBRU8sU0FBUyxDQUFDLE1BQXFCO1FBQ25DLElBQUksSUFB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