import { ElementTypeUtility } from './utils';
export class ElementMapImpl {
    constructor() {
        this.elementsById = {};
        this.specializationsById = {};
        this.associationsByEndId = {};
    }
    addElement(element, elementData) {
        if (this.elementsById.hasOwnProperty(element.id)) {
            console.warn(`Duplicate element id '${element.id}'.`);
            return;
        }
        this.elementsById[element.id] = element;
        // Add generalizations to the specialization map
        if (ElementTypeUtility.isClassifier(element.elementType) && elementData) {
            this.addSpecializations(element, elementData);
        }
        // Add association ends to the assciationEnd map
        if (ElementTypeUtility.isAssociation(element.elementType) && elementData) {
            this.addAssociationEnds(element, elementData);
        }
    }
    addAssociationEnds(association, associationData) {
        // Get memberEnds of assocationData instead of association itself: the ends  will not be set here as they are not resolved yet
        // by DataToModelConverter.resolveAssociationReferences().        
        if (!associationData.memberEnds)
            return;
        associationData.memberEnds.forEach(endId => {
            // An association end can only be part of one association.
            if (this.associationsByEndId.hasOwnProperty(endId)) {
                console.warn(`Association end with id '${endId}' is already part of another association than ${associationData.id}.`);
            }
            this.associationsByEndId[endId] = association;
        });
    }
    addSpecializations(classifier, classifierData) {
        if (!classifierData.generalizations)
            return;
        // Enumerate the classifierData instead of the classifier itself: the generalizations will not be set here as they are not resolved yet
        classifierData.generalizations.forEach(g => {
            let dictionaryEntry;
            // g is a Generalization of element, so element is a Specialization of g
            if (this.specializationsById.hasOwnProperty(g.general)) {
                dictionaryEntry = this.specializationsById[g.general];
                dictionaryEntry.push(classifier);
            }
            else {
                this.specializationsById[g.general] = [classifier];
            }
        });
    }
    getAssociationHavingMemberEnd(end) {
        if (!end || !end.id)
            return null;
        if (!this.associationsByEndId.hasOwnProperty(end.id))
            return null;
        return this.associationsByEndId[end.id];
    }
    hasElement(id) {
        return this.elementsById.hasOwnProperty(id);
    }
    getElementById(id) {
        if (!id || id.length === 0)
            return null;
        if (this.elementsById.hasOwnProperty(id))
            return this.elementsById[id];
        else {
            console.warn(`Unkown element id '${id}'.`);
            return null;
        }
    }
    getElementsByIdList(idList) {
        const result = [];
        if (idList == null)
            return result;
        idList.forEach((id) => {
            const element = this.getElementById(id);
            if (element != null)
                result.push(element);
        });
        return result;
    }
    getSpecializationsOf(generalId) {
        if (!this.specializationsById.hasOwnProperty(generalId))
            return [];
        return this.specializationsById[generalId];
    }
    getAllSpecializationsOf(generalId) {
        if (!this.specializationsById.hasOwnProperty(generalId))
            return [];
        const specialMap = {};
        this.getAllSpecializationsRecursive(generalId, specialMap);
        // Convert the result to an array
        const result = [];
        for (var specializationId in specialMap) {
            result.push(specialMap[specializationId]);
        }
        return result;
    }
    getAllSpecializationsRecursive(generalId, specialMap) {
        if (!this.specializationsById.hasOwnProperty(generalId)) {
            return;
        }
        const directSpecializations = this.specializationsById[generalId];
        directSpecializations.forEach(s => {
            if (!specialMap.hasOwnProperty(s.id)) {
                specialMap[s.id] = s;
            }
            // Get the specializations of this specialization
            this.getAllSpecializationsRecursive(s.id, specialMap);
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudC1tYXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZWxlbWVudC1tYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBU0EsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRTdDLE1BQU07SUFBTjtRQUNZLGlCQUFZLEdBQTBDLEVBQUUsQ0FBQztRQUN6RCx3QkFBbUIsR0FBcUQsRUFBRSxDQUFDO1FBQzNFLHdCQUFtQixHQUFnRCxFQUFFLENBQUM7SUEwSGxGLENBQUM7SUF4SFUsVUFBVSxDQUFDLE9BQTJCLEVBQUUsV0FBb0M7UUFDL0UsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDOUMsT0FBTyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsT0FBTyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDdEQsT0FBTztTQUNWO1FBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDO1FBRXhDLGdEQUFnRDtRQUNoRCxJQUFJLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksV0FBVyxFQUFFO1lBQ3JFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFnQyxFQUFFLFdBQWtDLENBQUMsQ0FBQztTQUNqRztRQUNELGdEQUFnRDtRQUNoRCxJQUFJLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksV0FBVyxFQUFFO1lBQ3RFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFpQyxFQUFFLFdBQW1DLENBQUMsQ0FBQztTQUNuRztJQUNMLENBQUM7SUFFTyxrQkFBa0IsQ0FBQyxXQUFtQyxFQUFFLGVBQXFDO1FBQ2pHLDhIQUE4SDtRQUM5SCxrRUFBa0U7UUFDbEUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVO1lBQzNCLE9B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