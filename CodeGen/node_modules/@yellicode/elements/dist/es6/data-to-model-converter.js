/*
* Copyright (c) 2019 Yellicode
*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0. If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/**
* This code was generated by a tool.
*
* Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
*/
import * as elements from './interfaces';
import * as classes from './classes';
const PRIMITIVE_BOOLEAN_ID = "boolean_id";
const PRIMITIVE_INTEGER_ID = "integer_id";
const PRIMITIVE_REAL_ID = "real_id";
const PRIMITIVE_STRING_ID = "string_id";
const PRIMITIVE_OBJECT_ID = "object_id";
const PRIMITIVE_UNLIMITEDNATURAL_ID = "unlimitednatural_id";
export class DataToModelConverter {
    constructor(elementMap, modelDelegate, elementComparer) {
        this.elementMap = elementMap;
        this.modelDelegate = modelDelegate;
        this.elementComparer = elementComparer;
        this.referencesToResolve = [];
        const primitiveTypes = this.createPrimitiveTypes();
        primitiveTypes.forEach(t => {
            this.elementMap.addElement(t, null);
        });
    }
    createPrimitiveTypes() {
        const result = [];
        const booleanType = new classes.PrimitiveType(this.modelDelegate, null);
        booleanType.id = PRIMITIVE_BOOLEAN_ID;
        booleanType.name = 'boolean';
        result.push(booleanType);
        const integerType = new classes.PrimitiveType(this.modelDelegate, null);
        integerType.id = PRIMITIVE_INTEGER_ID;
        integerType.name = 'integer';
        result.push(integerType);
        const realType = new classes.PrimitiveType(this.modelDelegate, null);
        realType.id = PRIMITIVE_REAL_ID;
        realType.name = 'real';
        result.push(realType);
        const stringType = new classes.PrimitiveType(this.modelDelegate, null);
        stringType.id = PRIMITIVE_STRING_ID;
        stringType.name = 'string';
        result.push(stringType);
        const objectType = new classes.PrimitiveType(this.modelDelegate, null);
        objectType.id = PRIMITIVE_OBJECT_ID;
        objectType.name = 'object';
        result.push(objectType);
        const unlimitedNaturalType = new classes.PrimitiveType(this.modelDelegate, null);
        unlimitedNaturalType.id = PRIMITIVE_UNLIMITEDNATURAL_ID;
        unlimitedNaturalType.name = 'UnlimitedNatural';
        result.push(unlimitedNaturalType);
        return result;
    }
    createElementType(elementData) {
        switch (elementData) // serialized as string
         {
            case 'class': return elements.ElementType.class;
            case 'stereotype': return elements.ElementType.stereotype;
            case 'property': return elements.ElementType.property;
            case 'package': return elements.ElementType.package;
            case 'profile': return elements.ElementType.profile;
            case 'dataType': return elements.ElementType.dataType;
            case 'primitiveType': return elements.ElementType.primitiveType;
            case 'parameter': return elements.ElementType.parameter;
            case 'operation': return elements.ElementType.operation;
            case 'model': return elements.ElementType.model;
            case 'literalUnlimitedNatural': return elements.ElementType.literalUnlimitedNatural;
            case 'literalString': return elements.ElementType.literalString;
            case 'literalReal': return elements.ElementType.literalReal;
            case 'literalNull': return elements.ElementType.literalNull;
            case 'literalInteger': return elements.ElementType.literalInteger;
            case 'literalBoolean': return elements.ElementType.literalBoolean;
            case 'interfaceRealization': return elements.ElementType.interfaceRealization;
            case 'interface': return elements.ElementType.interface;
            case 'generalization': return elements.ElementType.generalization;
            case 'enumerationLiteral': return elements.ElementType.enumerationLiteral;
            case 'enumeration': return elements.ElementType.enumeration;
            case 'comment': return elements.ElementType.comment;
            case 'association': return elements.ElementType.association;
            default: throw `Error reading model. Could not map ElementType value '${elementData}'.`;
        }
    }
    /**
     * NOTE: this function must be edited in the partial template file.
     */
    createElementId(elementId) {
        return elementId; //  
        // Obsolete: ids must be prefixed if we are loading a referenced document, because references to it 
        // are prefixed with the document id    
        //return this.elementIdPrefix ? this.elementIdPrefix + '.' + elementId : elementId;
    }
    /**
     * NOTE: this function must be edited in the partial template file.
     */
    convert(elementData, profiles) {
        // this.elementIdPrefix = elementIdPrefix;
        // Deprecated: Extend prototypes with profile specific accessors
        // if (profiles) {
        //     ProfileExtender.applyProfiles(profiles);
        // }
        // Load the object tree recursively. This will fill elementMap and referencesToResolve.
        const model = this.createModel(elementData);
        // Now the object tree is loaded, set references between objects
        this.referencesToResolve.forEach((item) => {
            item.resolvefn.call(this, item.target, item.data);
        });
        this.referencesToResolve = []; // Release this list
        return model;
    }
    /**
     * NOTE: this function must be edited in the partial template file.
     */
    addElementById(elementData, element) {
        if ((!elementData.id || elementData.id.length === 0)) {
            // The following element types do not require an id 
            if (elementData.elementType !== 'enumerationLiteral' && elementData.elementType !== 'comment' && !DataToModelConverter.isValueSpecification(elementData.elementType)) {
                console.warn(`Mising id on element of type '${elementData.elementType}'.`);
            }
            return;
        }
        this.elementMap.addElement(element, elementData);
    }
    /**
     * Gets the id of the matching built-in primitive type if the element type is a literal type.
     * NOTE: this function must be edited in the partial template file.
     */
    static getTypeIdIfLiteralType(elementType) {
        switch (elementType) {
            case 'literalBoolean':
                return PRIMITIVE_BOOLEAN_ID;
            case 'literalInteger':
                return PRIMITIVE_INTEGER_ID;
            case 'literalReal':
                return PRIMITIVE_REAL_ID;
            case 'literalString':
                return PRIMITIVE_STRING_ID;
            case 'literalUnlimitedNatural':
                return PRIMITIVE_UNLIMITEDNATURAL_ID;
            default:
                // TODO: deal with literalNull?			
                return undefined; // returns undefined because the result is assigned to a data property "type?: string;"
        }
    }
    /**
   * Custom function to create element properties from tagged values.
   * NOTE: this function must be edited in the partial template file.
   */
    mapTaggedValues(elementData, element) {
        if (!elementData.appliedStereotypes)
            return;
        // Get the stereotypes applied to this element. For each stereotype, get the meta properties.	
        // Note that we should not use element.appliedStereotypes because that data is not available
        // at this point.
        elementData.appliedStereotypes.forEach(stereotypeId => {
            // Lookup the stereotype by id. It should be indexed because the profiles are loaded first
            const st = this.elementMap.getElementById(stereotypeId);
            if (!st) {
                return console.warn(`Element ${element.id} refers to undefined stereotype ${stereotypeId}.`);
            }
            element["stereotypeName"] = st.name; // always generated
            var stereotypeMetaProperties = st.getAllAttributes(); // stereotypes can inherit other stereotypes
            stereotypeMetaProperties.forEach(metaProperty => {
                if (element.hasOwnProperty(metaProperty.name))
                    return;
                //  Extend the element with the property. But determine the value first.				
                let valueSpecification = null;
                const taggedValue = elementData.taggedValues ? elementData.taggedValues.find(v => v.definition === metaProperty.id) : null;
                if (taggedValue) {
                    valueSpecification = this.createValueSpecification(taggedValue.specification, element);
                }
                else if (metaProperty.defaultValue) {
                    valueSpecification = metaProperty.defaultValue;
                }
                element[metaProperty.name] = valueSpecification ? valueSpecification.getValue() : null;
            });
        });
    }
    createVisibilityKind(elementData) {
        switch (elementData) // serialized as string
         {
            case 'public': return elements.VisibilityKind.public;
            case 'private': return elements.VisibilityKind.private;
            case 'protected': return elements.VisibilityKind.protected;
            case 'package': return elements.VisibilityKind.package;
            default: throw `Error reading model. Could not map VisibilityKind value '${elementData}'.`;
        }
    }
    mapElement(elementData, target, owner) {
        target.id = this.createElementId(elementData.id);
        if (elementData.ownedComments) {
            target.ownedComments.push(...elementData.ownedComments.map((e) => { return this.createComment(e, target); }));
        }
        if (elementData.taggedValues) {
            target.taggedValues.push(...elementData.taggedValues.map((e) => { return this.createTaggedValueSpecification(e, target); }));
        }
        this.referencesToResolve.push({ target: target, data: elementData, resolvefn: this.resolveElementReferences });
    }
    resolveElementReferences(target, elementData) {
        if (elementData.appliedStereotypes) {
            target.appliedStereotypes.push(...this.elementMap.getElementsByIdList(elementData.appliedStereotypes));
        }
    }
    mapNamedElement(elementData, target, owner) {
        if (elementData.name) {
            target.name = elementData.name;
        }
        if (elementData.visibility) {
            target.visibility = this.createVisibilityKind(elementData.visibility);
        }
    }
    mapTypedElement(elementData, target, owner) {
        this.referencesToResolve.push({ target: target, data: elementData, resolvefn: this.resolveTypedElementReferences });
    }
    resolveTypedElementReferences(target, elementData) {
        // Special case for TypedElement: if this is a literal specification, the type can be a predefined primitive.
        if (!elementData.type) {
            elementData.type = DataToModelConverter.getTypeIdIfLiteralType(elementData.elementType);
        }
        target.type = elementData.type ? this.elementMap.getElementById(elementData.type) : null;
    }
    createValueSpecification(elementData, owner) {
        switch (elementData.elementType) {
            case "literalUnlimitedNatural":
                return this.createLiteralUnlimitedNatural(elementData, owner);
            case "literalString":
                return this.createLiteralString(elementData, owner);
            case "literalReal":
                return this.createLiteralReal(elementData, owner);
            case "literalNull":
                return this.createLiteralNull(elementData, owner);
            case "literalInteger":
                return this.createLiteralInteger(elementData, owner);
            case "literalBoolean":
                return this.createLiteralBoolean(elementData, owner);
            default: throw `Error reading model. Could not map ValueSpecification of type ${elementData.elementType}.`;
        }
    }
    static isValueSpecification(elementType) {
        switch (elementType) {
            case "literalUnlimitedNatural":
            case "literalString":
            case "literalReal":
            case "literalNull":
            case "literalInteger":
            case "literalBoolean":
                return true;
            default: return false;
        }
    }
    mapPackageableElement(elementData, target, owner) {
    }
    createPackageableElement(elementData, owner) {
        switch (elementData.elementType) {
            case "interface":
                return this.createInterface(elementData, owner);
            case "primitiveType":
                return this.createPrimitiveType(elementData, owner);
            case "enumeration":
                return this.createEnumeration(elementData, owner);
            case "dataType":
                return this.createDataType(elementData, owner);
            case "stereotype":
                return this.createStereotype(elementData, owner);
            case "class":
                return this.createClass(elementData, owner);
            case "association":
                return this.createAssociation(elementData, owner);
            case "profile":
                return this.createProfile(elementData, owner);
            case "package":
                return this.createPackage(elementData, owner);
            default: throw `Error reading model. Could not map PackageableElement of type ${elementData.elementType}.`;
        }
    }
    static isPackageableElement(elementType) {
        switch (elementType) {
            case "interface":
            case "primitiveType":
            case "enumeration":
            case "dataType":
            case "stereotype":
            case "class":
            case "association":
            case "profile":
            case "package":
                return true;
            default: return false;
        }
    }
    mapType(elementData, target, owner) {
        if (elementData.isInferred) {
            target.isInferred = elementData.isInferred;
        }
    }
    mapTaggedValueSpecification(elementData, target, owner) {
        if (elementData.specification) {
            target.specification = this.createValueSpecification(elementData.specification, owner);
        }
        this.referencesToResolve.push({ target: target, data: elementData, resolvefn: this.resolveTaggedValueSpecificationReferences });
    }
    resolveTaggedValueSpecificationReferences(target, elementData) {
        if (!elementData.definition)
            console.error(`Unable to set property 'definition'. The following data is missing a 'definition' field: ${JSON.stringify(elementData)}.`);
        const definition = this.elementMap.getElementById(elementData.definition);
        if (definition) {
            target.definition = definition;
        }
        else
            console.error(`Unable to set property 'definition'. Property with id '${elementData.definition}' does not exist.`);
    }
    createTaggedValueSpecification(elementData, owner) {
        const element = new classes.TaggedValueSpecification();
        this.mapTaggedValueSpecification(elementData, element, owner);
        return element;
    }
    mapRedefinableElement(elementData, target, owner) {
        if (elementData.isLeaf) {
            target.isLeaf = elementData.isLeaf;
        }
    }
    mapClassifier(elementData, target, owner) {
        if (elementData.generalizations) {
            target.generalizations.push(...elementData.generalizations.map((e) => { return this.createGeneralization(e, target); }));
        }
        if (elementData.isAbstract) {
            target.isAbstract = elementData.isAbstract;
        }
        if (elementData.isFinalSpecialization) {
            target.isFinalSpecialization = elementData.isFinalSpecialization;
        }
    }
    mapMultiplicityElement(elementData, target, owner) {
        if (elementData.isOrdered) {
            target.isOrdered = elementData.isOrdered;
        }
        if (elementData.isUnique) {
            target.isUnique = elementData.isUnique;
        }
        if (elementData.lowerValue) {
            target.lowerValue = this.createValueSpecification(elementData.lowerValue, target);
        }
        if (elementData.upperValue) {
            target.upperValue = this.createValueSpecification(elementData.upperValue, target);
        }
    }
    mapOrderedElement(elementData, target, owner) {
        if (elementData.order) {
            target.order = elementData.order;
        }
    }
    mapFeature(elementData, target, owner) {
        if (elementData.isStatic) {
            target.isStatic = elementData.isStatic;
        }
    }
    mapStructuralFeature(elementData, target, owner) {
        if (elementData.isReadOnly) {
            target.isReadOnly = elementData.isReadOnly;
        }
    }
    mapStereotypeExtension(elementData, target, owner) {
        if (elementData.isRequired) {
            target.isRequired = elementData.isRequired;
        }
        if (elementData.metaClass) {
            target.metaClass = this.createElementType(elementData.metaClass);
        }
    }
    createStereotypeExtension(elementData, owner) {
        const element = new classes.StereotypeExtension();
        this.mapStereotypeExtension(elementData, element, owner);
        return element;
    }
    mapMemberedClassifier(elementData, target, owner) {
        if (elementData.ownedAttributes) {
            target.ownedAttributes.push(...elementData.ownedAttributes.map((e) => { return this.createProperty(e, target); }).sort(this.elementComparer.compareOrderedElements));
        }
        if (elementData.ownedOperations) {
            target.ownedOperations.push(...elementData.ownedOperations.map((e) => { return this.createOperation(e, target); }).sort(this.elementComparer.compareOrderedElements));
        }
    }
    mapBehavioredClassifier(elementData, target, owner) {
        if (elementData.interfaceRealizations) {
            target.interfaceRealizations.push(...elementData.interfaceRealizations.map((e) => { return this.createInterfaceRealization(e, target); }));
        }
    }
    mapClass(elementData, target, owner) {
        if (elementData.isActive) {
            target.isActive = elementData.isActive;
        }
    }
    createClass(elementData, owner) {
        const element = new classes.Class(this.modelDelegate, owner);
        this.mapElement(elementData, element, element);
        this.mapNamedElement(elementData, element, element);
        this.mapPackageableElement(elementData, element, element);
        this.mapRedefinableElement(elementData, element, element);
        this.mapType(elementData, element, element);
        this.mapClassifier(elementData, element, element);
        this.mapMemberedClassifier(elementData, element, element);
        this.mapBehavioredClassifier(elementData, element, element);
        this.mapClass(elementData, element, element);
        this.mapTaggedValues(elementData, element); // added by code generation
        this.addElementById(elementData, element);
        return element;
    }
    mapStereotype(elementData, target, owner) {
        if (elementData.extends) {
            target.extends.push(...elementData.extends.map((e) => { return this.createStereotypeExtension(e, target); }));
        }
        if (elementData.safeName) {
            target.safeName = elementData.safeName;
        }
    }
    createStereotype(elementData, owner) {
        const element = new classes.Stereotype(this.modelDelegate, owner);
        this.mapElement(elementData, element, element);
        this.mapNamedElement(elementData, element, element);
        this.mapPackageableElement(elementData, element, element);
        this.mapRedefinableElement(elementData, element, element);
        this.mapType(elementData, element, element);
        this.mapClassifier(elementData, element, element);
        this.mapMemberedClassifier(elementData, element, element);
        this.mapBehavioredClassifier(elementData, element, element);
        this.mapClass(elementData, element, element);
        this.mapStereotype(elementData, element, element);
        this.mapTaggedValues(elementData, element); // added by code generation
        this.addElementById(elementData, element);
        return element;
    }
    mapProperty(elementData, target, owner) {
        if (elementData.aggregation) {
            target.aggregation = this.createAggregationKind(elementData.aggregation);
        }
        if (elementData.defaultValue) {
            target.defaultValue = this.createValueSpecification(elementData.defaultValue, target);
        }
        if (elementData.isDerived) {
            target.isDerived = elementData.isDerived;
        }
        if (elementData.isDerivedUnion) {
            target.isDerivedUnion = elementData.isDerivedUnion;
        }
        if (elementData.isID) {
            target.isID = elementData.isID;
        }
        if (elementData.isNavigable) {
            target.isNavigable = elementData.isNavigable;
        }
    }
    createProperty(elementData, owner) {
        const element = new classes.Property(this.modelDelegate, owner);
        this.mapElement(elementData, element, element);
        this.mapNamedElement(elementData, element, element);
        this.mapOrderedElement(elementData, element, element);
        this.mapRedefinableElement(elementData, element, element);
        this.mapTypedElement(elementData, element, element);
        this.mapMultiplicityElement(elementData, element, element);
        this.mapFeature(elementData, element, element);
        this.mapStructuralFeature(elementData, element, element);
        this.mapProperty(elementData, element, element);
        this.mapTaggedValues(elementData, element); // added by code generation
        this.addElementById(elementData, element);
        return element;
    }
    mapPackage(elementData, target, owner) {
        if (elementData.isNamespaceRoot) {
            target.isNamespaceRoot = elementData.isNamespaceRoot;
        }
        if (elementData.packagedElements) {
            target.packagedElements.push(...elementData.packagedElements.map((e) => { return this.createPackageableElement(e, target); }).sort(this.elementComparer.comparePackageableElements));
        }
        this.referencesToResolve.push({ target: target, data: elementData, resolvefn: this.resolvePackageReferences });
    }
    resolvePackageReferences(target, elementData) {
        if (elementData.appliedProfiles) {
            target.appliedProfiles.push(...this.elementMap.getElementsByIdList(elementData.appliedProfiles));
        }
    }
    createPackage(elementData, owner) {
        const element = new classes.Package(this.modelDelegate, owner);
        this.mapElement(elementData, element, element);
        this.mapNamedElement(elementData, element, element);
        this.mapPackageableElement(elementData, element, element);
        this.mapPackage(elementData, element, element);
        this.mapTaggedValues(elementData, element); // added by code generation
        this.addElementById(elementData, element);
        return element;
    }
    mapProfile(elementData, target, owner) {
        if (elementData.safeName) {
            target.safeName = elementData.safeName;
        }
    }
    createProfile(elementData, owner) {
        const element = new classes.Profile(this.modelDelegate, owner);
        this.mapElement(elementData, element, element);
        this.mapNamedElement(elementData, element, element);
        this.mapPackageableElement(elementData, element, element);
        this.mapPackage(elementData, element, element);
        this.mapProfile(elementData, element, element);
        this.mapTaggedValues(elementData, element); // added by code generation
        this.addElementById(elementData, element);
        return element;
    }
    createDataType(elementData, owner) {
        const element = new classes.DataType(this.modelDelegate, owner);
        this.mapElement(elementData, element, element);
        this.mapNamedElement(elementData, element, element);
        this.mapPackageableElement(elementData, element, element);
        this.mapRedefinableElement(elementData, element, element);
        this.mapType(elementData, element, element);
        this.mapClassifier(elementData, element, element);
        this.mapMemberedClassifier(elementData, element, element);
        this.mapTaggedValues(elementData, element); // added by code generation
        this.addElementById(elementData, element);
        return element;
    }
    createPrimitiveType(elementData, owner) {
        const element = new classes.PrimitiveType(this.modelDelegate, owner);
        this.mapElement(elementData, element, element);
        this.mapNamedElement(elementData, element, element);
        this.mapPackageableElement(elementData, element, element);
        this.mapRedefinableElement(elementData, element, element);
        this.mapType(elementData, element, element);
        this.mapClassifier(elementData, element, element);
        this.mapMemberedClassifier(elementData, element, element);
        this.mapTaggedValues(elementData, element); // added by code generation
        this.addElementById(elementData, element);
        return element;
    }
    createParameterDirectionKind(elementData) {
        switch (elementData) // serialized as string
         {
            case 'in': return elements.ParameterDirectionKind.in;
            case 'inout': return elements.ParameterDirectionKind.inout;
            case 'out': return elements.ParameterDirectionKind.out;
            case 'return': return elements.ParameterDirectionKind.return;
            default: throw `Error reading model. Could not map ParameterDirectionKind value '${elementData}'.`;
        }
    }
    mapParameter(elementData, target, owner) {
        if (elementData.defaultValue) {
            target.defaultValue = this.createValueSpecification(elementData.defaultValue, target);
        }
        if (elementData.direction) {
            target.direction = this.createParameterDirectionKind(elementData.direction);
        }
        if (elementData.isException) {
            target.isException = elementData.isException;
        }
        if (elementData.isStream) {
            target.isStream = elementData.isStream;
        }
    }
    createParameter(elementData, owner) {
        const element = new classes.Parameter(this.modelDelegate, owner);
        this.mapElement(elementData, element, element);
        this.mapNamedElement(elementData, element, element);
        this.mapOrderedElement(elementData, element, element);
        this.mapMultiplicityElement(elementData, element, element);
        this.mapTypedElement(elementData, element, element);
        this.mapParameter(elementData, element, element);
        this.mapTaggedValues(elementData, element); // added by code generation
        this.addElementById(elementData, element);
        return element;
    }
    mapBehavioralFeature(elementData, target, owner) {
        if (elementData.isAbstract) {
            target.isAbstract = elementData.isAbstract;
        }
        if (elementData.ownedParameters) {
            target.ownedParameters.push(...elementData.ownedParameters.map((e) => { return this.createParameter(e, target); }).sort(this.elementComparer.compareOrderedElements));
        }
    }
    mapOperation(elementData, target, owner) {
        if (elementData.isConstructor) {
            target.isConstructor = elementData.isConstructor;
        }
        if (elementData.isQuery) {
            target.isQuery = elementData.isQuery;
        }
    }
    createOperation(elementData, owner) {
        const element = new classes.Operation(this.modelDelegate, owner);
        this.mapElement(elementData, element, element);
        this.mapNamedElement(elementData, element, element);
        this.mapOrderedElement(elementData, element, element);
        this.mapRedefinableElement(elementData, element, element);
        this.mapFeature(elementData, element, element);
        this.mapBehavioralFeature(elementData, element, element);
        this.mapOperation(elementData, element, element);
        this.mapTaggedValues(elementData, element); // added by code generation
        this.addElementById(elementData, element);
        return element;
    }
    createModel(elementData) {
        const element = new classes.Model(this.modelDelegate, null);
        this.mapElement(elementData, element, element);
        this.mapNamedElement(elementData, element, element);
        this.mapPackageableElement(elementData, element, element);
        this.mapPackage(elementData, element, element);
        this.mapTaggedValues(elementData, element); // added by code generation
        this.addElementById(elementData, element);
        return element;
    }
    mapLiteralUnlimitedNatural(elementData, target, owner) {
        if (elementData.value) {
            target.value = new elements.UnlimitedNatural(elementData.value);
        }
    }
    createLiteralUnlimitedNatural(elementData, owner) {
        const element = new classes.LiteralUnlimitedNatural(this.modelDelegate, owner);
        this.mapElement(elementData, element, element);
        this.mapNamedElement(elementData, element, element);
        this.mapTypedElement(elementData, element, element);
        this.mapLiteralUnlimitedNatural(elementData, element, element);
        this.mapTaggedValues(elementData, element); // added by code generation
        this.addElementById(elementData, element);
        return element;
    }
    mapLiteralString(elementData, target, owner) {
        if (elementData.value) {
            target.value = elementData.value;
        }
    }
    createLiteralString(elementData, owner) {
        const element = new classes.LiteralString(this.modelDelegate, owner);
        this.mapElement(elementData, element, element);
        this.mapNamedElement(elementData, element, element);
        this.mapTypedElement(elementData, element, element);
        this.mapLiteralString(elementData, element, element);
        this.mapTaggedValues(elementData, element); // added by code generation
        this.addElementById(elementData, element);
        return element;
    }
    mapLiteralReal(elementData, target, owner) {
        if (elementData.value) {
            target.value = elementData.value;
        }
    }
    createLiteralReal(elementData, owner) {
        const element = new classes.LiteralReal(this.modelDelegate, owner);
        this.mapElement(elementData, element, element);
        this.mapNamedElement(elementData, element, element);
        this.mapTypedElement(elementData, element, element);
        this.mapLiteralReal(elementData, element, element);
        this.mapTaggedValues(elementData, element); // added by code generation
        this.addElementById(elementData, element);
        return element;
    }
    createLiteralNull(elementData, owner) {
        const element = new classes.LiteralNull(this.modelDelegate, owner);
        this.mapElement(elementData, element, element);
        this.mapNamedElement(elementData, element, element);
        this.mapTypedElement(elementData, element, element);
        this.mapTaggedValues(elementData, element); // added by code generation
        this.addElementById(elementData, element);
        return element;
    }
    mapLiteralInteger(elementData, target, owner) {
        if (elementData.value) {
            target.value = elementData.value;
        }
    }
    createLiteralInteger(elementData, owner) {
        const element = new classes.LiteralInteger(this.modelDelegate, owner);
        this.mapElement(elementData, element, element);
        this.mapNamedElement(elementData, element, element);
        this.mapTypedElement(elementData, element, element);
        this.mapLiteralInteger(elementData, element, element);
        this.mapTaggedValues(elementData, element); // added by code generation
        this.addElementById(elementData, element);
        return element;
    }
    mapLiteralBoolean(elementData, target, owner) {
        if (elementData.value) {
            target.value = elementData.value;
        }
    }
    createLiteralBoolean(elementData, owner) {
        const element = new classes.LiteralBoolean(this.modelDelegate, owner);
        this.mapElement(elementData, element, element);
        this.mapNamedElement(elementData, element, element);
        this.mapTypedElement(elementData, element, element);
        this.mapLiteralBoolean(elementData, element, element);
        this.mapTaggedValues(elementData, element); // added by code generation
        this.addElementById(elementData, element);
        return element;
    }
    mapInterfaceRealization(elementData, target, owner) {
        this.referencesToResolve.push({ target: target, data: elementData, resolvefn: this.resolveInterfaceRealizationReferences });
    }
    resolveInterfaceRealizationReferences(target, elementData) {
        if (!elementData.contract)
            console.error(`Unable to set property 'contract'. The following data is missing a 'contract' field: ${JSON.stringify(elementData)}.`);
        const contract = this.elementMap.getElementById(elementData.contract);
        if (contract) {
            target.contract = contract;
        }
        else
            console.error(`Unable to set property 'contract'. Interface with id '${elementData.contract}' does not exist.`);
    }
    createInterfaceRealization(elementData, owner) {
        const element = new classes.InterfaceRealization(this.modelDelegate, owner);
        this.mapElement(elementData, element, element);
        this.mapInterfaceRealization(elementData, element, element);
        this.mapTaggedValues(elementData, element); // added by code generation
        this.addElementById(elementData, element);
        return element;
    }
    createInterface(elementData, owner) {
        const element = new classes.Interface(this.modelDelegate, owner);
        this.mapElement(elementData, element, element);
        this.mapNamedElement(elementData, element, element);
        this.mapPackageableElement(elementData, element, element);
        this.mapRedefinableElement(elementData, element, element);
        this.mapType(elementData, element, element);
        this.mapClassifier(elementData, element, element);
        this.mapMemberedClassifier(elementData, element, element);
        this.mapTaggedValues(elementData, element); // added by code generation
        this.addElementById(elementData, element);
        return element;
    }
    mapGeneralization(elementData, target, owner) {
        if (elementData.isSubstitutable) {
            target.isSubstitutable = elementData.isSubstitutable;
        }
        this.referencesToResolve.push({ target: target, data: elementData, resolvefn: this.resolveGeneralizationReferences });
    }
    resolveGeneralizationReferences(target, elementData) {
        if (!elementData.general)
            console.error(`Unable to set property 'general'. The following data is missing a 'general' field: ${JSON.stringify(elementData)}.`);
        const general = this.elementMap.getElementById(elementData.general);
        if (general) {
            target.general = general;
        }
        else
            console.error(`Unable to set property 'general'. Classifier with id '${elementData.general}' does not exist.`);
    }
    createGeneralization(elementData, owner) {
        const element = new classes.Generalization(this.modelDelegate, owner);
        this.mapElement(elementData, element, element);
        this.mapGeneralization(elementData, element, element);
        this.mapTaggedValues(elementData, element); // added by code generation
        this.addElementById(elementData, element);
        return element;
    }
    mapEnumerationLiteral(elementData, target, owner) {
        if (elementData.specification) {
            target.specification = this.createValueSpecification(elementData.specification, target);
        }
    }
    createEnumerationLiteral(elementData, owner) {
        const element = new classes.EnumerationLiteral(this.modelDelegate, owner);
        this.mapElement(elementData, element, element);
        this.mapOrderedElement(elementData, element, element);
        this.mapNamedElement(elementData, element, element);
        this.mapEnumerationLiteral(elementData, element, element);
        this.mapTaggedValues(elementData, element); // added by code generation
        this.addElementById(elementData, element);
        return element;
    }
    mapEnumeration(elementData, target, owner) {
        if (elementData.ownedLiterals) {
            target.ownedLiterals.push(...elementData.ownedLiterals.map((e) => { return this.createEnumerationLiteral(e, target); }).sort(this.elementComparer.compareOrderedElements));
        }
        this.referencesToResolve.push({ target: target, data: elementData, resolvefn: this.resolveEnumerationReferences });
    }
    resolveEnumerationReferences(target, elementData) {
        target.baseType = elementData.baseType ? this.elementMap.getElementById(elementData.baseType) : null;
    }
    createEnumeration(elementData, owner) {
        const element = new classes.Enumeration(this.modelDelegate, owner);
        this.mapElement(elementData, element, element);
        this.mapNamedElement(elementData, element, element);
        this.mapPackageableElement(elementData, element, element);
        this.mapRedefinableElement(elementData, element, element);
        this.mapType(elementData, element, element);
        this.mapClassifier(elementData, element, element);
        this.mapMemberedClassifier(elementData, element, element);
        this.mapEnumeration(elementData, element, element);
        this.mapTaggedValues(elementData, element); // added by code generation
        this.addElementById(elementData, element);
        return element;
    }
    mapDocumentReference(elementData, target, owner) {
        if (elementData.location) {
            target.location = this.createDocumentLocationKind(elementData.location);
        }
        if (elementData.name) {
            target.name = elementData.name;
        }
        if (elementData.path) {
            target.path = elementData.path;
        }
    }
    createDocumentReference(elementData, owner) {
        const element = new classes.DocumentReference();
        this.mapDocumentReference(elementData, element, owner);
        return element;
    }
    createDocumentLocationKind(elementData) {
        switch (elementData) // serialized as string
         {
            case 'local': return elements.DocumentLocationKind.local;
            case 'npm': return elements.DocumentLocationKind.npm;
            default: throw `Error reading model. Could not map DocumentLocationKind value '${elementData}'.`;
        }
    }
    mapComment(elementData, target, owner) {
        if (elementData.body) {
            target.body = elementData.body;
        }
    }
    createComment(elementData, owner) {
        const element = new classes.Comment(this.modelDelegate, owner);
        this.mapElement(elementData, element, element);
        this.mapComment(elementData, element, element);
        this.mapTaggedValues(elementData, element); // added by code generation
        this.addElementById(elementData, element);
        return element;
    }
    mapAssociation(elementData, target, owner) {
        if (elementData.ownedEnds) {
            target.ownedEnds.push(...elementData.ownedEnds.map((e) => { return this.createProperty(e, target); }).sort(this.elementComparer.compareOrderedElements));
        }
        this.referencesToResolve.push({ target: target, data: elementData, resolvefn: this.resolveAssociationReferences });
    }
    resolveAssociationReferences(target, elementData) {
        if (elementData.memberEnds) {
            target.memberEnds.push(...this.elementMap.getElementsByIdList(elementData.memberEnds));
        }
    }
    createAssociation(elementData, owner) {
        const element = new classes.Association(this.modelDelegate, owner);
        this.mapElement(elementData, element, element);
        this.mapNamedElement(elementData, element, element);
        this.mapPackageableElement(elementData, element, element);
        this.mapRedefinableElement(elementData, element, element);
        this.mapType(elementData, element, element);
        this.mapClassifier(elementData, element, element);
        this.mapAssociation(elementData, element, element);
        this.mapTaggedValues(elementData, element); // added by code generation
        this.addElementById(elementData, element);
        return element;
    }
    createAggregationKind(elementData) {
        switch (elementData) // serialized as string
         {
            case 'none': return elements.AggregationKind.none;
            case 'shared': return elements.AggregationKind.shared;
            case 'composite': return elements.AggregationKind.composite;
            default: throw `Error reading model. Could not map AggregationKind value '${elementData}'.`;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,