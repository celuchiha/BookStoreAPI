import { ElementTypeUtility } from './utils';
var ElementMapImpl = /** @class */ (function () {
    function ElementMapImpl() {
        this.elementsById = {};
        this.specializationsById = {};
        this.associationsByEndId = {};
    }
    ElementMapImpl.prototype.addElement = function (element, elementData) {
        if (this.elementsById.hasOwnProperty(element.id)) {
            console.warn("Duplicate element id '" + element.id + "'.");
            return;
        }
        this.elementsById[element.id] = element;
        // Add generalizations to the specialization map
        if (ElementTypeUtility.isClassifier(element.elementType) && elementData) {
            this.addSpecializations(element, elementData);
        }
        // Add association ends to the assciationEnd map
        if (ElementTypeUtility.isAssociation(element.elementType) && elementData) {
            this.addAssociationEnds(element, elementData);
        }
    };
    ElementMapImpl.prototype.addAssociationEnds = function (association, associationData) {
        var _this = this;
        // Get memberEnds of assocationData instead of association itself: the ends  will not be set here as they are not resolved yet
        // by DataToModelConverter.resolveAssociationReferences().        
        if (!associationData.memberEnds)
            return;
        associationData.memberEnds.forEach(function (endId) {
            // An association end can only be part of one association.
            if (_this.associationsByEndId.hasOwnProperty(endId)) {
                console.warn("Association end with id '" + endId + "' is already part of another association than " + associationData.id + ".");
            }
            _this.associationsByEndId[endId] = association;
        });
    };
    ElementMapImpl.prototype.addSpecializations = function (classifier, classifierData) {
        var _this = this;
        if (!classifierData.generalizations)
            return;
        // Enumerate the classifierData instead of the classifier itself: the generalizations will not be set here as they are not resolved yet
        classifierData.generalizations.forEach(function (g) {
            var dictionaryEntry;
            // g is a Generalization of element, so element is a Specialization of g
            if (_this.specializationsById.hasOwnProperty(g.general)) {
                dictionaryEntry = _this.specializationsById[g.general];
                dictionaryEntry.push(classifier);
            }
            else {
                _this.specializationsById[g.general] = [classifier];
            }
        });
    };
    ElementMapImpl.prototype.getAssociationHavingMemberEnd = function (end) {
        if (!end || !end.id)
            return null;
        if (!this.associationsByEndId.hasOwnProperty(end.id))
            return null;
        return this.associationsByEndId[end.id];
    };
    ElementMapImpl.prototype.hasElement = function (id) {
        return this.elementsById.hasOwnProperty(id);
    };
    ElementMapImpl.prototype.getElementById = function (id) {
        if (!id || id.length === 0)
            return null;
        if (this.elementsById.hasOwnProperty(id))
            return this.elementsById[id];
        else {
            console.warn("Unkown element id '" + id + "'.");
            return null;
        }
    };
    ElementMapImpl.prototype.getElementsByIdList = function (idList) {
        var _this = this;
        var result = [];
        if (idList == null)
            return result;
        idList.forEach(function (id) {
            var element = _this.getElementById(id);
            if (element != null)
                result.push(element);
        });
        return result;
    };
    ElementMapImpl.prototype.getSpecializationsOf = function (generalId) {
        if (!this.specializationsById.hasOwnProperty(generalId))
            return [];
        return this.specializationsById[generalId];
    };
    ElementMapImpl.prototype.getAllSpecializationsOf = function (generalId) {
        if (!this.specializationsById.hasOwnProperty(generalId))
            return [];
        var specialMap = {};
        this.getAllSpecializationsRecursive(generalId, specialMap);
        // Convert the result to an array
        var result = [];
        for (var specializationId in specialMap) {
            result.push(specialMap[specializationId]);
        }
        return result;
    };
    ElementMapImpl.prototype.getAllSpecializationsRecursive = function (generalId, specialMap) {
        var _this = this;
        if (!this.specializationsById.hasOwnProperty(generalId)) {
            return;
        }
        var directSpecializations = this.specializationsById[generalId];
        directSpecializations.forEach(function (s) {
            if (!specialMap.hasOwnProperty(s.id)) {
                specialMap[s.id] = s;
            }
            // Get the specializations of this specialization
            _this.getAllSpecializationsRecursive(s.id, specialMap);
        });
    };
    return ElementMapImpl;
}());
export { ElementMapImpl };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudC1tYXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZWxlbWVudC1tYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBU0EsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRTdDO0lBQUE7UUFDWSxpQkFBWSxHQUEwQyxFQUFFLENBQUM7UUFDekQsd0JBQW1CLEdBQXFELEVBQUUsQ0FBQztRQUMzRSx3QkFBbUIsR0FBZ0QsRUFBRSxDQUFDO0lBMEhsRixDQUFDO0lBeEhVLG1DQUFVLEdBQWpCLFVBQWtCLE9BQTJCLEVBQUUsV0FBb0M7UUFDL0UsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDOUMsT0FBTyxDQUFDLElBQUksQ0FBQywyQkFBeUIsT0FBTyxDQUFDLEVBQUUsT0FBSSxDQUFDLENBQUM7WUFDdEQsT0FBTztTQUNWO1FBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDO1FBRXhDLGdEQUFnRDtRQUNoRCxJQUFJLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksV0FBVyxFQUFFO1lBQ3JFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFnQyxFQUFFLFdBQWtDLENBQUMsQ0FBQztTQUNqRztRQUNELGdEQUFnRDtRQUNoRCxJQUFJLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksV0FBVyxFQUFFO1lBQ3RFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFpQyxFQUFFLFdBQW1DLENBQUMsQ0FBQztTQUNuRztJQUNMLENBQUM7SUFFTywyQ0FBa0IsR0FBMUIsVUFBMkIsV0FBbUMsRUFBRSxlQUFxQztRQUFyRyxpQkFhQztRQVpHLDhIQUE4SDtRQUM5SCxrRUFBa0U7UUFDbEUsSUFBSSxDQUFDLGVB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