/*
* Copyright (c) 2019 Yellicode
*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0. If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
* This code was generated by a tool.
*
* Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
*/
import * as elements from './interfaces';
var Element = /** @class */ (function () {
    function Element(modelDelegate, owner) {
        this.modelDelegate = modelDelegate;
        this.appliedStereotypes = [];
        this.id = '';
        this.ownedComments = [];
        this.owner = null;
        this.taggedValues = [];
        this.owner = owner;
    }
    /**
    * Gets the text contents of the first comment in the element's owned comments, or an empty string if
    * the element has no comments.
    * @returns {string} The body string of the first comment. If the element has no comments, an empty
    * string is returned.
    */
    Element.prototype.getFirstCommentBody = function () {
        return this.modelDelegate.getFirstCommentBody(this);
    };
    return Element;
}());
export { Element };
var TaggedValueSpecification = /** @class */ (function () {
    function TaggedValueSpecification() {
    }
    return TaggedValueSpecification;
}());
export { TaggedValueSpecification };
var StereotypeExtension = /** @class */ (function () {
    function StereotypeExtension() {
        this.isRequired = false;
    }
    return StereotypeExtension;
}());
export { StereotypeExtension };
var Class = /** @class */ (function (_super) {
    __extends(Class, _super);
    function Class(modelDelegate, owner) {
        var _this = _super.call(this, modelDelegate, owner) || this;
        _this.elementType = elements.ElementType.class;
        _this.appliedStereotypes = [];
        _this.generalizations = [];
        _this.interfaceRealizations = [];
        _this.isAbstract = false;
        _this.isActive = false;
        _this.isFinalSpecialization = false;
        _this.isInferred = false;
        _this.isLeaf = false;
        _this.name = '';
        _this.ownedAttributes = [];
        _this.ownedOperations = [];
        _this.taggedValues = [];
        _this.visibility = null;
        return _this;
    }
    Object.defineProperty(Class.prototype, "package", {
        get: function () {
            return this.modelDelegate.getPackage(this);
        },
        enumerable: true,
        configurable: true
    });
    /**
    * Returns both inherited and owned attributes.
    * @returns {elements.Property[]}
    */
    Class.prototype.getAllAttributes = function () {
        return this.modelDelegate.getAllAttributes(this);
    };
    /**
    * Returns both inherited and owned operations. Any inherited operation that has the same signature
    * (having the same name and parameter type order) in an inheriting type is not included.
    * @returns {elements.Operation[]}
    */
    Class.prototype.getAllOperations = function () {
        return this.modelDelegate.getAllOperations(this);
    };
    /**
    * Returns all of the direct and indirect ancestors of a generalized Classifier, working outwards: more
    * specific classifiers will appear before more general classifiers.
    * @returns {elements.Classifier[]}
    */
    Class.prototype.getAllParents = function () {
        return this.modelDelegate.getAllParents(this);
    };
    /**
    * Gets all classifiers of which this element is a direct or indirect general.
    * @returns {elements.Classifier[]}
    */
    Class.prototype.getAllSpecializations = function () {
        return this.modelDelegate.getAllSpecializations(this);
    };
    /**
    * Gets the first direct generalization relationship of the element.
    * @returns {elements.Generalization}
    */
    Class.prototype.getFirstGeneralization = function () {
        return this.modelDelegate.getFirstGeneralization(this);
    };
    /**
    * Gets the first classifier that is an immediate general of the current element.
    * @returns {elements.Classifier}
    */
    Class.prototype.getFirstParent = function () {
        return this.modelDelegate.getFirstParent(this);
    };
    /**
    * Constructs a name from the names of the nesting packages. The name is constructed working inwards
    * from the package that is defined as namespace root up to but not including the PackageableElement
    * itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    Class.prototype.getNamespaceName = function (separator) {
        return this.modelDelegate.getNamespaceName(this, separator);
    };
    /**
    * Gets all packages that contain this Package, working inwards from the top Package to the owning
    * package.
    * @returns {elements.Package[]} A collection of Packages.
    */
    Class.prototype.getNestingPackages = function () {
        return this.modelDelegate.getNestingPackages(this);
    };
    /**
    * Gives all of the immediate ancestors of a generalized Classifier.
    * @returns {elements.Classifier[]}
    */
    Class.prototype.getParents = function () {
        return this.modelDelegate.getParents(this);
    };
    /**
    * Constructs a name from the PackageableElement and the names of the nesting packages. The name is
    * constructed working inwards from the package that is defined as namespace root up to and including
    * the PackageableElement itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    Class.prototype.getQualifiedName = function (separator) {
        return this.modelDelegate.getQualifiedName(this, separator);
    };
    /**
    * Gets all classifiers of which this classifier is a direct general.
    * @returns {elements.Classifier[]}
    */
    Class.prototype.getSpecializations = function () {
        return this.modelDelegate.getSpecializations(this);
    };
    /**
    * Gets the superclasses of a Class, derived from its Generalizations.
    * @returns {elements.Class[]}
    */
    Class.prototype.getSuperClasses = function () {
        return this.modelDelegate.getSuperClasses(this);
    };
    return Class;
}(Element));
export { Class };
var Stereotype = /** @class */ (function (_super) {
    __extends(Stereotype, _super);
    function Stereotype(modelDelegate, owner) {
        var _this = _super.call(this, modelDelegate, owner) || this;
        _this.elementType = elements.ElementType.stereotype;
        _this.appliedStereotypes = [];
        _this.extends = [];
        _this.generalizations = [];
        _this.interfaceRealizations = [];
        _this.isAbstract = false;
        _this.isActive = false;
        _this.isFinalSpecialization = false;
        _this.isInferred = false;
        _this.isLeaf = false;
        _this.name = '';
        _this.ownedAttributes = [];
        _this.ownedOperations = [];
        _this.safeName = '';
        _this.taggedValues = [];
        _this.visibility = null;
        return _this;
    }
    Object.defineProperty(Stereotype.prototype, "package", {
        get: function () {
            return this.modelDelegate.getPackage(this);
        },
        enumerable: true,
        configurable: true
    });
    /**
    * Returns both inherited and owned attributes.
    * @returns {elements.Property[]}
    */
    Stereotype.prototype.getAllAttributes = function () {
        return this.modelDelegate.getAllAttributes(this);
    };
    /**
    * Returns both inherited and owned operations. Any inherited operation that has the same signature
    * (having the same name and parameter type order) in an inheriting type is not included.
    * @returns {elements.Operation[]}
    */
    Stereotype.prototype.getAllOperations = function () {
        return this.modelDelegate.getAllOperations(this);
    };
    /**
    * Returns all of the direct and indirect ancestors of a generalized Classifier, working outwards: more
    * specific classifiers will appear before more general classifiers.
    * @returns {elements.Classifier[]}
    */
    Stereotype.prototype.getAllParents = function () {
        return this.modelDelegate.getAllParents(this);
    };
    /**
    * Gets all classifiers of which this element is a direct or indirect general.
    * @returns {elements.Classifier[]}
    */
    Stereotype.prototype.getAllSpecializations = function () {
        return this.modelDelegate.getAllSpecializations(this);
    };
    /**
    * Gets the first direct generalization relationship of the element.
    * @returns {elements.Generalization}
    */
    Stereotype.prototype.getFirstGeneralization = function () {
        return this.modelDelegate.getFirstGeneralization(this);
    };
    /**
    * Gets the first classifier that is an immediate general of the current element.
    * @returns {elements.Classifier}
    */
    Stereotype.prototype.getFirstParent = function () {
        return this.modelDelegate.getFirstParent(this);
    };
    /**
    * Constructs a name from the names of the nesting packages. The name is constructed working inwards
    * from the package that is defined as namespace root up to but not including the PackageableElement
    * itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    Stereotype.prototype.getNamespaceName = function (separator) {
        return this.modelDelegate.getNamespaceName(this, separator);
    };
    /**
    * Gets all packages that contain this Package, working inwards from the top Package to the owning
    * package.
    * @returns {elements.Package[]} A collection of Packages.
    */
    Stereotype.prototype.getNestingPackages = function () {
        return this.modelDelegate.getNestingPackages(this);
    };
    /**
    * Gives all of the immediate ancestors of a generalized Classifier.
    * @returns {elements.Classifier[]}
    */
    Stereotype.prototype.getParents = function () {
        return this.modelDelegate.getParents(this);
    };
    /**
    * Constructs a name from the PackageableElement and the names of the nesting packages. The name is
    * constructed working inwards from the package that is defined as namespace root up to and including
    * the PackageableElement itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    Stereotype.prototype.getQualifiedName = function (separator) {
        return this.modelDelegate.getQualifiedName(this, separator);
    };
    /**
    * Gets all classifiers of which this classifier is a direct general.
    * @returns {elements.Classifier[]}
    */
    Stereotype.prototype.getSpecializations = function () {
        return this.modelDelegate.getSpecializations(this);
    };
    /**
    * Gets the superclasses of a Class, derived from its Generalizations.
    * @returns {elements.Class[]}
    */
    Stereotype.prototype.getSuperClasses = function () {
        return this.modelDelegate.getSuperClasses(this);
    };
    return Stereotype;
}(Element));
export { Stereotype };
var Property = /** @class */ (function (_super) {
    __extends(Property, _super);
    function Property(modelDelegate, owner) {
        var _this = _super.call(this, modelDelegate, owner) || this;
        _this.elementType = elements.ElementType.property;
        _this.aggregation = elements.AggregationKind.none;
        _this.appliedStereotypes = [];
        _this.defaultValue = null;
        _this.isDerived = false;
        _this.isDerivedUnion = false;
        _this.isID = false;
        _this.isLeaf = false;
        _this.isNavigable = false;
        _this.isOrdered = false;
        _this.isReadOnly = false;
        _this.isStatic = false;
        _this.isUnique = false;
        _this.lowerValue = null;
        _this.name = '';
        _this.order = 0;
        _this.taggedValues = [];
        _this.type = null;
        _this.upperValue = null;
        _this.visibility = null;
        return _this;
    }
    Object.defineProperty(Property.prototype, "association", {
        get: function () {
            return this.modelDelegate.getAssociation(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Property.prototype, "lower", {
        get: function () {
            return this.modelDelegate.getLower(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Property.prototype, "upper", {
        get: function () {
            return this.modelDelegate.getUpper(this);
        },
        enumerable: true,
        configurable: true
    });
    /**
    * Gets the value of the DefaultValue property.
    * @returns {any} The default value (the type depending on the type of value), or null if no default
    * value can be determined.
    */
    Property.prototype.getDefault = function () {
        return this.modelDelegate.getDefault(this);
    };
    /**
    * The query lowerBound() returns the lower bound of the multiplicity as an integer, which is the
    * integerValue of lowerValue, if this is given, and 1 otherwise.
    * @returns {number}
    */
    Property.prototype.getLowerBound = function () {
        return this.modelDelegate.getLowerBound(this);
    };
    /**
    * Gets the name of the typed element's type.
    * @returns {string} The type name, or an empty string if the element has no type.
    */
    Property.prototype.getTypeName = function () {
        return this.modelDelegate.getTypeName(this);
    };
    /**
    * The query upperBound() returns the upper bound of the multiplicity for a bounded multiplicity as an
    * unlimited natural, which is the unlimitedNaturalValue of upperValue, if given, and 1, otherwise.
    * @returns {elements.UnlimitedNatural}
    */
    Property.prototype.getUpperBound = function () {
        return this.modelDelegate.getUpperBound(this);
    };
    /**
    * The query isMultivalued() checks whether this multiplicity has an upper bound greater than one.
    * @returns {boolean}
    */
    Property.prototype.isMultivalued = function () {
        return this.modelDelegate.isMultivalued(this);
    };
    /**
    * The query isOptional checks whether this multiplicity has a lower bound of 0 (0..n).
    * @returns {boolean}
    */
    Property.prototype.isOptional = function () {
        return this.modelDelegate.isOptional(this);
    };
    /**
    * The query isOptionalAndSingleValued checks whether this multiplicity has a lower bound of 0 and an
    * upper bound of 1 (0..1).
    * @returns {boolean}
    */
    Property.prototype.isOptionalAndSinglevalued = function () {
        return this.modelDelegate.isOptionalAndSinglevalued(this);
    };
    /**
    * The query isRequiredAndSinglevalued checks whether this multiplicity has a lower bound of 1 and an
    * upper bound of 1 (1..1).
    * @returns {boolean}
    */
    Property.prototype.isRequiredAndSinglevalued = function () {
        return this.modelDelegate.isRequiredAndSinglevalued(this);
    };
    return Property;
}(Element));
export { Property };
var Package = /** @class */ (function (_super) {
    __extends(Package, _super);
    function Package(modelDelegate, owner) {
        var _this = _super.call(this, modelDelegate, owner) || this;
        _this.elementType = elements.ElementType.package;
        _this.appliedProfiles = [];
        _this.appliedStereotypes = [];
        _this.isNamespaceRoot = false;
        _this.name = '';
        _this.packagedElements = [];
        _this.taggedValues = [];
        _this.visibility = null;
        return _this;
    }
    Object.defineProperty(Package.prototype, "package", {
        get: function () {
            return this.modelDelegate.getPackage(this);
        },
        enumerable: true,
        configurable: true
    });
    /**
    * Gets all classes that are owned by this Package, including the ones owned by nested packages.
    * @returns {elements.Class[]}
    */
    Package.prototype.getAllClasses = function () {
        return this.modelDelegate.getAllClasses(this);
    };
    /**
    * Gets all data types that are owned by this Package, including the ones owned by nested packages.
    * @returns {elements.DataType[]}
    */
    Package.prototype.getAllDataTypes = function () {
        return this.modelDelegate.getAllDataTypes(this);
    };
    /**
    * Gets all enumerations that are owned by this Package, including the ones owned by nested packages.
    * @returns {elements.Enumeration[]}
    */
    Package.prototype.getAllEnumerations = function () {
        return this.modelDelegate.getAllEnumerations(this);
    };
    /**
    * Gets all interfaces that are owned by this Package, including the ones owned by nested packages.
    * @returns {elements.Interface[]}
    */
    Package.prototype.getAllInterfaces = function () {
        return this.modelDelegate.getAllInterfaces(this);
    };
    /**
    * Gets all types that are owned by this Package, including the ones owned by nested packages. This
    * includes the following types of elements: Class, Interface, DataType, PrimitiveType and Enumeration.
    * @returns {elements.Classifier[]} A subset of PackagedElements.
    */
    Package.prototype.getAllTypes = function () {
        return this.modelDelegate.getAllTypes(this);
    };
    /**
    * Gets all classes that are owned by this Package.
    * @returns {elements.Class[]} A subset of PackagedElements.
    */
    Package.prototype.getClasses = function () {
        return this.modelDelegate.getClasses(this);
    };
    /**
    * Gets all data types that are owned by this Package.
    * @returns {elements.DataType[]} A subset of PackagedElements.
    */
    Package.prototype.getDataTypes = function () {
        return this.modelDelegate.getDataTypes(this);
    };
    /**
    * Gets all enumerations that are owned by this Package.
    * @returns {elements.Enumeration[]} A subset of PackagedElements.
    */
    Package.prototype.getEnumerations = function () {
        return this.modelDelegate.getEnumerations(this);
    };
    /**
    * Gets all interfaces that are owned by this Package.
    * @returns {elements.Interface[]} A subset of PackagedElements.
    */
    Package.prototype.getInterfaces = function () {
        return this.modelDelegate.getInterfaces(this);
    };
    /**
    * Constructs a name from the names of the nesting packages. The name is constructed working inwards
    * from the package that is defined as namespace root up to but not including the PackageableElement
    * itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    Package.prototype.getNamespaceName = function (separator) {
        return this.modelDelegate.getNamespaceName(this, separator);
    };
    /**
    * Gets all packages that are owned by this Package.
    * @returns {elements.Package[]} A subset of PackagedElements.
    */
    Package.prototype.getNestedPackages = function () {
        return this.modelDelegate.getNestedPackages(this);
    };
    /**
    * Gets all packages that contain this Package, working inwards from the top Package to the owning
    * package.
    * @returns {elements.Package[]} A collection of Packages.
    */
    Package.prototype.getNestingPackages = function () {
        return this.modelDelegate.getNestingPackages(this);
    };
    /**
    * Constructs a name from the PackageableElement and the names of the nesting packages. The name is
    * constructed working inwards from the package that is defined as namespace root up to and including
    * the PackageableElement itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    Package.prototype.getQualifiedName = function (separator) {
        return this.modelDelegate.getQualifiedName(this, separator);
    };
    /**
    * Gets all types that are owned by this Package. This includes the following types of elements: Class,
    * Interface, DataType, PrimitiveType and Enumeration.
    * @returns {elements.Classifier[]} A subset of PackagedElements.
    */
    Package.prototype.getTypes = function () {
        return this.modelDelegate.getTypes(this);
    };
    return Package;
}(Element));
export { Package };
var Profile = /** @class */ (function (_super) {
    __extends(Profile, _super);
    function Profile(modelDelegate, owner) {
        var _this = _super.call(this, modelDelegate, owner) || this;
        _this.elementType = elements.ElementType.profile;
        _this.appliedProfiles = [];
        _this.appliedStereotypes = [];
        _this.isNamespaceRoot = false;
        _this.name = '';
        _this.packagedElements = [];
        _this.safeName = '';
        _this.taggedValues = [];
        _this.visibility = null;
        return _this;
    }
    Object.defineProperty(Profile.prototype, "package", {
        get: function () {
            return this.modelDelegate.getPackage(this);
        },
        enumerable: true,
        configurable: true
    });
    /**
    * Gets all classes that are owned by this Package, including the ones owned by nested packages.
    * @returns {elements.Class[]}
    */
    Profile.prototype.getAllClasses = function () {
        return this.modelDelegate.getAllClasses(this);
    };
    /**
    * Gets all data types that are owned by this Package, including the ones owned by nested packages.
    * @returns {elements.DataType[]}
    */
    Profile.prototype.getAllDataTypes = function () {
        return this.modelDelegate.getAllDataTypes(this);
    };
    /**
    * Gets all enumerations that are owned by this Package, including the ones owned by nested packages.
    * @returns {elements.Enumeration[]}
    */
    Profile.prototype.getAllEnumerations = function () {
        return this.modelDelegate.getAllEnumerations(this);
    };
    /**
    * Gets all interfaces that are owned by this Package, including the ones owned by nested packages.
    * @returns {elements.Interface[]}
    */
    Profile.prototype.getAllInterfaces = function () {
        return this.modelDelegate.getAllInterfaces(this);
    };
    /**
    * Gets all types that are owned by this Package, including the ones owned by nested packages. This
    * includes the following types of elements: Class, Interface, DataType, PrimitiveType and Enumeration.
    * @returns {elements.Classifier[]} A subset of PackagedElements.
    */
    Profile.prototype.getAllTypes = function () {
        return this.modelDelegate.getAllTypes(this);
    };
    /**
    * Gets all classes that are owned by this Package.
    * @returns {elements.Class[]} A subset of PackagedElements.
    */
    Profile.prototype.getClasses = function () {
        return this.modelDelegate.getClasses(this);
    };
    /**
    * Gets all data types that are owned by this Package.
    * @returns {elements.DataType[]} A subset of PackagedElements.
    */
    Profile.prototype.getDataTypes = function () {
        return this.modelDelegate.getDataTypes(this);
    };
    /**
    * Gets all enumerations that are owned by this Package.
    * @returns {elements.Enumeration[]} A subset of PackagedElements.
    */
    Profile.prototype.getEnumerations = function () {
        return this.modelDelegate.getEnumerations(this);
    };
    /**
    * Gets all interfaces that are owned by this Package.
    * @returns {elements.Interface[]} A subset of PackagedElements.
    */
    Profile.prototype.getInterfaces = function () {
        return this.modelDelegate.getInterfaces(this);
    };
    /**
    * Constructs a name from the names of the nesting packages. The name is constructed working inwards
    * from the package that is defined as namespace root up to but not including the PackageableElement
    * itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    Profile.prototype.getNamespaceName = function (separator) {
        return this.modelDelegate.getNamespaceName(this, separator);
    };
    /**
    * Gets all packages that are owned by this Package.
    * @returns {elements.Package[]} A subset of PackagedElements.
    */
    Profile.prototype.getNestedPackages = function () {
        return this.modelDelegate.getNestedPackages(this);
    };
    /**
    * Gets all packages that contain this Package, working inwards from the top Package to the owning
    * package.
    * @returns {elements.Package[]} A collection of Packages.
    */
    Profile.prototype.getNestingPackages = function () {
        return this.modelDelegate.getNestingPackages(this);
    };
    /**
    * Constructs a name from the PackageableElement and the names of the nesting packages. The name is
    * constructed working inwards from the package that is defined as namespace root up to and including
    * the PackageableElement itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    Profile.prototype.getQualifiedName = function (separator) {
        return this.modelDelegate.getQualifiedName(this, separator);
    };
    /**
    * Gets all types that are owned by this Package. This includes the following types of elements: Class,
    * Interface, DataType, PrimitiveType and Enumeration.
    * @returns {elements.Classifier[]} A subset of PackagedElements.
    */
    Profile.prototype.getTypes = function () {
        return this.modelDelegate.getTypes(this);
    };
    return Profile;
}(Element));
export { Profile };
var DataType = /** @class */ (function (_super) {
    __extends(DataType, _super);
    function DataType(modelDelegate, owner) {
        var _this = _super.call(this, modelDelegate, owner) || this;
        _this.elementType = elements.ElementType.dataType;
        _this.appliedStereotypes = [];
        _this.generalizations = [];
        _this.isAbstract = false;
        _this.isFinalSpecialization = false;
        _this.isInferred = false;
        _this.isLeaf = false;
        _this.name = '';
        _this.ownedAttributes = [];
        _this.ownedOperations = [];
        _this.taggedValues = [];
        _this.visibility = null;
        return _this;
    }
    Object.defineProperty(DataType.prototype, "package", {
        get: function () {
            return this.modelDelegate.getPackage(this);
        },
        enumerable: true,
        configurable: true
    });
    /**
    * Returns both inherited and owned attributes.
    * @returns {elements.Property[]}
    */
    DataType.prototype.getAllAttributes = function () {
        return this.modelDelegate.getAllAttributes(this);
    };
    /**
    * Returns both inherited and owned operations. Any inherited operation that has the same signature
    * (having the same name and parameter type order) in an inheriting type is not included.
    * @returns {elements.Operation[]}
    */
    DataType.prototype.getAllOperations = function () {
        return this.modelDelegate.getAllOperations(this);
    };
    /**
    * Returns all of the direct and indirect ancestors of a generalized Classifier, working outwards: more
    * specific classifiers will appear before more general classifiers.
    * @returns {elements.Classifier[]}
    */
    DataType.prototype.getAllParents = function () {
        return this.modelDelegate.getAllParents(this);
    };
    /**
    * Gets all classifiers of which this element is a direct or indirect general.
    * @returns {elements.Classifier[]}
    */
    DataType.prototype.getAllSpecializations = function () {
        return this.modelDelegate.getAllSpecializations(this);
    };
    /**
    * Gets the first direct generalization relationship of the element.
    * @returns {elements.Generalization}
    */
    DataType.prototype.getFirstGeneralization = function () {
        return this.modelDelegate.getFirstGeneralization(this);
    };
    /**
    * Gets the first classifier that is an immediate general of the current element.
    * @returns {elements.Classifier}
    */
    DataType.prototype.getFirstParent = function () {
        return this.modelDelegate.getFirstParent(this);
    };
    /**
    * Constructs a name from the names of the nesting packages. The name is constructed working inwards
    * from the package that is defined as namespace root up to but not including the PackageableElement
    * itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    DataType.prototype.getNamespaceName = function (separator) {
        return this.modelDelegate.getNamespaceName(this, separator);
    };
    /**
    * Gets all packages that contain this Package, working inwards from the top Package to the owning
    * package.
    * @returns {elements.Package[]} A collection of Packages.
    */
    DataType.prototype.getNestingPackages = function () {
        return this.modelDelegate.getNestingPackages(this);
    };
    /**
    * Gives all of the immediate ancestors of a generalized Classifier.
    * @returns {elements.Classifier[]}
    */
    DataType.prototype.getParents = function () {
        return this.modelDelegate.getParents(this);
    };
    /**
    * Constructs a name from the PackageableElement and the names of the nesting packages. The name is
    * constructed working inwards from the package that is defined as namespace root up to and including
    * the PackageableElement itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    DataType.prototype.getQualifiedName = function (separator) {
        return this.modelDelegate.getQualifiedName(this, separator);
    };
    /**
    * Gets all classifiers of which this classifier is a direct general.
    * @returns {elements.Classifier[]}
    */
    DataType.prototype.getSpecializations = function () {
        return this.modelDelegate.getSpecializations(this);
    };
    return DataType;
}(Element));
export { DataType };
var PrimitiveType = /** @class */ (function (_super) {
    __extends(PrimitiveType, _super);
    function PrimitiveType(modelDelegate, owner) {
        var _this = _super.call(this, modelDelegate, owner) || this;
        _this.elementType = elements.ElementType.primitiveType;
        _this.appliedStereotypes = [];
        _this.generalizations = [];
        _this.isAbstract = false;
        _this.isFinalSpecialization = false;
        _this.isInferred = false;
        _this.isLeaf = false;
        _this.name = '';
        _this.ownedAttributes = [];
        _this.ownedOperations = [];
        _this.taggedValues = [];
        _this.visibility = null;
        return _this;
    }
    Object.defineProperty(PrimitiveType.prototype, "package", {
        get: function () {
            return this.modelDelegate.getPackage(this);
        },
        enumerable: true,
        configurable: true
    });
    /**
    * Returns both inherited and owned attributes.
    * @returns {elements.Property[]}
    */
    PrimitiveType.prototype.getAllAttributes = function () {
        return this.modelDelegate.getAllAttributes(this);
    };
    /**
    * Returns both inherited and owned operations. Any inherited operation that has the same signature
    * (having the same name and parameter type order) in an inheriting type is not included.
    * @returns {elements.Operation[]}
    */
    PrimitiveType.prototype.getAllOperations = function () {
        return this.modelDelegate.getAllOperations(this);
    };
    /**
    * Returns all of the direct and indirect ancestors of a generalized Classifier, working outwards: more
    * specific classifiers will appear before more general classifiers.
    * @returns {elements.Classifier[]}
    */
    PrimitiveType.prototype.getAllParents = function () {
        return this.modelDelegate.getAllParents(this);
    };
    /**
    * Gets all classifiers of which this element is a direct or indirect general.
    * @returns {elements.Classifier[]}
    */
    PrimitiveType.prototype.getAllSpecializations = function () {
        return this.modelDelegate.getAllSpecializations(this);
    };
    /**
    * Gets the first direct generalization relationship of the element.
    * @returns {elements.Generalization}
    */
    PrimitiveType.prototype.getFirstGeneralization = function () {
        return this.modelDelegate.getFirstGeneralization(this);
    };
    /**
    * Gets the first classifier that is an immediate general of the current element.
    * @returns {elements.Classifier}
    */
    PrimitiveType.prototype.getFirstParent = function () {
        return this.modelDelegate.getFirstParent(this);
    };
    /**
    * Constructs a name from the names of the nesting packages. The name is constructed working inwards
    * from the package that is defined as namespace root up to but not including the PackageableElement
    * itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    PrimitiveType.prototype.getNamespaceName = function (separator) {
        return this.modelDelegate.getNamespaceName(this, separator);
    };
    /**
    * Gets all packages that contain this Package, working inwards from the top Package to the owning
    * package.
    * @returns {elements.Package[]} A collection of Packages.
    */
    PrimitiveType.prototype.getNestingPackages = function () {
        return this.modelDelegate.getNestingPackages(this);
    };
    /**
    * Gives all of the immediate ancestors of a generalized Classifier.
    * @returns {elements.Classifier[]}
    */
    PrimitiveType.prototype.getParents = function () {
        return this.modelDelegate.getParents(this);
    };
    /**
    * Constructs a name from the PackageableElement and the names of the nesting packages. The name is
    * constructed working inwards from the package that is defined as namespace root up to and including
    * the PackageableElement itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    PrimitiveType.prototype.getQualifiedName = function (separator) {
        return this.modelDelegate.getQualifiedName(this, separator);
    };
    /**
    * Gets all classifiers of which this classifier is a direct general.
    * @returns {elements.Classifier[]}
    */
    PrimitiveType.prototype.getSpecializations = function () {
        return this.modelDelegate.getSpecializations(this);
    };
    return PrimitiveType;
}(Element));
export { PrimitiveType };
var Parameter = /** @class */ (function (_super) {
    __extends(Parameter, _super);
    function Parameter(modelDelegate, owner) {
        var _this = _super.call(this, modelDelegate, owner) || this;
        _this.elementType = elements.ElementType.parameter;
        _this.appliedStereotypes = [];
        _this.defaultValue = null;
        _this.direction = elements.ParameterDirectionKind.in;
        _this.isException = false;
        _this.isOrdered = false;
        _this.isStream = false;
        _this.isUnique = false;
        _this.lowerValue = null;
        _this.name = '';
        _this.order = 0;
        _this.taggedValues = [];
        _this.type = null;
        _this.upperValue = null;
        _this.visibility = null;
        return _this;
    }
    Object.defineProperty(Parameter.prototype, "lower", {
        get: function () {
            return this.modelDelegate.getLower(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Parameter.prototype, "upper", {
        get: function () {
            return this.modelDelegate.getUpper(this);
        },
        enumerable: true,
        configurable: true
    });
    /**
    * Gets the value of the DefaultValue property.
    * @returns {any} The default value (the type depending on the type of value), or null if no default
    * value can be determined.
    */
    Parameter.prototype.getDefault = function () {
        return this.modelDelegate.getDefault(this);
    };
    /**
    * The query lowerBound() returns the lower bound of the multiplicity as an integer, which is the
    * integerValue of lowerValue, if this is given, and 1 otherwise.
    * @returns {number}
    */
    Parameter.prototype.getLowerBound = function () {
        return this.modelDelegate.getLowerBound(this);
    };
    /**
    * Gets the name of the typed element's type.
    * @returns {string} The type name, or an empty string if the element has no type.
    */
    Parameter.prototype.getTypeName = function () {
        return this.modelDelegate.getTypeName(this);
    };
    /**
    * The query upperBound() returns the upper bound of the multiplicity for a bounded multiplicity as an
    * unlimited natural, which is the unlimitedNaturalValue of upperValue, if given, and 1, otherwise.
    * @returns {elements.UnlimitedNatural}
    */
    Parameter.prototype.getUpperBound = function () {
        return this.modelDelegate.getUpperBound(this);
    };
    /**
    * The query isMultivalued() checks whether this multiplicity has an upper bound greater than one.
    * @returns {boolean}
    */
    Parameter.prototype.isMultivalued = function () {
        return this.modelDelegate.isMultivalued(this);
    };
    /**
    * The query isOptional checks whether this multiplicity has a lower bound of 0 (0..n).
    * @returns {boolean}
    */
    Parameter.prototype.isOptional = function () {
        return this.modelDelegate.isOptional(this);
    };
    /**
    * The query isOptionalAndSingleValued checks whether this multiplicity has a lower bound of 0 and an
    * upper bound of 1 (0..1).
    * @returns {boolean}
    */
    Parameter.prototype.isOptionalAndSinglevalued = function () {
        return this.modelDelegate.isOptionalAndSinglevalued(this);
    };
    /**
    * The query isRequiredAndSinglevalued checks whether this multiplicity has a lower bound of 1 and an
    * upper bound of 1 (1..1).
    * @returns {boolean}
    */
    Parameter.prototype.isRequiredAndSinglevalued = function () {
        return this.modelDelegate.isRequiredAndSinglevalued(this);
    };
    return Parameter;
}(Element));
export { Parameter };
var Operation = /** @class */ (function (_super) {
    __extends(Operation, _super);
    function Operation(modelDelegate, owner) {
        var _this = _super.call(this, modelDelegate, owner) || this;
        _this.elementType = elements.ElementType.operation;
        _this.appliedStereotypes = [];
        _this.isAbstract = false;
        _this.isConstructor = false;
        _this.isLeaf = false;
        _this.isQuery = false;
        _this.isStatic = false;
        _this.name = '';
        _this.order = 0;
        _this.ownedParameters = [];
        _this.taggedValues = [];
        _this.visibility = null;
        return _this;
    }
    Object.defineProperty(Operation.prototype, "lower", {
        get: function () {
            return this.modelDelegate.getLower(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Operation.prototype, "upper", {
        get: function () {
            return this.modelDelegate.getUpper(this);
        },
        enumerable: true,
        configurable: true
    });
    /**
    * Returns the ownedParameters with direction in and inout.
    * @returns {elements.Parameter[]}
    */
    Operation.prototype.getInputParameters = function () {
        return this.modelDelegate.getInputParameters(this);
    };
    /**
    * The query lowerBound() returns the lower bound of the return parameter as an integer, which is the
    * integerValue of lowerValue, if this is given, and 1 otherwise. This information is derived from the
    * return result for this Operation.
    * @returns {number}
    */
    Operation.prototype.getLowerBound = function () {
        return this.modelDelegate.getLowerBound(this);
    };
    /**
    * Returns the ownedParameters with direction out, inout, or return.
    * @returns {elements.Parameter[]}
    */
    Operation.prototype.getOutputParameters = function () {
        return this.modelDelegate.getOutputParameters(this);
    };
    /**
    * Gets the operation's return parameter, if it has one.
    * @returns {elements.Parameter}
    */
    Operation.prototype.getReturnParameter = function () {
        return this.modelDelegate.getReturnParameter(this);
    };
    /**
    * Gets the type of the operation's return parameter, if it has any.
    * @returns {elements.Type}
    */
    Operation.prototype.getReturnType = function () {
        return this.modelDelegate.getReturnType(this);
    };
    /**
    * The query upperBound() returns the upper bound of the return parameter for a bounded multiplicity as
    * an unlimited natural, which is the unlimitedNaturalValue of upperValue, if given, and 1, otherwise.
    * This information is derived from the return result for this Operation.
    * @returns {elements.UnlimitedNatural}
    */
    Operation.prototype.getUpperBound = function () {
        return this.modelDelegate.getUpperBound(this);
    };
    /**
    * The query isMultivalued() checks whether the return parameter has an upper bound greater than one.
    * @returns {boolean}
    */
    Operation.prototype.isMultivalued = function () {
        return this.modelDelegate.isMultivalued(this);
    };
    /**
    * The query isOptional checks whether he return parameter has a lower bound of 0 (0..n).
    * @returns {boolean}
    */
    Operation.prototype.isOptional = function () {
        return this.modelDelegate.isOptional(this);
    };
    /**
    * The query isOptional checks whether he return parameter has a lower bound of 0 and an upper bound of
    * 1 (0..1).
    * @returns {boolean}
    */
    Operation.prototype.isOptionalAndSinglevalued = function () {
        return this.modelDelegate.isOptionalAndSinglevalued(this);
    };
    return Operation;
}(Element));
export { Operation };
var Model = /** @class */ (function (_super) {
    __extends(Model, _super);
    function Model(modelDelegate, owner) {
        var _this = _super.call(this, modelDelegate, owner) || this;
        _this.elementType = elements.ElementType.model;
        _this.appliedProfiles = [];
        _this.appliedStereotypes = [];
        _this.isNamespaceRoot = false;
        _this.name = '';
        _this.packagedElements = [];
        _this.taggedValues = [];
        _this.visibility = null;
        return _this;
    }
    Object.defineProperty(Model.prototype, "package", {
        get: function () {
            return this.modelDelegate.getPackage(this);
        },
        enumerable: true,
        configurable: true
    });
    /**
    * Gets all classes that are owned by this Package, including the ones owned by nested packages.
    * @returns {elements.Class[]}
    */
    Model.prototype.getAllClasses = function () {
        return this.modelDelegate.getAllClasses(this);
    };
    /**
    * Gets all data types that are owned by this Package, including the ones owned by nested packages.
    * @returns {elements.DataType[]}
    */
    Model.prototype.getAllDataTypes = function () {
        return this.modelDelegate.getAllDataTypes(this);
    };
    /**
    * Gets all enumerations that are owned by this Package, including the ones owned by nested packages.
    * @returns {elements.Enumeration[]}
    */
    Model.prototype.getAllEnumerations = function () {
        return this.modelDelegate.getAllEnumerations(this);
    };
    /**
    * Gets all interfaces that are owned by this Package, including the ones owned by nested packages.
    * @returns {elements.Interface[]}
    */
    Model.prototype.getAllInterfaces = function () {
        return this.modelDelegate.getAllInterfaces(this);
    };
    /**
    * Gets all types that are owned by this Package, including the ones owned by nested packages. This
    * includes the following types of elements: Class, Interface, DataType, PrimitiveType and Enumeration.
    * @returns {elements.Classifier[]} A subset of PackagedElements.
    */
    Model.prototype.getAllTypes = function () {
        return this.modelDelegate.getAllTypes(this);
    };
    /**
    * Gets all classes that are owned by this Package.
    * @returns {elements.Class[]} A subset of PackagedElements.
    */
    Model.prototype.getClasses = function () {
        return this.modelDelegate.getClasses(this);
    };
    /**
    * Gets all data types that are owned by this Package.
    * @returns {elements.DataType[]} A subset of PackagedElements.
    */
    Model.prototype.getDataTypes = function () {
        return this.modelDelegate.getDataTypes(this);
    };
    /**
    * Gets all enumerations that are owned by this Package.
    * @returns {elements.Enumeration[]} A subset of PackagedElements.
    */
    Model.prototype.getEnumerations = function () {
        return this.modelDelegate.getEnumerations(this);
    };
    /**
    * Gets all interfaces that are owned by this Package.
    * @returns {elements.Interface[]} A subset of PackagedElements.
    */
    Model.prototype.getInterfaces = function () {
        return this.modelDelegate.getInterfaces(this);
    };
    /**
    * Constructs a name from the names of the nesting packages. The name is constructed working inwards
    * from the package that is defined as namespace root up to but not including the PackageableElement
    * itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    Model.prototype.getNamespaceName = function (separator) {
        return this.modelDelegate.getNamespaceName(this, separator);
    };
    /**
    * Gets all packages that are owned by this Package.
    * @returns {elements.Package[]} A subset of PackagedElements.
    */
    Model.prototype.getNestedPackages = function () {
        return this.modelDelegate.getNestedPackages(this);
    };
    /**
    * Gets all packages that contain this Package, working inwards from the top Package to the owning
    * package.
    * @returns {elements.Package[]} A collection of Packages.
    */
    Model.prototype.getNestingPackages = function () {
        return this.modelDelegate.getNestingPackages(this);
    };
    /**
    * Constructs a name from the PackageableElement and the names of the nesting packages. The name is
    * constructed working inwards from the package that is defined as namespace root up to and including
    * the PackageableElement itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    Model.prototype.getQualifiedName = function (separator) {
        return this.modelDelegate.getQualifiedName(this, separator);
    };
    /**
    * Gets all types that are owned by this Package. This includes the following types of elements: Class,
    * Interface, DataType, PrimitiveType and Enumeration.
    * @returns {elements.Classifier[]} A subset of PackagedElements.
    */
    Model.prototype.getTypes = function () {
        return this.modelDelegate.getTypes(this);
    };
    return Model;
}(Element));
export { Model };
var LiteralUnlimitedNatural = /** @class */ (function (_super) {
    __extends(LiteralUnlimitedNatural, _super);
    function LiteralUnlimitedNatural(modelDelegate, owner) {
        var _this = _super.call(this, modelDelegate, owner) || this;
        _this.elementType = elements.ElementType.literalUnlimitedNatural;
        _this.appliedStereotypes = [];
        _this.name = '';
        _this.taggedValues = [];
        _this.type = null;
        _this.visibility = null;
        return _this;
    }
    /**
    * Gets the string representation of the value.
    * @returns {string}
    */
    LiteralUnlimitedNatural.prototype.getStringValue = function () {
        return this.modelDelegate.getStringValue(this);
    };
    /**
    * Gets the name of the typed element's type.
    * @returns {string} The type name, or an empty string if the element has no type.
    */
    LiteralUnlimitedNatural.prototype.getTypeName = function () {
        return this.modelDelegate.getTypeName(this);
    };
    /**
    * Gets underlying value of the ValueSpecification. The type depends on the type of ValueSpecification.
    * @returns {any} The underlying value of the ValueSpecification. The type depends on the type of
    * ValueSpecification.
    */
    LiteralUnlimitedNatural.prototype.getValue = function () {
        return this.modelDelegate.getValue(this);
    };
    return LiteralUnlimitedNatural;
}(Element));
export { LiteralUnlimitedNatural };
var LiteralString = /** @class */ (function (_super) {
    __extends(LiteralString, _super);
    function LiteralString(modelDelegate, owner) {
        var _this = _super.call(this, modelDelegate, owner) || this;
        _this.elementType = elements.ElementType.literalString;
        _this.appliedStereotypes = [];
        _this.name = '';
        _this.taggedValues = [];
        _this.type = null;
        _this.value = '';
        _this.visibility = null;
        return _this;
    }
    /**
    * Gets the string representation of the value.
    * @returns {string}
    */
    LiteralString.prototype.getStringValue = function () {
        return this.modelDelegate.getStringValue(this);
    };
    /**
    * Gets the name of the typed element's type.
    * @returns {string} The type name, or an empty string if the element has no type.
    */
    LiteralString.prototype.getTypeName = function () {
        return this.modelDelegate.getTypeName(this);
    };
    /**
    * Gets underlying value of the ValueSpecification. The type depends on the type of ValueSpecification.
    * @returns {any} The underlying value of the ValueSpecification. The type depends on the type of
    * ValueSpecification.
    */
    LiteralString.prototype.getValue = function () {
        return this.modelDelegate.getValue(this);
    };
    return LiteralString;
}(Element));
export { LiteralString };
var LiteralReal = /** @class */ (function (_super) {
    __extends(LiteralReal, _super);
    function LiteralReal(modelDelegate, owner) {
        var _this = _super.call(this, modelDelegate, owner) || this;
        _this.elementType = elements.ElementType.literalReal;
        _this.appliedStereotypes = [];
        _this.name = '';
        _this.taggedValues = [];
        _this.type = null;
        _this.value = 0;
        _this.visibility = null;
        return _this;
    }
    /**
    * Gets the string representation of the value.
    * @returns {string}
    */
    LiteralReal.prototype.getStringValue = function () {
        return this.modelDelegate.getStringValue(this);
    };
    /**
    * Gets the name of the typed element's type.
    * @returns {string} The type name, or an empty string if the element has no type.
    */
    LiteralReal.prototype.getTypeName = function () {
        return this.modelDelegate.getTypeName(this);
    };
    /**
    * Gets underlying value of the ValueSpecification. The type depends on the type of ValueSpecification.
    * @returns {any} The underlying value of the ValueSpecification. The type depends on the type of
    * ValueSpecification.
    */
    LiteralReal.prototype.getValue = function () {
        return this.modelDelegate.getValue(this);
    };
    return LiteralReal;
}(Element));
export { LiteralReal };
var LiteralNull = /** @class */ (function (_super) {
    __extends(LiteralNull, _super);
    function LiteralNull(modelDelegate, owner) {
        var _this = _super.call(this, modelDelegate, owner) || this;
        _this.elementType = elements.ElementType.literalNull;
        _this.appliedStereotypes = [];
        _this.name = '';
        _this.taggedValues = [];
        _this.type = null;
        _this.visibility = null;
        return _this;
    }
    /**
    * Gets the string representation of the value.
    * @returns {string}
    */
    LiteralNull.prototype.getStringValue = function () {
        return this.modelDelegate.getStringValue(this);
    };
    /**
    * Gets the name of the typed element's type.
    * @returns {string} The type name, or an empty string if the element has no type.
    */
    LiteralNull.prototype.getTypeName = function () {
        return this.modelDelegate.getTypeName(this);
    };
    /**
    * Gets underlying value of the ValueSpecification. The type depends on the type of ValueSpecification.
    * @returns {any} The underlying value of the ValueSpecification. The type depends on the type of
    * ValueSpecification.
    */
    LiteralNull.prototype.getValue = function () {
        return this.modelDelegate.getValue(this);
    };
    return LiteralNull;
}(Element));
export { LiteralNull };
var LiteralInteger = /** @class */ (function (_super) {
    __extends(LiteralInteger, _super);
    function LiteralInteger(modelDelegate, owner) {
        var _this = _super.call(this, modelDelegate, owner) || this;
        _this.elementType = elements.ElementType.literalInteger;
        _this.appliedStereotypes = [];
        _this.name = '';
        _this.taggedValues = [];
        _this.type = null;
        _this.value = 0;
        _this.visibility = null;
        return _this;
    }
    /**
    * Gets the string representation of the value.
    * @returns {string}
    */
    LiteralInteger.prototype.getStringValue = function () {
        return this.modelDelegate.getStringValue(this);
    };
    /**
    * Gets the name of the typed element's type.
    * @returns {string} The type name, or an empty string if the element has no type.
    */
    LiteralInteger.prototype.getTypeName = function () {
        return this.modelDelegate.getTypeName(this);
    };
    /**
    * Gets underlying value of the ValueSpecification. The type depends on the type of ValueSpecification.
    * @returns {any} The underlying value of the ValueSpecification. The type depends on the type of
    * ValueSpecification.
    */
    LiteralInteger.prototype.getValue = function () {
        return this.modelDelegate.getValue(this);
    };
    return LiteralInteger;
}(Element));
export { LiteralInteger };
var LiteralBoolean = /** @class */ (function (_super) {
    __extends(LiteralBoolean, _super);
    function LiteralBoolean(modelDelegate, owner) {
        var _this = _super.call(this, modelDelegate, owner) || this;
        _this.elementType = elements.ElementType.literalBoolean;
        _this.appliedStereotypes = [];
        _this.name = '';
        _this.taggedValues = [];
        _this.type = null;
        _this.value = false;
        _this.visibility = null;
        return _this;
    }
    /**
    * Gets the string representation of the value.
    * @returns {string}
    */
    LiteralBoolean.prototype.getStringValue = function () {
        return this.modelDelegate.getStringValue(this);
    };
    /**
    * Gets the name of the typed element's type.
    * @returns {string} The type name, or an empty string if the element has no type.
    */
    LiteralBoolean.prototype.getTypeName = function () {
        return this.modelDelegate.getTypeName(this);
    };
    /**
    * Gets underlying value of the ValueSpecification. The type depends on the type of ValueSpecification.
    * @returns {any} The underlying value of the ValueSpecification. The type depends on the type of
    * ValueSpecification.
    */
    LiteralBoolean.prototype.getValue = function () {
        return this.modelDelegate.getValue(this);
    };
    return LiteralBoolean;
}(Element));
export { LiteralBoolean };
var InterfaceRealization = /** @class */ (function (_super) {
    __extends(InterfaceRealization, _super);
    function InterfaceRealization(modelDelegate, owner) {
        var _this = _super.call(this, modelDelegate, owner) || this;
        _this.elementType = elements.ElementType.interfaceRealization;
        _this.appliedStereotypes = [];
        _this.taggedValues = [];
        return _this;
    }
    return InterfaceRealization;
}(Element));
export { InterfaceRealization };
var Interface = /** @class */ (function (_super) {
    __extends(Interface, _super);
    function Interface(modelDelegate, owner) {
        var _this = _super.call(this, modelDelegate, owner) || this;
        _this.elementType = elements.ElementType.interface;
        _this.appliedStereotypes = [];
        _this.generalizations = [];
        _this.isAbstract = false;
        _this.isFinalSpecialization = false;
        _this.isInferred = false;
        _this.isLeaf = false;
        _this.name = '';
        _this.ownedAttributes = [];
        _this.ownedOperations = [];
        _this.taggedValues = [];
        _this.visibility = null;
        return _this;
    }
    Object.defineProperty(Interface.prototype, "package", {
        get: function () {
            return this.modelDelegate.getPackage(this);
        },
        enumerable: true,
        configurable: true
    });
    /**
    * Returns both inherited and owned attributes.
    * @returns {elements.Property[]}
    */
    Interface.prototype.getAllAttributes = function () {
        return this.modelDelegate.getAllAttributes(this);
    };
    /**
    * Returns both inherited and owned operations. Any inherited operation that has the same signature
    * (having the same name and parameter type order) in an inheriting type is not included.
    * @returns {elements.Operation[]}
    */
    Interface.prototype.getAllOperations = function () {
        return this.modelDelegate.getAllOperations(this);
    };
    /**
    * Returns all of the direct and indirect ancestors of a generalized Classifier, working outwards: more
    * specific classifiers will appear before more general classifiers.
    * @returns {elements.Classifier[]}
    */
    Interface.prototype.getAllParents = function () {
        return this.modelDelegate.getAllParents(this);
    };
    /**
    * Gets all classifiers of which this element is a direct or indirect general.
    * @returns {elements.Classifier[]}
    */
    Interface.prototype.getAllSpecializations = function () {
        return this.modelDelegate.getAllSpecializations(this);
    };
    /**
    * Gets the first direct generalization relationship of the element.
    * @returns {elements.Generalization}
    */
    Interface.prototype.getFirstGeneralization = function () {
        return this.modelDelegate.getFirstGeneralization(this);
    };
    /**
    * Gets the first classifier that is an immediate general of the current element.
    * @returns {elements.Classifier}
    */
    Interface.prototype.getFirstParent = function () {
        return this.modelDelegate.getFirstParent(this);
    };
    /**
    * Constructs a name from the names of the nesting packages. The name is constructed working inwards
    * from the package that is defined as namespace root up to but not including the PackageableElement
    * itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    Interface.prototype.getNamespaceName = function (separator) {
        return this.modelDelegate.getNamespaceName(this, separator);
    };
    /**
    * Gets all packages that contain this Package, working inwards from the top Package to the owning
    * package.
    * @returns {elements.Package[]} A collection of Packages.
    */
    Interface.prototype.getNestingPackages = function () {
        return this.modelDelegate.getNestingPackages(this);
    };
    /**
    * Gives all of the immediate ancestors of a generalized Classifier.
    * @returns {elements.Classifier[]}
    */
    Interface.prototype.getParents = function () {
        return this.modelDelegate.getParents(this);
    };
    /**
    * Constructs a name from the PackageableElement and the names of the nesting packages. The name is
    * constructed working inwards from the package that is defined as namespace root up to and including
    * the PackageableElement itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    Interface.prototype.getQualifiedName = function (separator) {
        return this.modelDelegate.getQualifiedName(this, separator);
    };
    /**
    * Gets all classifiers of which this classifier is a direct general.
    * @returns {elements.Classifier[]}
    */
    Interface.prototype.getSpecializations = function () {
        return this.modelDelegate.getSpecializations(this);
    };
    return Interface;
}(Element));
export { Interface };
var Generalization = /** @class */ (function (_super) {
    __extends(Generalization, _super);
    function Generalization(modelDelegate, owner) {
        var _this = _super.call(this, modelDelegate, owner) || this;
        _this.elementType = elements.ElementType.generalization;
        _this.appliedStereotypes = [];
        _this.isSubstitutable = false;
        _this.taggedValues = [];
        return _this;
    }
    Object.defineProperty(Generalization.prototype, "specific", {
        get: function () {
            return this.modelDelegate.getSpecific(this);
        },
        enumerable: true,
        configurable: true
    });
    return Generalization;
}(Element));
export { Generalization };
var EnumerationLiteral = /** @class */ (function (_super) {
    __extends(EnumerationLiteral, _super);
    function EnumerationLiteral(modelDelegate, owner) {
        var _this = _super.call(this, modelDelegate, owner) || this;
        _this.elementType = elements.ElementType.enumerationLiteral;
        _this.appliedStereotypes = [];
        _this.name = '';
        _this.order = 0;
        _this.taggedValues = [];
        _this.visibility = null;
        return _this;
    }
    Object.defineProperty(EnumerationLiteral.prototype, "enumeration", {
        get: function () {
            return this.modelDelegate.getEnumeration(this);
        },
        enumerable: true,
        configurable: true
    });
    /**
    * Gets the value of the Specification property.
    * @returns {any} The default value (the type depending on the type of value), or null if no default
    * value can be determined.
    */
    EnumerationLiteral.prototype.getSpecificationValue = function () {
        return this.modelDelegate.getSpecificationValue(this);
    };
    return EnumerationLiteral;
}(Element));
export { EnumerationLiteral };
var Enumeration = /** @class */ (function (_super) {
    __extends(Enumeration, _super);
    function Enumeration(modelDelegate, owner) {
        var _this = _super.call(this, modelDelegate, owner) || this;
        _this.elementType = elements.ElementType.enumeration;
        _this.appliedStereotypes = [];
        _this.baseType = null;
        _this.generalizations = [];
        _this.isAbstract = false;
        _this.isFinalSpecialization = false;
        _this.isInferred = false;
        _this.isLeaf = false;
        _this.name = '';
        _this.ownedAttributes = [];
        _this.ownedLiterals = [];
        _this.ownedOperations = [];
        _this.taggedValues = [];
        _this.visibility = null;
        return _this;
    }
    Object.defineProperty(Enumeration.prototype, "package", {
        get: function () {
            return this.modelDelegate.getPackage(this);
        },
        enumerable: true,
        configurable: true
    });
    /**
    * Returns both inherited and owned attributes.
    * @returns {elements.Property[]}
    */
    Enumeration.prototype.getAllAttributes = function () {
        return this.modelDelegate.getAllAttributes(this);
    };
    /**
    * Returns both inherited and owned operations. Any inherited operation that has the same signature
    * (having the same name and parameter type order) in an inheriting type is not included.
    * @returns {elements.Operation[]}
    */
    Enumeration.prototype.getAllOperations = function () {
        return this.modelDelegate.getAllOperations(this);
    };
    /**
    * Returns all of the direct and indirect ancestors of a generalized Classifier, working outwards: more
    * specific classifiers will appear before more general classifiers.
    * @returns {elements.Classifier[]}
    */
    Enumeration.prototype.getAllParents = function () {
        return this.modelDelegate.getAllParents(this);
    };
    /**
    * Gets all classifiers of which this element is a direct or indirect general.
    * @returns {elements.Classifier[]}
    */
    Enumeration.prototype.getAllSpecializations = function () {
        return this.modelDelegate.getAllSpecializations(this);
    };
    /**
    * Gets the first direct generalization relationship of the element.
    * @returns {elements.Generalization}
    */
    Enumeration.prototype.getFirstGeneralization = function () {
        return this.modelDelegate.getFirstGeneralization(this);
    };
    /**
    * Gets the first classifier that is an immediate general of the current element.
    * @returns {elements.Classifier}
    */
    Enumeration.prototype.getFirstParent = function () {
        return this.modelDelegate.getFirstParent(this);
    };
    /**
    * Constructs a name from the names of the nesting packages. The name is constructed working inwards
    * from the package that is defined as namespace root up to but not including the PackageableElement
    * itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    Enumeration.prototype.getNamespaceName = function (separator) {
        return this.modelDelegate.getNamespaceName(this, separator);
    };
    /**
    * Gets all packages that contain this Package, working inwards from the top Package to the owning
    * package.
    * @returns {elements.Package[]} A collection of Packages.
    */
    Enumeration.prototype.getNestingPackages = function () {
        return this.modelDelegate.getNestingPackages(this);
    };
    /**
    * Gives all of the immediate ancestors of a generalized Classifier.
    * @returns {elements.Classifier[]}
    */
    Enumeration.prototype.getParents = function () {
        return this.modelDelegate.getParents(this);
    };
    /**
    * Constructs a name from the PackageableElement and the names of the nesting packages. The name is
    * constructed working inwards from the package that is defined as namespace root up to and including
    * the PackageableElement itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    Enumeration.prototype.getQualifiedName = function (separator) {
        return this.modelDelegate.getQualifiedName(this, separator);
    };
    /**
    * Gets all classifiers of which this classifier is a direct general.
    * @returns {elements.Classifier[]}
    */
    Enumeration.prototype.getSpecializations = function () {
        return this.modelDelegate.getSpecializations(this);
    };
    return Enumeration;
}(Element));
export { Enumeration };
var DocumentReference = /** @class */ (function () {
    function DocumentReference() {
        this.name = '';
        this.path = '';
    }
    return DocumentReference;
}());
export { DocumentReference };
var Comment = /** @class */ (function (_super) {
    __extends(Comment, _super);
    function Comment(modelDelegate, owner) {
        var _this = _super.call(this, modelDelegate, owner) || this;
        _this.elementType = elements.ElementType.comment;
        _this.appliedStereotypes = [];
        _this.body = '';
        _this.taggedValues = [];
        return _this;
    }
    return Comment;
}(Element));
export { Comment };
var Association = /** @class */ (function (_super) {
    __extends(Association, _super);
    function Association(modelDelegate, owner) {
        var _this = _super.call(this, modelDelegate, owner) || this;
        _this.elementType = elements.ElementType.association;
        _this.appliedStereotypes = [];
        _this.generalizations = [];
        _this.isAbstract = false;
        _this.isFinalSpecialization = false;
        _this.isInferred = false;
        _this.isLeaf = false;
        _this.memberEnds = [];
        _this.name = '';
        _this.ownedEnds = [];
        _this.taggedValues = [];
        _this.visibility = null;
        return _this;
    }
    Object.defineProperty(Association.prototype, "package", {
        get: function () {
            return this.modelDelegate.getPackage(this);
        },
        enumerable: true,
        configurable: true
    });
    /**
    * Returns all of the direct and indirect ancestors of a generalized Classifier, working outwards: more
    * specific classifiers will appear before more general classifiers.
    * @returns {elements.Classifier[]}
    */
    Association.prototype.getAllParents = function () {
        return this.modelDelegate.getAllParents(this);
    };
    /**
    * Gets all classifiers of which this element is a direct or indirect general.
    * @returns {elements.Classifier[]}
    */
    Association.prototype.getAllSpecializations = function () {
        return this.modelDelegate.getAllSpecializations(this);
    };
    /**
    * Gets the first direct generalization relationship of the element.
    * @returns {elements.Generalization}
    */
    Association.prototype.getFirstGeneralization = function () {
        return this.modelDelegate.getFirstGeneralization(this);
    };
    /**
    * Gets the first classifier that is an immediate general of the current element.
    * @returns {elements.Classifier}
    */
    Association.prototype.getFirstParent = function () {
        return this.modelDelegate.getFirstParent(this);
    };
    /**
    * Constructs a name from the names of the nesting packages. The name is constructed working inwards
    * from the package that is defined as namespace root up to but not including the PackageableElement
    * itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    Association.prototype.getNamespaceName = function (separator) {
        return this.modelDelegate.getNamespaceName(this, separator);
    };
    /**
    * Gets all packages that contain this Package, working inwards from the top Package to the owning
    * package.
    * @returns {elements.Package[]} A collection of Packages.
    */
    Association.prototype.getNestingPackages = function () {
        return this.modelDelegate.getNestingPackages(this);
    };
    /**
    * Gives all of the immediate ancestors of a generalized Classifier.
    * @returns {elements.Classifier[]}
    */
    Association.prototype.getParents = function () {
        return this.modelDelegate.getParents(this);
    };
    /**
    * Constructs a name from the PackageableElement and the names of the nesting packages. The name is
    * constructed working inwards from the package that is defined as namespace root up to and including
    * the PackageableElement itself.
    * @param {string} separator The string to use to separate names. If not specified, a dot "." will be
    * used.
    * @returns {string} A single string with all the names separated.
    */
    Association.prototype.getQualifiedName = function (separator) {
        return this.modelDelegate.getQualifiedName(this, separator);
    };
    /**
    * Gets all classifiers of which this classifier is a direct general.
    * @returns {elements.Classifier[]}
    */
    Association.prototype.getSpecializations = function () {
        return this.modelDelegate.getSpecializations(this);
    };
    return Association;
}(Element));
export { Association };
//# sourceMappingURL=data:application/json;base64,