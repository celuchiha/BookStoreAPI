/*
 * Copyright (c) 2019 Yellicode
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
import * as Interfaces from "./interfaces";
var ProfileUtility = /** @class */ (function () {
    function ProfileUtility() {
    }
    ProfileUtility.getStereotypes = function (profile) {
        if (!profile.packagedElements)
            return [];
        return profile.packagedElements.filter(function (e) { return e.elementType === Interfaces.ElementType.stereotype; });
    };
    ProfileUtility.hasStereotypeId = function (element, stereotypeId) {
        if (!element || !element.appliedStereotypes)
            return false;
        return ProfileUtility.hasStereotypeIdRecursive(element.appliedStereotypes, stereotypeId);
    };
    ProfileUtility.hasStereotypeIdRecursive = function (stereotypes, stereotypeId) {
        for (var index = 0; index < stereotypes.length; index++) {
            var stereotype = stereotypes[index];
            if (stereotype.id === stereotypeId)
                return true;
            // If the stereotype has parents, check these too                        
            var stereotypeGenerals = stereotype.getParents();
            if (stereotypeGenerals.length > 0 && ProfileUtility.hasStereotypeIdRecursive(stereotypeGenerals, stereotypeId)) {
                return true;
            }
        }
        return false;
    };
    ProfileUtility.getMetaClassesExtendedBy = function (stereotype) {
        // First add the stereotype's own meta classes
        return stereotype.extends.map(function (ext) { return ext.metaClass; });
    };
    ProfileUtility.getAllMetaClassesExtendedBy = function (stereotype) {
        // First add the stereotype's own meta classes
        var metaClasses = ProfileUtility.getMetaClassesExtendedBy(stereotype);
        // Then add meta classes of the specializing stereotypes
        stereotype.getSpecializations().forEach(function (derivedStereotype) {
            derivedStereotype.extends.forEach(function (extension) {
                if (metaClasses.indexOf(extension.metaClass) === -1) {
                    metaClasses.push(extension.metaClass);
                }
            });
        });
        return metaClasses;
    };
    ProfileUtility.hasProfileId = function (pack, profileId) {
        if (!pack || !pack.appliedProfiles)
            return false;
        return pack.appliedProfiles.some(function (s) { return s.id === profileId; });
    };
    /**
     * Filters the array of elements by only including the elements that have a particular stereotype applied.
     */
    ProfileUtility.filterByStereotypeId = function (elements, stereotypeId, elementType) {
        if (!elements)
            return [];
        if (elementType) {
            return elements.filter(function (e) {
                return e.elementType === elementType && ProfileUtility.hasStereotypeId(e, stereotypeId);
            });
        }
        return elements.filter(function (e) { return ProfileUtility.hasStereotypeId(e, stereotypeId); });
    };
    /**
     * Filters the array of packageable element by only including the packages that have a particular profile applied.
     */
    ProfileUtility.filterByProfileId = function (elements, profileId) {
        if (!elements)
            return [];
        return elements.filter(function (e) { return e.elementType === Interfaces.ElementType.package &&
            ProfileUtility.hasProfileId(e, profileId); });
    };
    return ProfileUtility;
}());
export { ProfileUtility };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZmlsZS11dGlsaXR5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Byb2ZpbGUtdXRpbGl0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFDSCxPQUFPLEtBQUssVUFBVSxNQUFNLGNBQWMsQ0FBQztBQUczQztJQUFBO0lBeUVBLENBQUM7SUF4RWlCLDZCQUFjLEdBQTVCLFVBQTZCLE9BQTJCO1FBQ3BELElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCO1lBQUUsT0FBTyxFQUFFLENBQUM7UUFDekMsT0FBTyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLFVBQUMsQ0FBQyxJQUFLLE9BQUEsQ0FBQyxDQUFDLFdBQVcsS0FBSyxVQUFVLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBbkQsQ0FBbUQsQ0FBNEIsQ0FBQztJQUNsSSxDQUFDO0lBRWEsOEJBQWUsR0FBN0IsVUFBbUUsT0FBd0IsRUFBRSxZQUFvQjtRQUM3RyxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQjtZQUN2QyxPQUFPLEtBQUssQ0FBQztRQUVqQixPQUFPLGNBQWMsQ0FBQyx3QkFBd0IsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDN0YsQ0FBQztJQUVjLHVDQUF3QixHQUF2QyxVQUE2RSxXQUFvQyxFQUFFLFlBQW9CO1FBQ25JLEtBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxXQUFXLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ3JELElBQUksVUFBVSxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNwQyxJQUFJLFVBQVUsQ0FBQyxFQUFFLEtBQUssWUFBWTtnQkFDOUIsT0FBTyxJQUFJLENBQUM7WUFFaEIseUVBQXlFO1lBQ3pFLElBQU0sa0JBQWtCLEdBQUcsVUFBVSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lB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