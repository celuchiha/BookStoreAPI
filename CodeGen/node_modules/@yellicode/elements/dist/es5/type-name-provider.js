import * as utils from "./utils";
/**
 * Default implementation of the TypeNameProvider interface. This implementation
 * returns type names as-is, but allows inheritors to provide their own implementation
 * by overriding getTypeNameForType and/or getTypeNameForTypedElement.
 */
var DefaultTypeNameProvider = /** @class */ (function () {
    function DefaultTypeNameProvider() {
    }
    DefaultTypeNameProvider.prototype.getTypeName = function (typeOrTypedElement) {
        if (utils.isTypedElement(typeOrTypedElement)) {
            // The argument is a typedElement            
            var isMultiValued = utils.isMultiplicityElement(typeOrTypedElement) && typeOrTypedElement.isMultivalued();
            return this.getTypeNameForTypedElement(typeOrTypedElement, utils.isDataType(typeOrTypedElement.type), isMultiValued);
        }
        else {
            // The argument is a type
            return this.getTypeNameForType(typeOrTypedElement, utils.isDataType(typeOrTypedElement));
        }
    };
    /**
    * Returns the name of the provided type. This function is also called by getTypeNameOfTypedElement() if that function is not overridden.
    * @param type The type information.
    * @param isDataType Indicates if the type is a data type (that is, an Enumeration, PrimitiveType or DataType).
    */
    DefaultTypeNameProvider.prototype.getTypeNameForType = function (type, isDataType) {
        // Note: we don't use isDataType in this default implementation, but it is considered relevant for implementers.
        return type ? type.name : null;
    };
    /**
    * Returns the name of the provided element's type. Internally, this function calls getTypeNameForType for the type, but
    * you should override this function if you need to provide different type names for a type depending on the context.
    * For example, you may return a different type name for a property or parameter that is multi-valued.
    * @param typedElement Any element that has a type.
    * @param isDataType Indicates if the element's type is a data type (that is, an Enumeration, PrimitiveType or DataType).
    * @param isMultiValued Indicates if the TypedElement is multi-valued (that is, has an upper bound greater than 1).
    */
    DefaultTypeNameProvider.prototype.getTypeNameForTypedElement = function (typedElement, isDataType, isMultiValued) {
        // Note: we don't use isMultiValued in this default implementation, but it is considered relevant for implementers.
        return this.getTypeNameForType(typedElement.type, isDataType);
    };
    /**
     * DEPRECATED: Returns the name of the provided element's data type. Override this function to map primitives and other data types
     * (both built-in or types exported from a profile) to the target language. The default implementation calls the
     * getDataTypeNameForType function using the type of the typedElement.
     * @param typedElement Any TypedElement instance.
     * @deprecated Please override getTypeNameForTypedElement instead.
     */
    DefaultTypeNameProvider.prototype.getDataTypeName = function (typedElement) {
        console.warn("DefaultTypeNameProvider.getDataTypeName is deprecated. Please override getTypeNameForTypedElement instead.");
        var isMultiValued = utils.isMultiplicityElement(typedElement) && typedElement.isMultivalued();
        return this.getTypeNameForTypedElement(typedElement, true, isMultiValued);
    };
    /**
    * DEPRECATED: Returns the name of the provided data type. Override this function to map primitives and other data types
    * (both built-in or types exported from a profile) to the target language.
    * @param type The type information.
    * @deprecated Please override getTypeNameForType instead.
    */
    DefaultTypeNameProvider.prototype.getDataTypeNameForType = function (type) {
        console.warn("DefaultTypeNameProvider.getDataTypeNameForType is deprecated. Please override getTypeNameForType instead.");
        return this.getTypeNameForType(type, true);
    };
    /**
     * DEPRECATED: Returns the name of the provided element's complex type (any type that is not a DataType). Override this function to provide
     * a custom name for the complex type. The default implementation calls the getComplexTypeNameForType function using
     * the type of the typedElement.
     * @param typedElement Any TypedElement instance.
     * @deprecated Please override getTypeNameForTypedElement instead.
     */
    DefaultTypeNameProvider.prototype.getComplexTypeName = function (typedElement) {
        console.warn("DefaultTypeNameProvider.getComplexTypeName is deprecated. Please override getTypeNameForTypedElement instead.");
        var isMultiValued = utils.isMultiplicityElement(typedElement) && typedElement.isMultivalued();
        return this.getTypeNameForTypedElement(typedElement, false, isMultiValued);
    };
    /**
    * DEPRECATED: Returns the name of the provided complex type (any type that is not a DataType). Override this function to provide
    * a custom name for the complex type.
    * @param type The type information.
    * @deprecated Please override getTypeNameForType instead.
    */
    DefaultTypeNameProvider.prototype.getComplexTypeNameForType = function (type) {
        console.warn("DefaultTypeNameProvider.getComplexTypeNameForType is deprecated. Please override getTypeNameForType instead.");
        return this.getTypeNameForType(type, false);
    };
    return DefaultTypeNameProvider;
}());
export { DefaultTypeNameProvider };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZS1uYW1lLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3R5cGUtbmFtZS1wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFRQSxPQUFPLEtBQUssS0FBSyxNQUFNLFNBQVMsQ0FBQztBQXVCakM7Ozs7R0FJRztBQUNIO0lBQUE7SUE4RkEsQ0FBQztJQW5GVSw2Q0FBVyxHQUFsQixVQUFtQixrQkFBZ0U7UUFDL0UsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLGtCQUFrQixDQUFDLEVBQUU7WUFDMUMsNkNBQTZDO1lBQzdDLElBQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLGtCQUFrQixDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQzVHLE9BQU8sSUFBSSxDQUFDLDBCQUEwQixDQUFDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEVBQUUsYUFBYSxDQUFDLENBQUM7U0FDeEg7YUFDSTtZQUNELHlCQUF5QjtZQUN6QixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztTQUM1RjtJQUNMLENBQUM7SUFFQTs7OztNQUlFO0lBQ3FCLG9EQUFrQixHQUExQyxVQUEyQyxJQUEwQixFQUFFLFVBQW1CO1FBQ3RGLGdIQUFnSDtRQUNoSCxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ25DLENBQUM7SUFFQTs7Ozs7OztNQU9FO0lBQ3FCLDREQUEwQixHQUFsRCxVQUFtRCxZQUFtQyxFQUFFLFVBQW1CLEVBQUUsYUFBc0I7UUFDL0gsbUhBQW1IO1FBQ25ILE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNtQixpREFBZSxHQUFyQyxVQUFzQyxZQUFtQztRQUNyRSxPQUFPLENBQUMsSUFBSSxDQUFDLDRHQUE0RyxDQUFDLENBQUM7UUFDM0gsSUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFDLHFCQUFxQixDQUFDLFlBQVksQ0FBQyxJQUFJLFlBQVksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNoRyxPQUFPLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFFQTs7Ozs7TUFLRTtJQUNtQix3REFBc0IsR0FBNUMsVUFBNkMsSUFBMEI7UUFDbkUsT0FBTyxDQUFDLElBQUksQ0FBQywyR0FBMkcsQ0FBQyxDQUFDO1FBQzFILE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ21CLG9EQUFrQixHQUF4QyxVQUF5QyxZQUFtQztRQUN4RSxPQUFPLENBQUMsSUFBSSxDQUFDLCtHQUErRyxDQUFDLENBQUM7UUFDOUgsSUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFDLHFCQUFxQixDQUFDLFlBQVksQ0FBQyxJQUFJLFlBQVksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNoRyxPQUFPLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxZQUFZLEVBQUUsS0FBSyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFFQTs7Ozs7TUFLRTtJQUNtQiwyREFBeUIsR0FBL0MsVUFBZ0QsSUFBMEI7UUFDdEUsT0FBTyxDQUFDLElBQUksQ0FBQyw4R0FBOEcsQ0FBQyxDQUFDO1FBQzdILE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUwsOEJBQUM7QUFBRCxDQUFDLEFBOUZELElBOEZDIn0=