import { DataToModelConverter } from './data-to-model-converter';
import { ElementTypeUtility } from './utils';
import { Document } from './document';
import { ModelDelegateImpl } from './model-delegate';
import { ElementMapImpl } from './element-map';
import { ElementComparerImpl } from './element-comparer';
var ModelReader = /** @class */ (function () {
    function ModelReader() {
        /**
         * Contains all profiles that were read from the main document or any referenced documents.
         */
        this.allProfiles = [];
        this.elementMap = new ElementMapImpl();
        this.modelDelegate = new ModelDelegateImpl(this.elementMap);
        this.converter = new DataToModelConverter(this.elementMap, this.modelDelegate, ElementComparerImpl.getInstance());
    }
    ModelReader.canRead = function (data) {
        if (!data.modelTypeName)
            return false;
        return ("yellicode yml" === data.modelTypeName.toLowerCase());
    };
    ModelReader.readDocument = function (documentData) {
        var instance = new ModelReader();
        return instance.readDocumentRecursive(documentData, false);
    };
    ModelReader.prototype.readDocumentRecursive = function (documentData, isReferencedDocument) {
        // Obsolete: Ids must be prefixed if we are loading a referenced document, because references to it 
        // are prefixed with the document id      
        // const elementIdPrefix = isReferencedDocument ? documentData.id : null;
        var _this = this;
        // Convert the document's referenced documents first
        this.readReferencedDocumentsRecursive(documentData);
        // Convert the document's profiles first (this allows the converter to resolve references to them)
        var profilesInDocument = documentData.profiles ? this.converter.convert(documentData.profiles, null) : null;
        if (profilesInDocument) {
            profilesInDocument.packagedElements.forEach(function (p) {
                if (ElementTypeUtility.isProfile(p.elementType)) { // the element can also be a Enum or other type
                    _this.allProfiles.push(p);
                }
            });
        }
        // Then convert the model, using the profiles
        var modelInDocument = documentData.model ? this.converter.convert(documentData.model, this.allProfiles) : null;
        var document = new Document(this.modelDelegate);
        document.id = documentData.id;
        document.modelTypeName = documentData.modelTypeName;
        document.modelTypeVersion = documentData.modelTypeVersion;
        document.creator = documentData.creator;
        document.profiles = profilesInDocument;
        document.model = modelInDocument;
        return document;
        //return documentData.model ? ModelReader.converter.convert(documentData.model, ModelReader.profiles, elementIdPrefix) : null;
    };
    ModelReader.prototype.readReferencedDocumentsRecursive = function (documentData) {
        var _this = this;
        if (!documentData.references)
            return;
        documentData.references.forEach(function (r) {
            if (!r.document)
                return;
            // Load the document. This will load the document's model elements into memory so that the converter can 
            // resolve any references to it. We don't use the referenced document's main model here, it is not returned 
            // through the API but may be referenced by the main document.
            _this.readDocumentRecursive(r.document, true);
        });
    };
    return ModelReader;
}());
export { ModelReader };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWwtcmVhZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vZGVsLXJlYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFTQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDN0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN0QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRy9DLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXpEO0lBa0JJO1FBTEE7O1dBRUc7UUFDSyxnQkFBVyxHQUF5QixFQUFFLENBQUM7UUFHM0MsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDNUQsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLG9CQUFvQixDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQ3RILENBQUM7SUFHYSxtQkFBTyxHQUFyQixVQUFzQixJQUFTO1FBQzNCLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYTtZQUFFLE9BQU8sS0FBSyxDQUFDO1FBQ3RDLE9BQU8sQ0FBQyxlQUFlLEtBQUssSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFYSx3QkFBWSxHQUExQixVQUEyQixZQUErQjtRQUN0RCxJQUFJLFFBQVEsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQ2pDLE9BQU8sUUFBUSxDQUFDLHFCQUFxQixDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBR08sMkNBQXFCLEdBQTdCLFVBQThCLFlBQStCLEVBQUUsb0JBQTZCO1FBQ3hGLG9HQUFvRztRQUNwRywwQ0FBMEM7UUFDMUMseUVBQXlFO1FBSDdFLGlCQThCQztRQXpCRyxvREFBb0Q7UUFDcEQsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRXBELGtHQUFrRztRQUNsRyxJQUFNLGtCQUFrQixHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUM5RyxJQUFJLGtCQUFrQixFQUFFO1lBQ3BCLGtCQUFrQixDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUM7Z0JBQ3pDLElBQUksa0JBQWtCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLCtDQUErQztvQkFDOUYsS0FBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBdUIsQ0FBQyxDQUFDO2lCQUNsRDtZQUNMLENBQUMsQ0FBQyxDQUFDO1NBQ047UUFFRCw2Q0FBNkM7UUFDN0MsSUFBTSxlQUFlLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNqSCxJQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDbEQsUUFBUSxDQUFDLEVBQUUsR0FBRyxZQUFZLENBQUMsRUFBRSxDQUFDO1FBQzlCLFFBQVEsQ0FBQyxhQUFhLEdBQUcsWUFBWSxDQUFDLGFBQWEsQ0FBQztRQUNwRCxRQUFRLENBQUMsZ0JBQWdCLEdBQUcsWUFBWSxDQUFDLGdCQUFnQixDQUFDO1FBQzFELFFBQVEsQ0FBQyxPQUFPLEdBQUksWUFBWSxDQUFDLE9BQU8sQ0FBQztRQUN6QyxRQUFRLENBQUMsUUFBUSxHQUFHLGtCQUFrQixDQUFDO1FBQ3ZDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsZUFBZSxDQUFDO1FBQ2pDLE9BQU8sUUFBUSxDQUFDO1FBRWhCLDhIQUE4SDtJQUNsSSxDQUFDO0lBRU8sc0RBQWdDLEdBQXhDLFVBQXlDLFlBQStCO1FBQXhFLGlCQVdDO1FBVkcsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVO1lBQ3hCLE9BQU87UUFFWCxZQUFZLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUM7WUFDN0IsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRO2dCQUFFLE9BQU87WUFDeEIseUdBQXlHO1lBQ3pHLDRHQUE0RztZQUM1Ryw4REFBOEQ7WUFDOUQsS0FBSSxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDakQsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ0wsa0JBQUM7QUFBRCxDQUFDLEFBaEZELElBZ0ZDIn0=