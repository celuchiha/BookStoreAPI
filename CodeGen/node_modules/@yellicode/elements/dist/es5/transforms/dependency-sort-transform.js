/*
* Copyright (c) 2019 Yellicode
*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0. If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
import * as toposort from 'toposort';
import { isPackage, isClassifier, isBehavioredClassifier, isMemberedClassifier, isType } from '../utils';
/**
 * A bitwise enumeration used to specify what types of dependency to include
 * during a DependencySortTransform.
 */
export var DependencyKind;
(function (DependencyKind) {
    DependencyKind[DependencyKind["none"] = 0] = "none";
    DependencyKind[DependencyKind["generalizations"] = 1] = "generalizations";
    DependencyKind[DependencyKind["interfaceRealizations"] = 2] = "interfaceRealizations";
    DependencyKind[DependencyKind["attributes"] = 4] = "attributes";
    DependencyKind[DependencyKind["operationParameters"] = 8] = "operationParameters";
    DependencyKind[DependencyKind["all"] = 15] = "all";
})(DependencyKind || (DependencyKind = {}));
/**
 * Sorts the types within a package (and within each nested package) based on their dependencies, in such a way
 * that dependencies appear before dependents. Dependencies are determined based on generalizations, interface
 * realizations, attributes and operation parameters.
 */
var DependencySortTransform = /** @class */ (function () {
    /**
     * Constructor. Creates a new DependencySortTransform instance.
     * @param dependencyKind An optional DependencyKind value (or a bitwise combination of values)
     * that indicates what types of dependency must be taken into account. The default is DependencyKind.All.
     */
    function DependencySortTransform(dependencyKind) {
        this._options = dependencyKind == null ? DependencyKind.all : dependencyKind;
    }
    DependencySortTransform.prototype.transform = function (pack) {
        if (!pack)
            return pack;
        this.transformPackageRecursive(pack);
        return pack;
    };
    DependencySortTransform.prototype.transformPackageRecursive = function (pack) {
        var _this = this;
        if (!pack.packagedElements)
            return;
        // Get all siblings that are relevant for building a depencency graph.        
        var allTypes = pack.packagedElements.filter(function (pe) { return isType(pe); });
        // Build a dependency graph of each element, see https://www.npmjs.com/package/toposort for the docs
        var graph = [];
        allTypes.forEach(function (t) {
            var elementDependencies = DependencySortTransform.getTypeDependencies(t, _this._options, allTypes);
            if (elementDependencies.length > 0) {
                elementDependencies.forEach(function (dependency) {
                    graph.push([t, dependency]);
                });
            }
        });
        if (graph.length > 0) {
            // Sort, and reverse because we need a dependency graph
            pack.packagedElements = toposort.array(pack.packagedElements, graph).reverse();
        }
        // Transform nested packages, recursively        
        pack.packagedElements.forEach(function (element) {
            if (isPackage(element)) {
                _this.transformPackageRecursive(element);
            }
        });
    };
    DependencySortTransform.getTypeDependencies = function (element, options, allTypes) {
        var result = [];
        // Dependencies based on generalizations
        if (options & DependencyKind.generalizations && isClassifier(element)) {
            DependencySortTransform.pushGeneralizationDependencies(element, allTypes, result);
        }
        // Dependencies based on interface realization
        if (options & DependencyKind.interfaceRealizations && isBehavioredClassifier(element)) {
            DependencySortTransform.pushInterfaceRealizationDependencies(element, allTypes, result);
        }
        // Dependencies based on members
        if (isMemberedClassifier(element)) {
            if (options & DependencyKind.attributes) {
                DependencySortTransform.pushOwnedAttributeDependencies(element, allTypes, result);
            }
            if (options & DependencyKind.operationParameters) {
                DependencySortTransform.pushOwnedOperationDependencies(element, allTypes, result);
            }
        }
        return result;
    };
    DependencySortTransform.pushGeneralizationDependencies = function (element, allTypes, dependencies) {
        if (!element.generalizations || !element.generalizations.length)
            return;
        element.generalizations.forEach(function (g) {
            if (g.general === element)
                return;
            if (allTypes.indexOf(g.general) > -1 && dependencies.indexOf(g.general) === -1) {
                dependencies.push(g.general);
            }
        });
    };
    DependencySortTransform.pushInterfaceRealizationDependencies = function (element, allTypes, dependencies) {
        if (!element.interfaceRealizations || !element.interfaceRealizations.length)
            return;
        element.interfaceRealizations.forEach(function (ir) {
            if (allTypes.indexOf(ir.contract) > -1 && dependencies.indexOf(ir.contract) === -1) {
                dependencies.push(ir.contract);
            }
        });
    };
    DependencySortTransform.pushOwnedOperationDependencies = function (element, allTypes, dependencies) {
        if (!element.ownedOperations || !element.ownedOperations.length)
            return;
        element.ownedOperations.forEach(function (op) {
            if (!op.ownedParameters || !op.ownedParameters.length)
                return;
            op.ownedParameters.forEach(function (p) {
                if (!p.type)
                    return;
                if (allTypes.indexOf(p.type) > -1 && dependencies.indexOf(p.type) === -1) {
                    dependencies.push(p.type);
                }
            });
        });
    };
    DependencySortTransform.pushOwnedAttributeDependencies = function (element, allTypes, dependencies) {
        if (!element.ownedAttributes || !element.ownedAttributes.length)
            return;
        element.ownedAttributes.forEach(function (att) {
            if (!att.type)
                return;
            if (allTypes.indexOf(att.type) > -1 && dependencies.indexOf(att.type) === -1) {
                dependencies.push(att.type);
            }
        });
    };
    return DependencySortTransform;
}());
export { DependencySortTransform };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwZW5kZW5jeS1zb3J0LXRyYW5zZm9ybS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90cmFuc2Zvcm1zL2RlcGVuZGVuY3ktc29ydC10cmFuc2Zvcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztFQU1FO0FBRUYsT0FBTyxLQUFLLFFBQVEsTUFBTSxVQUFVLENBQUM7QUFHckMsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsc0JBQXNCLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXpHOzs7R0FHRztBQUNILE1BQU0sQ0FBTixJQUFZLGNBT1g7QUFQRCxXQUFZLGNBQWM7SUFDdEIsbURBQVEsQ0FBQTtJQUNSLHlFQUF3QixDQUFBO0lBQ3hCLHFGQUE4QixDQUFBO0lBQzlCLCtEQUFtQixDQUFBO0lBQ25CLGlGQUE0QixDQUFBO0lBQzVCLGtEQUFnRixDQUFBO0FBQ3BGLENBQUMsRUFQVyxjQUFjLEtBQWQsY0FBYyxRQU96QjtBQUVEOzs7O0dBSUc7QUFDSDtJQUdJOzs7O09BSUc7SUFDSCxpQ0FBWSxjQUErQjtRQUN2QyxJQUFJLENBQUMsUUFBUSxHQUFHLGNBQWMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQztJQUNqRixDQUFDO0lBRU0sMkNBQVMsR0FBaEIsVUFBaUIsSUFBYTtRQUMxQixJQUFJLENBQUMsSUFBSTtZQUNMLE9BQU8sSUFBSSxDQUFDO1FBRWhCLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQyxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRU8sMkRBQXlCLEdBQWpDLFVBQWtDLElBQWE7UUFBL0MsaUJBNkJDO1FBNUJHLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCO1lBQ3RCLE9BQU87UUFFWCw4RUFBOEU7UUFDOUUsSUFBTSxRQUFR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