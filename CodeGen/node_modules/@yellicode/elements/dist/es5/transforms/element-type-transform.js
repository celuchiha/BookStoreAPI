/*
 * Copyright (c) 2019 Yellicode
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { ElementType } from '../interfaces';
import { isClass, isEnumeration, isStereotype, isMemberedClassifier, ElementTypeUtility, isBehavioredClassifier, isClassifier } from '../utils';
import { PackagedElementTransform } from './packaged-element-transform';
/**
 * Transforms packageable element elements of one element type to another element type. For example, this transform lets
 * you transform all classes in a model or package to interfaces.
 */
var ElementTypeTransform = /** @class */ (function (_super) {
    __extends(ElementTypeTransform, _super);
    function ElementTypeTransform(sourceElementType, targetElementType) {
        var _this = _super.call(this) || this;
        if (!sourceElementType)
            throw 'TypeTransform sourceType cannot be null.';
        if (!targetElementType)
            throw 'TypeTransform targetType cannot be null.';
        if (sourceElementType === targetElementType) {
            // Warn but don't crash
            console.warn("Invalid TypeTransform arguments: the source and target type are both of type '" + ElementType[sourceElementType] + "'.");
        }
        _this.sourceElementType = sourceElementType;
        _this.targetElementType = targetElementType;
        _this.sourceElementSelector = ElementTypeTransform.createTypeSelector(sourceElementType);
        return _this;
    }
    ElementTypeTransform.prototype.transformElement = function (element) {
        if (!this.sourceElementSelector(element) || this.sourceElementType === this.targetElementType)
            return;
        // Note that we don't check compatibility of existing relationships here. For example, we don't check the types of Generalizations when
        // a Class that has generalizations is transformed to an Interface (that has the same generalizations). 
        // The caller is responsible for transforming these generalizations as well.
        // Remove features that the type doesn't have         
        // ElementTypeTransform.removeOldSourceFeatures(element, this.targetElementType); // todo: disabled as long as this does not seem to add any value. 
        // Force the new elementType, even though it is readonly
        element.elementType = this.targetElementType;
        // Now add features that the type needs
        ElementTypeTransform.addNewTargetFeatures(element, this.sourceElementType);
    };
    ElementTypeTransform.addNewTargetFeatures = function (transformedElement, sourceElementType) {
        // Get access to the internal model ModelDelegate
        var modelDelegate = transformedElement.modelDelegate;
        // Implement MemberedClassifier members
        if (isMemberedClassifier(transformedElement) && !ElementTypeUtility.isMemberedClassifier(sourceElementType)) {
            transformedElement.ownedAttributes = [];
            transformedElement.ownedOperations = [];
            transformedElement.getAllAttributes = function () { return modelDelegate.getAllAttributes(transformedElement); };
            transformedElement.getAllOperations = function () { return modelDelegate.getAllOperations(transformedElement); };
        }
        // Implement BehavioredClassifier members
        if (isBehavioredClassifier(transformedElement) && !ElementTypeUtility.isBehavioredClassifier(sourceElementType)) {
            transformedElement.interfaceRealizations = [];
        }
        // Implement Classifier members
        if (isClassifier(transformedElement) && !ElementTypeUtility.isClassifier(sourceElementType)) {
            transformedElement.generalizations = [];
            transformedElement.isAbstract = false;
            transformedElement.isFinalSpecialization = false;
            transformedElement.getAllParents = function () { return modelDelegate.getAllParents(transformedElement); };
            transformedElement.getAllSpecializations = function () { return modelDelegate.getAllSpecializations(transformedElement); };
            transformedElement.getFirstGeneralization = function () { return modelDelegate.getFirstGeneralization(transformedElement); };
            transformedElement.getFirstParent = function () { return modelDelegate.getFirstParent(transformedElement); };
            transformedElement.getParents = function () { return modelDelegate.getParents(transformedElement); };
            transformedElement.getSpecializations = function () { return modelDelegate.getSpecializations(transformedElement); };
        }
        // Implement Enumeration members
        if (isEnumeration(transformedElement) && !ElementTypeUtility.isEnumeration(sourceElementType)) {
            transformedElement.baseType = null;
            transformedElement.ownedLiterals = [];
        }
        // Implement Class members
        if (isClass(transformedElement) && !ElementTypeUtility.isClass(sourceElementType)) {
            transformedElement.isActive = true;
            transformedElement.getSuperClasses = function () { return modelDelegate.getSuperClasses(transformedElement); };
        }
        // Implement Stereotype members
        if (isStereotype(transformedElement) && !ElementTypeUtility.isStereotype(sourceElementType)) {
            transformedElement.extends = [];
            transformedElement.safeName = transformedElement.name; // sorry, it's not perfect
        }
    };
    ElementTypeTransform.removeOldSourceFeatures = function (unTransformedElement, targetElementType) {
        // Remove MemberedClassifier members
        if (isMemberedClassifier(unTransformedElement) && !ElementTypeUtility.isMemberedClassifier(targetElementType)) {
            delete unTransformedElement.ownedAttributes;
            delete unTransformedElement.ownedOperations;
            delete unTransformedElement.getAllAttributes;
            delete unTransformedElement.getAllOperations;
        }
        // Remove BehavioredClassifier members
        if (isBehavioredClassifier(unTransformedElement) && !ElementTypeUtility.isBehavioredClassifier(targetElementType)) {
            delete unTransformedElement.interfaceRealizations;
        }
        // Remove Classifier members
        if (isClassifier(unTransformedElement) && !ElementTypeUtility.isClassifier(targetElementType)) {
            delete unTransformedElement.generalizations;
            delete unTransformedElement.isAbstract;
            delete unTransformedElement.isFinalSpecialization;
            delete unTransformedElement.getAllParents;
            delete unTransformedElement.getAllSpecializations;
            delete unTransformedElement.getFirstGeneralization;
            delete unTransformedElement.getFirstParent;
            delete unTransformedElement.getParents;
            delete unTransformedElement.getSpecializations;
        }
        // Remove Enumeration members
        if (isEnumeration(unTransformedElement) && !ElementTypeUtility.isEnumeration(targetElementType)) {
            delete unTransformedElement.baseType;
            delete unTransformedElement.ownedLiterals;
        }
        // Remove Class members
        if (isClass(unTransformedElement) && !ElementTypeUtility.isClass(targetElementType)) {
            delete unTransformedElement.isActive;
            delete unTransformedElement.getSuperClasses;
        }
        // Remove Stereotype members
        if (isStereotype(unTransformedElement) && !ElementTypeUtility.isStereotype(targetElementType)) {
            delete unTransformedElement.extends;
            delete unTransformedElement.safeName;
        }
    };
    ElementTypeTransform.createTypeSelector = function (elementType) {
        // Do a strict elementType comparison here
        return function (t) { return t.elementType === elementType; };
        // Alternatively, we could use the 'is...' functions to also include descendent types of elementType, 
        // but this might be confusing.
        // switch (elementType) {
        //     case ElementType.class:                
        //         return isClass;                
        //     case ElementType.dataType:
        //         return isDataType;
        //     case ElementType.enumeration:
        //         return isEnumeration;
        //     case ElementType.interface:
        //         return isInterface;
        //     case ElementType.primitiveType:
        //         return isPrimitiveType;
        //     case ElementType.stereotype:
        //         return isStereotype;
        //     default:
        //         throw `Unsupported element type ${ElementType[elementType]}.`;
        // }
    };
    return ElementTypeTransform;
}(PackagedElementTransform));
export { ElementTypeTransform };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudC10eXBlLXRyYW5zZm9ybS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90cmFuc2Zvcm1zL2VsZW1lbnQtdHlwZS10cmFuc2Zvcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HOzs7Ozs7Ozs7OztBQUVILE9BQU8sRUFBNEIsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxPQUFPLEVBQWMsYUFBYSxFQUFnQyxZQUFZLEVBQUUsb0JBQW9CLEVBQUUsa0JBQWtCLEVBQUUsc0JBQXNCLEVBQUUsWUFBWSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQzFMLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBR3hFOzs7R0FHRztBQUNIO0lBQTBDLHdDQUF3QjtJQUs5RCw4QkFDSSxpQkFBb0ssRUFDcEssaUJBQW9LO1FBRnhLLFlBSUksaUJBQU8sU0FnQlY7UUFkRyxJQUFJLENBQUMsaUJBQWlCO1lBQ2xCLE1BQU0sMENBQTBDLENBQUM7UUFFckQsSUFBSSxDQUFDLGlCQUFpQjtZQUNsQixNQUFNLDBDQUEwQyxDQUFDO1FBRXJELElBQUksaUJBQWlCLEtBQUssaUJBQWlCLEVBQUU7WUFDekMsdUJBQXVCO1lBQ3ZCLE9BQU8sQ0FBQyxJQUFJLENBQUMsbUZBQWlGLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxPQUFJLENBQUMsQ0FBQztTQUNySTtRQUVELEtBQUksQ0FBQyxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQztRQUMzQyxLQUFJLENBQUMsaUJBQWlCLEdBQUcsaUJBQWlCLENBQUM7UUFDM0MsS0FBSSxDQUFDLHFCQUFxQixHQUFHLG9CQUFvQixDQUFDLGtCQUFrQixDQUFDLGlCQUFpQixDQUFDLENBQUM7O0lBQzVGLENBQUM7SUFFeUIsK0NBQWdCLEdBQTFDLFVBQTJDLE9BQTJCO1FBQ2xFLElBQUksQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMs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