var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { PackagedElementTransform } from './packaged-element-transform';
import { NameUtility } from '@yellicode/core';
import { ElementTypeUtility } from '../utils';
// Note: using plural words here to avoid using reserved keywords.
/**
 * Enumerates which element types to be renamed when performing rename transforms.
 */
export var RenameTargets;
(function (RenameTargets) {
    /**
     * No elements are renamed.
     */
    RenameTargets[RenameTargets["none"] = 0] = "none";
    /**
     * Classes are renamed.
     */
    RenameTargets[RenameTargets["classes"] = 1] = "classes";
    /**
     * Interfaces are renamed.
     */
    RenameTargets[RenameTargets["interfaces"] = 2] = "interfaces";
    /**
     * Properties are renamed.
     */
    RenameTargets[RenameTargets["properties"] = 4] = "properties";
    /**
     * Operations are renamed.
     */
    RenameTargets[RenameTargets["operations"] = 8] = "operations";
    /**
     * Operation parameters are renamed.
     */
    RenameTargets[RenameTargets["parameters"] = 16] = "parameters";
    /**
     * Enumerations are renamed.
     */
    RenameTargets[RenameTargets["enumerations"] = 32] = "enumerations";
    /**
     * Enumeration literals are renamed.
     */
    RenameTargets[RenameTargets["enumerationLiterals"] = 64] = "enumerationLiterals";
    /**
     * All members are renamed: properties, operations, parameters and enumerationLiterals.
     */
    RenameTargets[RenameTargets["allMembers"] = 92] = "allMembers";
    /**
     * All elements are renamed.
     */
    RenameTargets[RenameTargets["all"] = 127] = "all";
})(RenameTargets || (RenameTargets = {}));
/**
 * A base class for renaming classes, interfaces, properties, operations parameters, enumerations and enumeration literals.
 */
var RenamingTransform = /** @class */ (function (_super) {
    __extends(RenamingTransform, _super);
    /**
     * Constructor. Creates a new RenamingTransform with the specified targets.
     * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
     */
    function RenamingTransform(targets) {
        var _this = _super.call(this) || this;
        _this.targets = targets == null ? RenameTargets.all : targets;
        return _this;
    }
    RenamingTransform.prototype.hasTarget = function (target) {
        if (this.targets & target)
            return true;
        else
            return false;
    };
    RenamingTransform.prototype.transformElement = function (element) {
        var _this = this;
        if (!ElementTypeUtility.isMemberedClassifier(element.elementType))
            return;
        if (this.hasTarget(RenameTargets.classes) && ElementTypeUtility.isClass(element.elementType)) {
            element.name = this.rename(element.name, element);
        }
        if (this.hasTarget(RenameTargets.interfaces) && ElementTypeUtility.isInterface(element.elementType)) {
            element.name = this.rename(element.name, element);
        }
        // The element has OwnedAttributes and OwnedOperations
        var classifier = element;
        if (classifier.ownedAttributes != null && this.hasTarget(RenameTargets.properties)) {
            classifier.ownedAttributes.forEach(function (att) {
                att.name = _this.rename(att.name, att);
            });
        }
        if (classifier.ownedOperations != null) {
            classifier.ownedOperations.forEach(function (op) {
                if (_this.hasTarget(RenameTargets.operations)) {
                    op.name = _this.rename(op.name, op);
                }
                if (_this.hasTarget(RenameTargets.parameters)) {
                    op.ownedParameters.forEach(function (p) {
                        p.name = _this.rename(p.name, p);
                    });
                }
            });
        }
        if (ElementTypeUtility.isEnumeration(element.elementType)) {
            var enumeration = element;
            if (this.hasTarget(RenameTargets.enumerations)) {
                enumeration.name = this.rename(enumeration.name, enumeration);
            }
            if (enumeration.ownedLiterals != null && this.hasTarget(RenameTargets.enumerationLiterals)) {
                enumeration.ownedLiterals.forEach(function (literal) {
                    literal.name = _this.rename(literal.name, literal);
                });
            }
        }
    };
    return RenamingTransform;
}(PackagedElementTransform));
export { RenamingTransform };
/**
 * A transform that capitalizes its rename targets, that is, makes the
 * first character uppercase.
 */
var CapitalizingTransform = /** @class */ (function (_super) {
    __extends(CapitalizingTransform, _super);
    /**
     * Constructor. Creates a new CapitalizingTransform with the specified targets.
     * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
     */
    function CapitalizingTransform(targets) {
        return _super.call(this, targets) || this;
    }
    CapitalizingTransform.prototype.rename = function (name, target) {
        return NameUtility.capitalize(name);
    };
    return CapitalizingTransform;
}(RenamingTransform));
export { CapitalizingTransform };
/**
 * A transform that uncapitalizes its rename targets, that is, makes the
 * first character lowercase.
 */
var UnCapitalizingTransform = /** @class */ (function (_super) {
    __extends(UnCapitalizingTransform, _super);
    /**
     * Constructor. Creates a new UnCapitalizingTransform with the specified targets.
     * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
     */
    function UnCapitalizingTransform(targets) {
        return _super.call(this, targets) || this;
    }
    UnCapitalizingTransform.prototype.rename = function (name, target) {
        return NameUtility.unCapitalize(name);
    };
    return UnCapitalizingTransform;
}(RenamingTransform));
export { UnCapitalizingTransform };
/**
 * A transform that converts its rename targets from UpperCamelCase to lowerCamelCase.
 */
var UpperToLowerCamelCaseTransform = /** @class */ (function (_super) {
    __extends(UpperToLowerCamelCaseTransform, _super);
    /**
       * Constructor. Creates a new UpperToLowerCamelCaseTransform with the specified targets.
       * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
       */
    function UpperToLowerCamelCaseTransform(targets) {
        return _super.call(this, targets) || this;
    }
    UpperToLowerCamelCaseTransform.prototype.rename = function (name, target) {
        return NameUtility.upperToLowerCamelCase(name);
    };
    return UpperToLowerCamelCaseTransform;
}(RenamingTransform));
export { UpperToLowerCamelCaseTransform };
/**
 * A transform that converts its rename targets from lowerCamelCase to UpperCamelCase.
 */
var LowerToUpperCamelCaseTransform = /** @class */ (function (_super) {
    __extends(LowerToUpperCamelCaseTransform, _super);
    /**
       * Constructor. Creates a new LowerToUpperCamelCaseTransform with the specified targets.
       * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
       */
    function LowerToUpperCamelCaseTransform(targets) {
        return _super.call(this, targets) || this;
    }
    LowerToUpperCamelCaseTransform.prototype.rename = function (name, target) {
        return NameUtility.lowerToUpperCamelCase(name);
    };
    return LowerToUpperCamelCaseTransform;
}(RenamingTransform));
export { LowerToUpperCamelCaseTransform };
/**
 * A transform that adds a prefix to its rename targets.
 */
var PrefixingTransform = /** @class */ (function (_super) {
    __extends(PrefixingTransform, _super);
    /**
    * Constructor. Creates a new PrefixingTransform with the specified targets.
    * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
    */
    function PrefixingTransform(targets, prefix) {
        var _this = _super.call(this, targets) || this;
        _this.prefix = prefix;
        return _this;
    }
    PrefixingTransform.prototype.rename = function (name, target) {
        return this.prefix + name;
    };
    return PrefixingTransform;
}(RenamingTransform));
export { PrefixingTransform };
/**
 * A transform that adds a suffix to its rename targets.
 */
var SuffixingTransform = /** @class */ (function (_super) {
    __extends(SuffixingTransform, _super);
    /**
    * Constructor. Creates a new SuffixingTransform with the specified targets.
    * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
    */
    function SuffixingTransform(targets, suffix) {
        var _this = _super.call(this, targets) || this;
        _this.suffix = suffix;
        return _this;
    }
    SuffixingTransform.prototype.rename = function (name, target) {
        return name + this.suffix;
    };
    return SuffixingTransform;
}(RenamingTransform));
export { SuffixingTransform };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuYW1pbmctdHJhbnNmb3Jtcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90cmFuc2Zvcm1zL3JlbmFtaW5nLXRyYW5zZm9ybXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQVFBLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFOUMsa0VBQWtFO0FBRWxFOztHQUVHO0FBQ0gsTUFBTSxDQUFOLElBQVksYUF5Q1g7QUF6Q0QsV0FBWSxhQUFhO0lBQ3JCOztPQUVHO0lBQ0gsaURBQVEsQ0FBQTtJQUNSOztPQUVHO0lBQ0gsdURBQWdCLENBQUE7SUFDaEI7O09BRUc7SUFDSCw2REFBbUIsQ0FBQTtJQUNuQjs7T0FFRztJQUNILDZEQUFtQixDQUFBO0lBQ25COztPQUVHO0lBQ0gsNkRBQW1CLENBQUE7SUFDbkI7O09BRUc7SUFDSCw4REFBbUIsQ0FBQTtJQUNuQjs7T0FFRztJQUNILGtFQUFxQixDQUFBO0lBQ3JCOztPQUVHO0lBQ0gsZ0ZBQTRCLENBQUE7SUFDNUI7O09BRUc7SUFDSCw4REFBdUUsQ0FBQTtJQUN2RTs7T0FFRztJQUNILGlEQUFzRyxDQUFBO0FBQzFHLENBQUMsRUF6Q1csYUFBYSxLQUFiLGFBQWEsUUF5Q3hCO0FBRUQ7O0dBRUc7QUFDSDtJQUFnRCxxQ0FBd0I7SUFHcEU7OztPQUdHO0lBQ0gsMkJBQVksT0FBdUI7UUFBbkMsWUFDSSxpQkFBTyxTQUVWO1FBREcsS0FBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7O0lBQ2pFLENBQUM7SUFFTyxxQ0FBUyxHQUFqQixVQUFrQixNQUFxQjtRQUNu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