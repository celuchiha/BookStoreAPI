/**
* This code was generated by a tool.
*
* Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
*/
import * as elements from './interfaces';
export declare class ElementTypeUtility {
    /**
    * Returns true if the elementType is a NamedElement or one of its descendants.
    */
    static isNamedElement(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a TypedElement or one of its descendants.
    */
    static isTypedElement(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a ValueSpecification or one of its descendants.
    */
    static isValueSpecification(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a PackageableElement or one of its descendants.
    */
    static isPackageableElement(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a Type or one of its descendants.
    */
    static isType(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a RedefinableElement or one of its descendants.
    */
    static isRedefinableElement(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a Classifier or one of its descendants.
    */
    static isClassifier(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a StructuredClassifier or one of its descendants.
    */
    static isStructuredClassifier(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a MultiplicityElement or one of its descendants.
    */
    static isMultiplicityElement(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a OrderedElement or one of its descendants.
    */
    static isOrderedElement(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a Feature or one of its descendants.
    */
    static isFeature(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a StructuralFeature or one of its descendants.
    */
    static isStructuralFeature(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a MemberedClassifier or one of its descendants.
    */
    static isMemberedClassifier(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a BehavioredClassifier or one of its descendants.
    */
    static isBehavioredClassifier(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a Class or one of its descendants.
    */
    static isClass(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a Stereotype or one of its descendants.
    */
    static isStereotype(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a Relationship or one of its descendants.
    */
    static isRelationship(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a Property or one of its descendants.
    */
    static isProperty(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a Package or one of its descendants.
    */
    static isPackage(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a Profile or one of its descendants.
    */
    static isProfile(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a DataType or one of its descendants.
    */
    static isDataType(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a PrimitiveType or one of its descendants.
    */
    static isPrimitiveType(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a Parameter or one of its descendants.
    */
    static isParameter(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a BehavioralFeature or one of its descendants.
    */
    static isBehavioralFeature(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a Operation or one of its descendants.
    */
    static isOperation(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a Model or one of its descendants.
    */
    static isModel(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a LiteralSpecification or one of its descendants.
    */
    static isLiteralSpecification(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a LiteralUnlimitedNatural or one of its descendants.
    */
    static isLiteralUnlimitedNatural(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a LiteralString or one of its descendants.
    */
    static isLiteralString(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a LiteralReal or one of its descendants.
    */
    static isLiteralReal(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a LiteralNull or one of its descendants.
    */
    static isLiteralNull(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a LiteralInteger or one of its descendants.
    */
    static isLiteralInteger(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a LiteralBoolean or one of its descendants.
    */
    static isLiteralBoolean(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a DirectedRelationship or one of its descendants.
    */
    static isDirectedRelationship(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a InterfaceRealization or one of its descendants.
    */
    static isInterfaceRealization(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a Interface or one of its descendants.
    */
    static isInterface(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a Generalization or one of its descendants.
    */
    static isGeneralization(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a EnumerationLiteral or one of its descendants.
    */
    static isEnumerationLiteral(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a Enumeration or one of its descendants.
    */
    static isEnumeration(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a Comment or one of its descendants.
    */
    static isComment(elementType: elements.ElementType): boolean;
    /**
    * Returns true if the elementType is a Association or one of its descendants.
    */
    static isAssociation(elementType: elements.ElementType): boolean;
}
/**
* Asserts that the element is a NamedElement or one of its descendants.
*/
export declare function isNamedElement(element: elements.Element | null): element is elements.NamedElement;
/**
* Asserts that the element is a TypedElement or one of its descendants.
*/
export declare function isTypedElement(element: elements.Element | null): element is elements.TypedElement;
/**
* Asserts that the element is a ValueSpecification or one of its descendants.
*/
export declare function isValueSpecification(element: elements.Element | null): element is elements.ValueSpecification;
/**
* Asserts that the element is a PackageableElement or one of its descendants.
*/
export declare function isPackageableElement(element: elements.Element | null): element is elements.PackageableElement;
/**
* Asserts that the element is a Type or one of its descendants.
*/
export declare function isType(element: elements.Element | null): element is elements.Type;
/**
* Asserts that the element is a RedefinableElement or one of its descendants.
*/
export declare function isRedefinableElement(element: elements.Element | null): element is elements.RedefinableElement;
/**
* Asserts that the element is a Classifier or one of its descendants.
*/
export declare function isClassifier(element: elements.Element | null): element is elements.Classifier;
/**
* Asserts that the element is a StructuredClassifier or one of its descendants.
*/
export declare function isStructuredClassifier(element: elements.Element | null): element is elements.StructuredClassifier;
/**
* Asserts that the element is a MultiplicityElement or one of its descendants.
*/
export declare function isMultiplicityElement(element: elements.Element | null): element is elements.MultiplicityElement;
/**
* Asserts that the element is a OrderedElement or one of its descendants.
*/
export declare function isOrderedElement(element: elements.Element | null): element is elements.OrderedElement;
/**
* Asserts that the element is a Feature or one of its descendants.
*/
export declare function isFeature(element: elements.Element | null): element is elements.Feature;
/**
* Asserts that the element is a StructuralFeature or one of its descendants.
*/
export declare function isStructuralFeature(element: elements.Element | null): element is elements.StructuralFeature;
/**
* Asserts that the element is a MemberedClassifier or one of its descendants.
*/
export declare function isMemberedClassifier(element: elements.Element | null): element is elements.MemberedClassifier;
/**
* Asserts that the element is a BehavioredClassifier or one of its descendants.
*/
export declare function isBehavioredClassifier(element: elements.Element | null): element is elements.BehavioredClassifier;
/**
* Asserts that the element is a Class or one of its descendants.
*/
export declare function isClass(element: elements.Element | null): element is elements.Class;
/**
* Asserts that the element is a Stereotype or one of its descendants.
*/
export declare function isStereotype(element: elements.Element | null): element is elements.Stereotype;
/**
* Asserts that the element is a Relationship or one of its descendants.
*/
export declare function isRelationship(element: elements.Element | null): element is elements.Relationship;
/**
* Asserts that the element is a Property or one of its descendants.
*/
export declare function isProperty(element: elements.Element | null): element is elements.Property;
/**
* Asserts that the element is a Package or one of its descendants.
*/
export declare function isPackage(element: elements.Element | null): element is elements.Package;
/**
* Asserts that the element is a Profile or one of its descendants.
*/
export declare function isProfile(element: elements.Element | null): element is elements.Profile;
/**
* Asserts that the element is a DataType or one of its descendants.
*/
export declare function isDataType(element: elements.Element | null): element is elements.DataType;
/**
* Asserts that the element is a PrimitiveType or one of its descendants.
*/
export declare function isPrimitiveType(element: elements.Element | null): element is elements.PrimitiveType;
/**
* Asserts that the element is a Parameter or one of its descendants.
*/
export declare function isParameter(element: elements.Element | null): element is elements.Parameter;
/**
* Asserts that the element is a BehavioralFeature or one of its descendants.
*/
export declare function isBehavioralFeature(element: elements.Element | null): element is elements.BehavioralFeature;
/**
* Asserts that the element is a Operation or one of its descendants.
*/
export declare function isOperation(element: elements.Element | null): element is elements.Operation;
/**
* Asserts that the element is a Model or one of its descendants.
*/
export declare function isModel(element: elements.Element | null): element is elements.Model;
/**
* Asserts that the element is a LiteralSpecification or one of its descendants.
*/
export declare function isLiteralSpecification(element: elements.Element | null): element is elements.LiteralSpecification;
/**
* Asserts that the element is a LiteralUnlimitedNatural or one of its descendants.
*/
export declare function isLiteralUnlimitedNatural(element: elements.Element | null): element is elements.LiteralUnlimitedNatural;
/**
* Asserts that the element is a LiteralString or one of its descendants.
*/
export declare function isLiteralString(element: elements.Element | null): element is elements.LiteralString;
/**
* Asserts that the element is a LiteralReal or one of its descendants.
*/
export declare function isLiteralReal(element: elements.Element | null): element is elements.LiteralReal;
/**
* Asserts that the element is a LiteralNull or one of its descendants.
*/
export declare function isLiteralNull(element: elements.Element | null): element is elements.LiteralNull;
/**
* Asserts that the element is a LiteralInteger or one of its descendants.
*/
export declare function isLiteralInteger(element: elements.Element | null): element is elements.LiteralInteger;
/**
* Asserts that the element is a LiteralBoolean or one of its descendants.
*/
export declare function isLiteralBoolean(element: elements.Element | null): element is elements.LiteralBoolean;
/**
* Asserts that the element is a DirectedRelationship or one of its descendants.
*/
export declare function isDirectedRelationship(element: elements.Element | null): element is elements.DirectedRelationship;
/**
* Asserts that the element is a InterfaceRealization or one of its descendants.
*/
export declare function isInterfaceRealization(element: elements.Element | null): element is elements.InterfaceRealization;
/**
* Asserts that the element is a Interface or one of its descendants.
*/
export declare function isInterface(element: elements.Element | null): element is elements.Interface;
/**
* Asserts that the element is a Generalization or one of its descendants.
*/
export declare function isGeneralization(element: elements.Element | null): element is elements.Generalization;
/**
* Asserts that the element is a EnumerationLiteral or one of its descendants.
*/
export declare function isEnumerationLiteral(element: elements.Element | null): element is elements.EnumerationLiteral;
/**
* Asserts that the element is a Enumeration or one of its descendants.
*/
export declare function isEnumeration(element: elements.Element | null): element is elements.Enumeration;
/**
* Asserts that the element is a Comment or one of its descendants.
*/
export declare function isComment(element: elements.Element | null): element is elements.Comment;
/**
* Asserts that the element is a Association or one of its descendants.
*/
export declare function isAssociation(element: elements.Element | null): element is elements.Association;
