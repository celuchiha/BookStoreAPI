import * as elements from '../interfaces';
import { PackagedElementTransform } from './packaged-element-transform';
/**
 * Enumerates which element types to be renamed when performing rename transforms.
 */
export declare enum RenameTargets {
    /**
     * No elements are renamed.
     */
    none = 0,
    /**
     * Classes are renamed.
     */
    classes = 1,
    /**
     * Interfaces are renamed.
     */
    interfaces = 2,
    /**
     * Properties are renamed.
     */
    properties = 4,
    /**
     * Operations are renamed.
     */
    operations = 8,
    /**
     * Operation parameters are renamed.
     */
    parameters = 16,
    /**
     * Enumerations are renamed.
     */
    enumerations = 32,
    /**
     * Enumeration literals are renamed.
     */
    enumerationLiterals = 64,
    /**
     * All members are renamed: properties, operations, parameters and enumerationLiterals.
     */
    allMembers = 92,
    /**
     * All elements are renamed.
     */
    all = 127
}
/**
 * A base class for renaming classes, interfaces, properties, operations parameters, enumerations and enumeration literals.
 */
export declare abstract class RenamingTransform extends PackagedElementTransform {
    private targets;
    /**
     * Constructor. Creates a new RenamingTransform with the specified targets.
     * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
     */
    constructor(targets?: RenameTargets);
    private hasTarget;
    protected transformElement(element: elements.PackageableElement): void;
    protected abstract rename(name: string, target: elements.Element): string;
}
/**
 * A transform that capitalizes its rename targets, that is, makes the
 * first character uppercase.
 */
export declare class CapitalizingTransform extends RenamingTransform {
    /**
     * Constructor. Creates a new CapitalizingTransform with the specified targets.
     * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
     */
    constructor(targets?: RenameTargets);
    protected rename(name: string, target: elements.Element): string;
}
/**
 * A transform that uncapitalizes its rename targets, that is, makes the
 * first character lowercase.
 */
export declare class UnCapitalizingTransform extends RenamingTransform {
    /**
     * Constructor. Creates a new UnCapitalizingTransform with the specified targets.
     * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
     */
    constructor(targets?: RenameTargets);
    protected rename(name: string, target: elements.Element): string;
}
/**
 * A transform that converts its rename targets from UpperCamelCase to lowerCamelCase.
 */
export declare class UpperToLowerCamelCaseTransform extends RenamingTransform {
    /**
       * Constructor. Creates a new UpperToLowerCamelCaseTransform with the specified targets.
       * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
       */
    constructor(targets?: RenameTargets);
    protected rename(name: string, target: elements.Element): string;
}
/**
 * A transform that converts its rename targets from lowerCamelCase to UpperCamelCase.
 */
export declare class LowerToUpperCamelCaseTransform extends RenamingTransform {
    /**
       * Constructor. Creates a new LowerToUpperCamelCaseTransform with the specified targets.
       * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
       */
    constructor(targets?: RenameTargets);
    protected rename(name: string, target: elements.Element): string;
}
/**
 * A transform that adds a prefix to its rename targets.
 */
export declare class PrefixingTransform extends RenamingTransform {
    private prefix;
    /**
    * Constructor. Creates a new PrefixingTransform with the specified targets.
    * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
    */
    constructor(targets: RenameTargets, prefix: string);
    protected rename(name: string, target: elements.Element): string;
}
/**
 * A transform that adds a suffix to its rename targets.
 */
export declare class SuffixingTransform extends RenamingTransform {
    private suffix;
    /**
    * Constructor. Creates a new SuffixingTransform with the specified targets.
    * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
    */
    constructor(targets: RenameTargets, suffix: string);
    protected rename(name: string, target: elements.Element): string;
}
