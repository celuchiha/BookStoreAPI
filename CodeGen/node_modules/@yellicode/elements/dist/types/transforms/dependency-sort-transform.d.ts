import { ModelTransform } from '@yellicode/core';
import { Package } from '../interfaces';
/**
 * A bitwise enumeration used to specify what types of dependency to include
 * during a DependencySortTransform.
 */
export declare enum DependencyKind {
    none = 0,
    generalizations = 1,
    interfaceRealizations = 2,
    attributes = 4,
    operationParameters = 8,
    all = 15
}
/**
 * Sorts the types within a package (and within each nested package) based on their dependencies, in such a way
 * that dependencies appear before dependents. Dependencies are determined based on generalizations, interface
 * realizations, attributes and operation parameters.
 */
export declare class DependencySortTransform implements ModelTransform<Package, Package> {
    private _options;
    /**
     * Constructor. Creates a new DependencySortTransform instance.
     * @param dependencyKind An optional DependencyKind value (or a bitwise combination of values)
     * that indicates what types of dependency must be taken into account. The default is DependencyKind.All.
     */
    constructor(dependencyKind?: DependencyKind);
    transform(pack: Package): Package;
    private transformPackageRecursive;
    private static getTypeDependencies;
    private static pushGeneralizationDependencies;
    private static pushInterfaceRealizationDependencies;
    private static pushOwnedOperationDependencies;
    private static pushOwnedAttributeDependencies;
}
