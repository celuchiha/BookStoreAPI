/**
* This code was generated by a tool.
*
* Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
*/
import * as elements from './interfaces';
import * as data from './data-interfaces';
import { ModelDelegate } from './model-delegate-interface';
import { ElementMap } from './element-map-interface';
import { ElementComparer } from './element-comparer-interface';
export declare class DataToModelConverter {
    private elementMap;
    private modelDelegate;
    private elementComparer;
    private referencesToResolve;
    private createPrimitiveTypes;
    private createElementType;
    constructor(elementMap: ElementMap, modelDelegate: ModelDelegate, elementComparer: ElementComparer);
    /**
     * NOTE: this function must be edited in the partial template file.
     */
    private createElementId;
    /**
     * NOTE: this function must be edited in the partial template file.
     */
    convert(elementData: data.ModelData, profiles: elements.Profile[] | null): elements.Model;
    /**
     * NOTE: this function must be edited in the partial template file.
     */
    private addElementById;
    /**
     * Gets the id of the matching built-in primitive type if the element type is a literal type.
     * NOTE: this function must be edited in the partial template file.
     */
    private static getTypeIdIfLiteralType;
    /**
   * Custom function to create element properties from tagged values.
   * NOTE: this function must be edited in the partial template file.
   */
    private mapTaggedValues;
    private createVisibilityKind;
    private mapElement;
    private resolveElementReferences;
    private mapNamedElement;
    private mapTypedElement;
    private resolveTypedElementReferences;
    private createValueSpecification;
    private static isValueSpecification;
    private mapPackageableElement;
    private createPackageableElement;
    private static isPackageableElement;
    private mapType;
    private mapTaggedValueSpecification;
    private resolveTaggedValueSpecificationReferences;
    private createTaggedValueSpecification;
    private mapRedefinableElement;
    private mapClassifier;
    private mapMultiplicityElement;
    private mapOrderedElement;
    private mapFeature;
    private mapStructuralFeature;
    private mapStereotypeExtension;
    private createStereotypeExtension;
    private mapMemberedClassifier;
    private mapBehavioredClassifier;
    private mapClass;
    private createClass;
    private mapStereotype;
    private createStereotype;
    private mapProperty;
    private createProperty;
    private mapPackage;
    private resolvePackageReferences;
    private createPackage;
    private mapProfile;
    private createProfile;
    private createDataType;
    private createPrimitiveType;
    private createParameterDirectionKind;
    private mapParameter;
    private createParameter;
    private mapBehavioralFeature;
    private mapOperation;
    private createOperation;
    private createModel;
    private mapLiteralUnlimitedNatural;
    private createLiteralUnlimitedNatural;
    private mapLiteralString;
    private createLiteralString;
    private mapLiteralReal;
    private createLiteralReal;
    private createLiteralNull;
    private mapLiteralInteger;
    private createLiteralInteger;
    private mapLiteralBoolean;
    private createLiteralBoolean;
    private mapInterfaceRealization;
    private resolveInterfaceRealizationReferences;
    private createInterfaceRealization;
    private createInterface;
    private mapGeneralization;
    private resolveGeneralizationReferences;
    private createGeneralization;
    private mapEnumerationLiteral;
    private createEnumerationLiteral;
    private mapEnumeration;
    private resolveEnumerationReferences;
    private createEnumeration;
    private mapDocumentReference;
    private createDocumentReference;
    private createDocumentLocationKind;
    private mapComment;
    private createComment;
    private mapAssociation;
    private resolveAssociationReferences;
    private createAssociation;
    private createAggregationKind;
}
