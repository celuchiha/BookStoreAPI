import * as elements from '@yellicode/elements';
import { ClassDefinition, InterfaceDefinition, EnumDefinition, PropertyDefinition, AccessModifier, FunctionDefinition } from './model';
import * as opts from './options';
export declare class DefinitionBuilder {
    private typeNameProvider;
    constructor(typeNameProvider: elements.TypeNameProvider);
    buildClassDefinition(type: elements.Type, options?: opts.ClassOptions): ClassDefinition;
    buildInterfaceDefinition(type: elements.Type, options?: opts.InterfaceOptions): InterfaceDefinition;
    buildEnumDefinition(type: elements.Type, options?: opts.EnumOptions): EnumDefinition;
    buildFunctionDefinition(op: elements.Operation, options?: opts.FunctionOptions): FunctionDefinition;
    private buildParameterDefinition;
    buildPropertyDefinition(property: elements.Property, options?: opts.PropertyOptions): PropertyDefinition;
    private static buildImplements;
    private static buildExtends;
    private static buildDescription;
    static getDefaultValueString(element: elements.MultiplicityElement, tsTypeName: string | null, defaultValue: elements.ValueSpecification | null, isOptional: boolean, optionalityModifier: opts.OptionalityModifier, initializePrimitiveType?: boolean, initializeArray?: boolean): string | undefined;
    private getFullTypeName;
    static getAccessModifierString(visibility: elements.VisibilityKind | null): AccessModifier | undefined;
}
