import * as elements from '@yellicode/elements';
import * as opts from './options';
import { CodeWriter, TextWriter } from '@yellicode/core';
import { ClassDefinition, InterfaceDefinition, EnumDefinition, PropertyDefinition, FunctionDefinition } from './model';
/**
 * Provides code writing functionality specific for TypeScript.
 */
export declare class TypeScriptWriter extends CodeWriter {
    private typeNameProvider;
    private definitionBuilder;
    maxCommentWidth: number;
    constructor(writer: TextWriter, options?: opts.WriterOptions);
    /**
     * Writes a block of code wrapped in a #region block.
     */
    writeRegionBlock(name: string, contents: (writer: TypeScriptWriter) => void): this;
    /**
     * Writes an import statement that imports the specified exports from the
     * specified module.
     * @param moduleName The module to import from.
     * @param exports The name(s) of the export(s) to be imported.
     * @param alias The alias under which the module should be imported.
     */
    writeImports(moduleName: string, alias: string): this;
    writeImports(moduleName: string, ...exports: any[]): this;
    /**
    * Writes an indented block of decorator code, wrapped in opening and closing brackets.
    * @param contents A callback function that writes the contents.
    */
    writeDecoratorCodeBlock(decoratorName: string, contents: (writer: TypeScriptWriter) => void): this;
    /**
    * Writes an indented block of code, wrapped in opening and closing brackets.
    * @param contents A callback function that writes the contents.
    */
    writeCodeBlock(contents: (writer: TypeScriptWriter) => void): this;
    /**
    * Writes a block of code, wrapped in a class declaration and opening and closing brackets.
    * This function does not write class members.
    * @param definition The class definition.
    * @param contents A callback function that writes the class contents.
    */
    writeClassBlock(cls: ClassDefinition, contents: (writer: TypeScriptWriter) => void): this;
    /**
     * Writes a block of code, wrapped in a class declaration and opening and closing brackets.
    * This function does not write class members.
    * @param type A model type from which to create the class block.
    * @param contents A callback function that writes the class contents.
    * @param options An optional ClassOptions object.
    */
    writeClassBlock(cls: elements.Type, contents: (writer: TypeScriptWriter) => void, options?: opts.ClassOptions): this;
    /**
      * Writes a block of code, wrapped in an interface declaration and opening and closing brackets.
      * This function does not write interface members.
      * @param iface The interface.
      * @param contents A callback function that writes the interface contents.
      */
    writeInterfaceBlock(iface: InterfaceDefinition, contents: (writer: TypeScriptWriter) => void): this;
    /**
     * Writes a block of code, wrapped in an interface declaration and opening and closing brackets.
     * This function does not write interface members.
     * @param type A model type from which to create the interface block.
     * @param contents A callback function that writes the interface contents.
     * @param options An optional InterfaceOptions object.
     */
    writeInterfaceBlock(iface: elements.Type, contents: (writer: TypeScriptWriter) => void, options?: opts.InterfaceOptions): this;
    /**
     * Writes a property from the property definition.
     * @param property
     */
    writeProperty(property: PropertyDefinition): this;
    /**
     * Writes a class or interface property.
     * @param property The property to write.
     * @param options An optional PropertyOptions object.
     */
    writeProperty(property: elements.Property, options?: opts.PropertyOptions): this;
    /**
    * Writes a full enumeration, including members.
    * @param element The enumeration.
    */
    writeEnumeration(enumeration: EnumDefinition): this;
    /**
    * Writes a full enumeration, including members.
    * @param element The enumeration.
    * @param options An optional EnumerationOptions object.
    */
    writeEnumeration(enumeration: elements.Enumeration, options?: opts.EnumOptions): this;
    /**
     * Writes a string literal type from a specified enumeration. Example: 'type Easing = 'ease-in' | 'ease-out' | 'ease-in-out';'
     * @param enumeration The enumeration.
     * @param prefix An optional prefix, such as 'export'.
     */
    writeStringLiteralType(enumeration: elements.Enumeration, options?: opts.StringLiteralOptions): this;
    /**
     * Writes a function declaration without a body.
     * @param operation The function definition.
     */
    writeFunctionDeclaration(funct: FunctionDefinition): this;
    /**
     * Writes a function declaration without a body.
     * @param operation The operation.
     * @param options An optional FunctionOptions object.
     */
    writeFunctionDeclaration(operation: elements.Operation, options?: opts.FunctionOptions): this;
    /**
    * Writes a block of code, wrapped in an function declaration and opening and closing brackets.
    * @param func The operation.
    * @param contents A callback that writes the operation contents.
    */
    writeFunctionBlock(func: FunctionDefinition, contents: (writer: TypeScriptWriter, op: elements.Operation) => void): this;
    /**
    * Writes a block of code, wrapped in an function declaration and opening and closing brackets.
    * @param operation The operation.
    * @param contents A callback that writes the operation contents.
    * @param options An optional FunctionOptions object.
    */
    writeFunctionBlock(operation: elements.Operation, contents: (writer: TypeScriptWriter, op: elements.Operation) => void, options?: opts.FunctionOptions): this;
    /**
     * Gets the name of the type. This function uses the current typeNameProvider for resolving
     * the type name.
     * @param type Any element that derives from Type.
     */
    getTypeName(type: elements.Type | null): string | null;
    /**
    * Gets the type name of the typed element. This function uses the current typeNameProvider for resolving
    * the type name.
    * @param typedElement Any element that has a type, such as a Property or Parameter.
    */
    getTypeName(typedElement: elements.TypedElement | null): string | null;
    private writeFunctionStart;
    private writeInOutParameters;
    private writeExtends;
    private writeImplements;
    private pushJsDocLinesFromComments;
    private pushJsDocLinesForParameters;
    private getJsDocLineForParameter;
    writeJsDocDescription(comments: elements.Comment[]): this;
    writeJsDocDescription(text: string): this;
    writeJsDocParagraph(text: string): this;
    writeJsDocLines(lines: string[]): this;
    private joinWrite;
    /**
     * Makes a TypeScript safe alias for a ES6 module name.
     */
    private static makeSafeModuleName;
}
