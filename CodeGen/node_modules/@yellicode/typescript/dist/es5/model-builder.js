import * as elements from '@yellicode/elements';
import * as opts from './options';
import { TypeUtility } from './type-utility';
var TypeScriptModelBuilder = /** @class */ (function () {
    function TypeScriptModelBuilder() {
    }
    TypeScriptModelBuilder.buildClassDefinition = function (type, options) {
        if (!options)
            options = {};
        var definition = { name: type.name };
        var features = (options.features === undefined) ? opts.ClassFeatures.All : options.features;
        // Handle deprecated stuff
        if (options.prefix) {
            console.warn("The 'prefix' option is deprecated. Use the 'export' or 'declare' option instead.");
            if (options.prefix === 'export') {
                options.export = true;
            }
            else if (options.prefix === 'declare') {
                options.declare = true;
            }
        }
        // Description
        if ((features & opts.ClassFeatures.JsDocDescription) && type.ownedComments) {
            definition.description = TypeScriptModelBuilder.buildDescription(type);
        }
        // Generalizations
        if (elements.isClassifier(type)) {
            if (features & opts.ClassFeatures.Generalizations) {
                definition.extends = TypeScriptModelBuilder.buildExtends(type, options.inherits);
            }
        }
        if (elements.isClass(type)) {
            // Abstract
            definition.isAbstract = type.isAbstract;
            // InterfaceRealizations
            if (features & opts.ClassFeatures.InterfaceRealizations) {
                definition.implements = TypeScriptModelBuilder.buildImplements(type, options.implements);
            }
        }
        // Declare
        definition.declare = options.declare;
        // Export
        if (options.export == undefined) {
            definition.export = type.visibility === elements.VisibilityKind.public || type.visibility === elements.VisibilityKind.package;
        }
        else
            definition.export = options.export;
        return definition;
    };
    TypeScriptModelBuilder.buildInterfaceDefinition = function (type, options) {
        if (!options)
            options = {};
        var definition = { name: type.name };
        var features = (options.features === undefined) ? opts.InterfaceFeatures.All : options.features;
        // Handle deprecated stuff
        if (options.prefix) {
            console.warn("The 'prefix' option is deprecated. Use the 'export' or 'declare' option instead.");
            if (options.prefix === 'export') {
                options.export = true;
            }
            else if (options.prefix === 'declare') {
                options.declare = true;
            }
        }
        // Description
        if ((features & opts.InterfaceFeatures.JsDocDescription) && type.ownedComments) {
            definition.description = TypeScriptModelBuilder.buildDescription(type);
        }
        // Generalizations
        if (elements.isClassifier(type)) {
            if (features & opts.InterfaceFeatures.Generalizations) {
                definition.extends = TypeScriptModelBuilder.buildExtends(type, options.inherits);
            }
        }
        // Declare
        definition.declare = options.declare;
        // Export
        if (options.export == undefined) {
            definition.export = type.visibility === elements.VisibilityKind.public || type.visibility === elements.VisibilityKind.package;
        }
        else
            definition.export = options.export;
        return definition;
    };
    TypeScriptModelBuilder.buildEnumDefinition = function (type, options) {
        if (!options)
            options = {};
        var definition = { name: type.name };
        var features = (options.features === undefined) ? opts.EnumFeatures.All : options.features;
        // Handle deprecated stuff
        if (options.prefix) {
            console.warn("The 'prefix' option is deprecated. Use the 'export' or 'declare' option instead.");
            if (options.prefix === 'export') {
                options.export = true;
            }
            else if (options.prefix === 'declare') {
                options.declare = true;
            }
        }
        // Description
        if ((features & opts.EnumFeatures.JsDocDescription) && type.ownedComments) {
            definition.description = TypeScriptModelBuilder.buildDescription(type);
        }
        // Declare
        definition.declare = options.declare;
        // Export
        if (options.export == undefined) {
            definition.export = type.visibility === elements.VisibilityKind.public || type.visibility === elements.VisibilityKind.package;
        }
        else
            definition.export = options.export;
        // Literals
        if (elements.isEnumeration(type) && type.ownedLiterals && type.ownedLiterals.length) {
            var members_1 = [];
            var buildInitializers_1 = !!(features & opts.EnumFeatures.Initializers);
            type.ownedLiterals.forEach(function (literal) {
                var member = { name: literal.name };
                if (features & opts.EnumFeatures.JsDocDescription) {
                    member.description = TypeScriptModelBuilder.buildDescription(literal);
                }
                if (buildInitializers_1 && literal.specification) {
                    var specification = literal.specification;
                    member.value = elements.isLiteralInteger(specification)
                        ? specification.value
                        : specification.getStringValue();
                }
                members_1.push(member);
            });
            definition.members = members_1;
        }
        return definition;
    };
    TypeScriptModelBuilder.buildImplements = function (cls, additional) {
        var allNames = [];
        if (cls.interfaceRealizations) {
            allNames.push.apply(allNames, cls.interfaceRealizations.map(function (ir) { return ir.contract.name; }));
        }
        if (additional) {
            allNames.push.apply(allNames, additional);
        }
        return allNames;
    };
    TypeScriptModelBuilder.buildExtends = function (type, additional) {
        var allNames = [];
        if (type.generalizations) {
            allNames.push.apply(allNames, type.generalizations.map(function (g) { return g.general.name; }));
        }
        if (additional) {
            allNames.push.apply(allNames, additional);
        }
        return allNames;
    };
    TypeScriptModelBuilder.buildDescription = function (type) {
        return type.ownedComments.map(function (c) { return c.body; });
    };
    TypeScriptModelBuilder.getDefaultValueString = function (element, typeName, defaultValue, isOptional, optionalityModifier, initializePrimitiveType, initializeArray) {
        var isPrimitive = TypeUtility.isPrimitiveType(typeName);
        var valueIfOptional = optionalityModifier == opts.OptionalityModifier.NullKeyword ? 'null' : null;
        if (element.isMultivalued()) {
            // The element is an array (of a complex type or a primitive)
            if (initializeArray) {
                return isOptional ? valueIfOptional : '[]';
            }
            else
                return null;
        }
        else if (isPrimitive) {
            if (defaultValue) {
                // The type is a primitive having a default value in the model
                return elements.isLiteralString(defaultValue) ? "'" + defaultValue.value + "'" : defaultValue.getStringValue();
            }
            else if (initializePrimitiveType) {
                // The type is a primitive having no default value in the model
                if (isOptional) {
                    return valueIfOptional;
                }
                else
                    return TypeUtility.getPrimitiveTypeDefault(typeName);
            }
        }
        else {
            // The element is not a primitive and no array, so it is a complex type.
            // If optionalityModifier is NullKeyword, use it.
            if (isOptional && optionalityModifier == opts.OptionalityModifier.NullKeyword) {
                return valueIfOptional;
            }
        }
        return null;
    };
    return TypeScriptModelBuilder;
}());
export { TypeScriptModelBuilder };
//# sourceMappingURL=data:application/json;base64,