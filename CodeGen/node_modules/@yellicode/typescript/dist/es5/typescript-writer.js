var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as elements from '@yellicode/elements';
import { CodeWriter, NameUtility, CodeWriterUtility } from '@yellicode/core';
import { TypeScriptTypeNameProvider } from './typescript-type-name-provider';
import { DefinitionBuilder } from './definition-builder';
/**
 * Provides code writing functionality specific for TypeScript.
 */
var TypeScriptWriter = /** @class */ (function (_super) {
    __extends(TypeScriptWriter, _super);
    function TypeScriptWriter(writer, options) {
        var _this = _super.call(this, writer) || this;
        if (!options)
            options = {};
        _this.typeNameProvider = options.typeNameProvider || new TypeScriptTypeNameProvider();
        _this.definitionBuilder = new DefinitionBuilder(_this.typeNameProvider);
        _this.maxCommentWidth = options.maxCommentWidth || 100;
        return _this;
    }
    /**
     * Writes a block of code wrapped in a #region block.
     */
    TypeScriptWriter.prototype.writeRegionBlock = function (name, contents) {
        this.writeLine("//#region " + name);
        contents(this);
        this.writeLine("//#endregion " + name);
        return this;
    };
    TypeScriptWriter.prototype.writeImports = function (moduleName, x) {
        if (!moduleName)
            return this;
        // Ensure forward slashes in the module name
        moduleName = moduleName.replace(/\\/g, "/");
        if (x instanceof Array) {
            if (x.length === 0)
                return this;
            this.writeLine("import { " + x.join(', ') + " } from '" + moduleName + "';");
            return this;
        }
        // x is the alias
        if (!x) {
            x = TypeScriptWriter.makeSafeModuleName(moduleName);
        }
        this.writeLine("import * as " + x + " from '" + moduleName + "';");
        return this;
    };
    /**
    * Writes an indented block of decorator code, wrapped in opening and closing brackets.
    * @param contents A callback function that writes the contents.
    */
    TypeScriptWriter.prototype.writeDecoratorCodeBlock = function (decoratorName, contents) {
        this.writeLine("@" + decoratorName + "({");
        this.increaseIndent();
        if (contents)
            contents(this);
        this.decreaseIndent();
        this.writeLine('})');
        return this;
    };
    /**
    * Writes an indented block of code, wrapped in opening and closing brackets.
    * @param contents A callback function that writes the contents.
    */
    TypeScriptWriter.prototype.writeCodeBlock = function (contents) {
        this.writeLine('{');
        this.increaseIndent();
        if (contents)
            contents(this);
        this.decreaseIndent();
        this.writeLine('}');
        return this;
    };
    ;
    TypeScriptWriter.prototype.writeClassBlock = function (cls, contents, options) {
        if (!cls)
            return this;
        var definition;
        if (elements.isType(cls)) {
            definition = this.definitionBuilder.buildClassDefinition(cls, options);
        }
        else
            definition = cls;
        if (definition.description) {
            this.writeJsDocLines(definition.description);
        }
        this.writeIndent();
        if (definition.export) {
            this.write("export ");
        }
        if (definition.declare) {
            this.write('declare ');
        }
        if (definition.isAbstract) {
            this.write('abstract ');
        }
        this.write("class " + definition.name);
        if (definition.extends) {
            this.writeExtends(definition.extends);
        }
        if (definition.implements) {
            this.writeImplements(definition.implements);
        }
        // Write the contents
        this.writeEndOfLine(' {');
        this.increaseIndent();
        if (contents)
            contents(this);
        this.decreaseIndent();
        this.writeLine('}');
        return this;
    };
    TypeScriptWriter.prototype.writeInterfaceBlock = function (iface, contents, options) {
        if (!iface)
            return this;
        var definition;
        if (elements.isType(iface)) {
            definition = this.definitionBuilder.buildInterfaceDefinition(iface, options);
        }
        else
            definition = iface;
        if (definition.description) {
            this.writeJsDocLines(definition.description);
        }
        this.writeIndent();
        if (definition.export) {
            this.write("export ");
        }
        if (definition.declare) {
            this.write('declare ');
        }
        this.write("interface " + definition.name);
        if (definition.extends) {
            this.writeExtends(definition.extends);
        }
        // Write the contents
        this.writeEndOfLine(' {');
        this.increaseIndent();
        if (contents)
            contents(this);
        this.decreaseIndent();
        this.writeLine('}');
        return this;
    };
    TypeScriptWriter.prototype.writeProperty = function (property, options) {
        if (!property)
            return this;
        var definition;
        if (elements.isProperty(property)) {
            definition = this.definitionBuilder.buildPropertyDefinition(property, options);
        }
        else
            definition = property;
        var hasDefaultValue = definition.defaultValue != null; // '!= null' to allow for empty strings
        // Description
        if (definition.description) {
            this.writeJsDocLines(definition.description);
        }
        // Start a new, indented line        
        this.writeIndent();
        // Access modifier 
        if (definition.accessModifier) {
            this.write(definition.accessModifier + " ");
        }
        // Static modifier        
        if (definition.isStatic) {
            this.write('static ');
        }
        // Readonly modifier
        if (definition.isReadonly) {
            this.write('readonly ');
        }
        // Name
        this.write(property.name);
        if (definition.isOptional && !definition.hasNullUnionType) {
            this.write('?');
        }
        if (!hasDefaultValue && !definition.isOptional && definition.useDefiniteAssignmentAssertionModifier) {
            this.write('!');
        }
        // Type
        this.write(": " + definition.typeName);
        if (definition.isOptional && definition.hasNullUnionType) {
            this.write(' | null');
        }
        // Initializer
        if (hasDefaultValue) {
            this.write(" = " + definition.defaultValue);
        }
        this.writeEndOfLine(';');
        return this;
    };
    TypeScriptWriter.prototype.writeEnumeration = function (enumeration, options) {
        if (!enumeration)
            return this;
        var definition;
        if (elements.isType(enumeration)) {
            definition = this.definitionBuilder.buildEnumDefinition(enumeration, options);
        }
        else
            definition = enumeration;
        if (definition.description) {
            this.writeJsDocLines(definition.description);
        }
        this.writeIndent();
        if (definition.export) {
            this.write("export ");
        }
        if (definition.declare) {
            this.write('declare ');
        }
        this.write("enum " + enumeration.name);
        this.writeEndOfLine(' {');
        this.increaseIndent();
        if (!definition.members)
            return this;
        for (var i = 0, len = definition.members.length; i < len; i++) {
            var member = definition.members[i];
            if (member.description) {
                this.writeJsDocLines(member.description);
            }
            this.writeIndent();
            this.write(member.name);
            if (member.value || member.value === 0) {
                var initialValue = (typeof member.value === "number") ?
                    member.value.toString() : "'" + member.value + "'"; // a string enum: wrap in quotes
                this.write(" = " + initialValue);
            }
            if (i < len - 1) {
                this.write(',');
            }
            this.writeEndOfLine();
        }
        this.decreaseIndent();
        this.writeLine('}');
        return this;
    };
    /**
     * Writes a string literal type from a specified enumeration. Example: 'type Easing = 'ease-in' | 'ease-out' | 'ease-in-out';'
     * @param enumeration The enumeration.
     * @param prefix An optional prefix, such as 'export'.
     */
    TypeScriptWriter.prototype.writeStringLiteralType = function (enumeration, options) {
        if (!enumeration)
            return this;
        if (!options)
            options = {};
        this.writeJsDocDescription(enumeration.ownedComments);
        this.writeIndent();
        if (options.export) {
            this.write("export ");
        }
        if (options.declare) {
            this.write('declare ');
        }
        this.write("type " + enumeration.name + " = ");
        this.joinWrite(enumeration.ownedLiterals, ' | ', function (lit) { return "'" + lit.name + "'"; });
        this.writeEndOfLine(';');
        return this;
    };
    TypeScriptWriter.prototype.writeFunctionDeclaration = function (func, options) {
        if (!func)
            return this;
        var definition;
        if (elements.isOperation(func)) {
            definition = this.definitionBuilder.buildFunctionDefinition(func, options);
        }
        else
            definition = func;
        this.writeFunctionStart(definition);
        this.writeEndOfLine(';');
        return this;
    };
    TypeScriptWriter.prototype.writeFunctionBlock = function (func, contents, options) {
        if (!func)
            return this;
        var definition;
        if (elements.isOperation(func)) {
            definition = this.definitionBuilder.buildFunctionDefinition(func, options);
        }
        else
            definition = func;
        this.writeFunctionStart(definition);
        if (definition.isAbstract) {
            this.writeEndOfLine(';');
            return this;
        }
        this.writeEndOfLine();
        this.writeCodeBlock(function (writer) { contents(writer, func); });
        return this;
    };
    TypeScriptWriter.prototype.getTypeName = function (element) {
        if (!element)
            return null;
        if (elements.isTypedElement(element)) {
            return this.typeNameProvider ? this.typeNameProvider.getTypeName(element) : element.getTypeName();
        }
        else if (elements.isType(element)) {
            return this.typeNameProvider ? this.typeNameProvider.getTypeName(element) : element.name;
        }
        return null;
    };
    TypeScriptWriter.prototype.writeFunctionStart = function (definition) {
        // jsDoc tags 
        var jsDocLines = [];
        if (definition.description) {
            jsDocLines.push.apply(jsDocLines, definition.description);
        }
        if (definition.parameters) {
            this.pushJsDocLinesForParameters(definition.parameters, jsDocLines);
        }
        this.writeJsDocLines(jsDocLines);
        // TODO: export, declare?!
        // if (definition.export) {
        //     this.write(`export `);
        // }
        // if (definition.declare) {
        //     this.write('declare ');
        // }
        // Start a new, indented line
        this.writeIndent();
        // Access modifier 
        if (definition.accessModifier) {
            this.write(definition.accessModifier + " ");
        }
        // Static modifier                
        if (definition.isStatic) {
            this.write('static ');
        }
        else if (definition.isAbstract) {
            this.write('abstract ');
        }
        this.write(definition.name);
        // If needed, make the function optional using the '?'         
        // if (definition.isOptional) {
        //     this.write('?');
        // }
        this.write('(');
        if (definition.parameters) {
            this.writeInOutParameters(definition.parameters);
        }
        this.write('): ');
        // Write the return type                
        this.write(definition.returnTypeName || 'void');
        if (definition.returnsOptional) {
            this.write(' | null');
        }
    };
    TypeScriptWriter.prototype.writeInOutParameters = function (parameters) {
        var _this = this;
        var i = 0;
        parameters.forEach(function (p) {
            if (p.isReturn)
                return;
            if (i > 0) {
                _this.write(', ');
            }
            _this.write(p.name);
            if (p.isOptional && (p.useQuestionToken)) {
                _this.write('?');
            }
            _this.write(": " + p.typeName);
            if (p.isOptional && !p.useQuestionToken) {
                _this.write(' | null');
            }
            i++;
        });
    };
    TypeScriptWriter.prototype.writeExtends = function (ext) {
        if (ext.length === 0)
            return;
        this.write(' extends ');
        this.joinWrite(ext, ', ', function (name) { return name; });
    };
    TypeScriptWriter.prototype.writeImplements = function (impl) {
        if (impl.length === 0)
            return;
        this.write(' implements ');
        this.joinWrite(impl, ', ', function (name) { return name; });
    };
    TypeScriptWriter.prototype.pushJsDocLinesFromComments = function (comments, lines) {
        if (!comments)
            return;
        var i = 0;
        comments.forEach(function (p) {
            if (!p.body) {
                return;
            }
            if (i > 0) {
                lines.push(''); // add a blank line
            }
            lines.push(p.body);
            i++;
        });
    };
    TypeScriptWriter.prototype.pushJsDocLinesForParameters = function (parameters, lines) {
        var _this = this;
        if (!parameters)
            return;
        parameters.forEach(function (p) {
            lines.push(_this.getJsDocLineForParameter(p));
        });
    };
    TypeScriptWriter.prototype.getJsDocLineForParameter = function (parameter) {
        var tag = parameter.isReturn ? 'returns' : 'param';
        var line = "@" + tag + " {" + parameter.typeName + "}";
        if (!parameter.isReturn) {
            line = line + " " + parameter.name;
        }
        if (parameter.description && parameter.description.length > 0) {
            line = line + " " + parameter.description.join(' ');
        }
        return line;
    };
    TypeScriptWriter.prototype.writeJsDocDescription = function (data) {
        var lines = [];
        if (typeof data == 'string') {
            lines.push(data);
        }
        else {
            this.pushJsDocLinesFromComments(data, lines);
        }
        this.writeJsDocLines(lines);
        return this;
    };
    TypeScriptWriter.prototype.writeJsDocParagraph = function (text) {
        this.writeJsDocLines([text]);
        return this;
    };
    TypeScriptWriter.prototype.writeJsDocLines = function (lines) {
        var _this = this;
        if (lines.length === 0)
            return this;
        this.writeLine('/**');
        // Split here
        lines.forEach(function (line) {
            var lineLength = line ? line.length : 0;
            if (_this.maxCommentWidth > 0 && lineLength > _this.maxCommentWidth) {
                // See if we can split the line
                var split = CodeWriterUtility.wordWrap(line, _this.maxCommentWidth);
                split.forEach(function (s) {
                    _this.writeLine("* " + s);
                });
            }
            else
                _this.writeLine("* " + line);
        });
        this.writeLine('*/');
        return this;
    };
    TypeScriptWriter.prototype.joinWrite = function (collection, separator, getStringFunc) {
        var _this = this;
        var isFirst = true;
        collection.forEach(function (c) {
            var value = getStringFunc(c);
            if (!value)
                return;
            if (isFirst) {
                isFirst = false;
            }
            else
                _this.write(separator);
            _this.write(value);
        });
    };
    /**
     * Makes a TypeScript safe alias for a ES6 module name.
     */
    TypeScriptWriter.makeSafeModuleName = function (moduleName) {
        if (moduleName.startsWith('@')) {
            moduleName = moduleName.substring(1);
        }
        var parts = moduleName.split('/');
        if (parts.length > 1) {
            // Make the module name lowerCamelCase, e.g. rename myScope/myModule to myScopeMyModule
            moduleName = NameUtility.upperToLowerCamelCase(parts[0]);
            parts.forEach(function (p, i) {
                if (i > 0) {
                    moduleName += NameUtility.lowerToUpperCamelCase(p);
                }
            });
        }
        return moduleName;
    };
    return TypeScriptWriter;
}(CodeWriter));
export { TypeScriptWriter };
//# sourceMappingURL=data:application/json;base64,