import * as elements from '@yellicode/elements';
import * as opts from './options';
import { TypeUtility } from './type-utility';
var DefinitionBuilder = /** @class */ (function () {
    function DefinitionBuilder(typeNameProvider) {
        this.typeNameProvider = typeNameProvider;
    }
    DefinitionBuilder.prototype.buildClassDefinition = function (type, options) {
        if (!options)
            options = {};
        var definition = { name: type.name };
        var features = (options.features === undefined) ? opts.ClassFeatures.All : options.features;
        // Handle deprecated stuff
        if (options.prefix) {
            console.warn("The 'prefix' option is deprecated. Use the 'export' or 'declare' option instead.");
            if (options.prefix === 'export') {
                options.export = true;
            }
            else if (options.prefix === 'declare') {
                options.declare = true;
            }
        }
        // Description
        if ((features & opts.ClassFeatures.JsDocDescription) && type.ownedComments) {
            definition.description = DefinitionBuilder.buildDescription(type);
        }
        // Generalizations
        if (elements.isClassifier(type)) {
            if (features & opts.ClassFeatures.Generalizations) {
                definition.extends = DefinitionBuilder.buildExtends(type, options.inherits);
            }
        }
        if (elements.isClass(type)) {
            // Abstract
            definition.isAbstract = type.isAbstract;
            // InterfaceRealizations
            if (features & opts.ClassFeatures.InterfaceRealizations) {
                definition.implements = DefinitionBuilder.buildImplements(type, options.implements);
            }
        }
        // Declare
        definition.declare = options.declare;
        // Export
        if (options.export == undefined) {
            definition.export = type.visibility === elements.VisibilityKind.public || type.visibility === elements.VisibilityKind.package;
        }
        else
            definition.export = options.export;
        return definition;
    };
    DefinitionBuilder.prototype.buildInterfaceDefinition = function (type, options) {
        if (!options)
            options = {};
        var definition = { name: type.name };
        var features = (options.features === undefined) ? opts.InterfaceFeatures.All : options.features;
        // Handle deprecated stuff
        if (options.prefix) {
            console.warn("The 'prefix' option is deprecated. Use the 'export' or 'declare' option instead.");
            if (options.prefix === 'export') {
                options.export = true;
            }
            else if (options.prefix === 'declare') {
                options.declare = true;
            }
        }
        // Description
        if ((features & opts.InterfaceFeatures.JsDocDescription) && type.ownedComments) {
            definition.description = DefinitionBuilder.buildDescription(type);
        }
        // Generalizations
        if (elements.isClassifier(type)) {
            if (features & opts.InterfaceFeatures.Generalizations) {
                definition.extends = DefinitionBuilder.buildExtends(type, options.inherits);
            }
        }
        // Declare
        definition.declare = options.declare;
        // Export
        if (options.export == undefined) {
            definition.export = type.visibility === elements.VisibilityKind.public || type.visibility === elements.VisibilityKind.package;
        }
        else
            definition.export = options.export;
        return definition;
    };
    DefinitionBuilder.prototype.buildEnumDefinition = function (type, options) {
        if (!options)
            options = {};
        var definition = { name: type.name };
        var features = (options.features === undefined) ? opts.EnumFeatures.All : options.features;
        // Handle deprecated stuff
        if (options.prefix) {
            console.warn("The 'prefix' option is deprecated. Use the 'export' or 'declare' option instead.");
            if (options.prefix === 'export') {
                options.export = true;
            }
            else if (options.prefix === 'declare') {
                options.declare = true;
            }
        }
        // Description
        if ((features & opts.EnumFeatures.JsDocDescription) && type.ownedComments) {
            definition.description = DefinitionBuilder.buildDescription(type);
        }
        // Declare
        definition.declare = options.declare;
        // Export
        if (options.export == undefined) {
            definition.export = type.visibility === elements.VisibilityKind.public || type.visibility === elements.VisibilityKind.package;
        }
        else
            definition.export = options.export;
        // Literals
        if (elements.isEnumeration(type) && type.ownedLiterals && type.ownedLiterals.length) {
            var members_1 = [];
            var buildInitializers_1 = !!(features & opts.EnumFeatures.Initializers);
            type.ownedLiterals.forEach(function (literal) {
                var member = { name: literal.name };
                if (features & opts.EnumFeatures.JsDocDescription) {
                    member.description = DefinitionBuilder.buildDescription(literal);
                }
                if (buildInitializers_1 && literal.specification) {
                    var specification = literal.specification;
                    member.value = elements.isLiteralInteger(specification)
                        ? specification.value
                        : specification.getStringValue();
                }
                members_1.push(member);
            });
            definition.members = members_1;
        }
        return definition;
    };
    DefinitionBuilder.prototype.buildFunctionDefinition = function (op, options) {
        var _this = this;
        if (!options)
            options = {};
        var definition = { name: op.name };
        var features = (options.features === undefined) ? opts.FunctionFeatures.All : options.features;
        var paramFeatures = (options.parameterFeatures === undefined) ? opts.ParameterFeatures.All : options.parameterFeatures;
        var paramOptionality = (options.parameterOptionality === undefined) ? opts.OptionalityModifier.NullKeyword : options.parameterOptionality;
        var isOwnedByInterface = elements.isInterface(op.owner);
        // Description
        if ((features & opts.FunctionFeatures.JsDocDescription) && op.ownedComments) {
            definition.description = DefinitionBuilder.buildDescription(op);
        }
        // Access modifier
        if ((features & opts.PropertyFeatures.AccessModifier) && !isOwnedByInterface) {
            definition.accessModifier = DefinitionBuilder.getAccessModifierString(op.visibility);
        }
        definition.isAbstract = !isOwnedByInterface && op.isAbstract && !op.isConstructor;
        definition.isStatic = op.isStatic;
        // Return type 
        var returnParameter = op.getReturnParameter();
        if (returnParameter) {
            var makeOptional = returnParameter.isOptional() ? !!(features & opts.FunctionFeatures.OptionalModifier) : false;
            definition.returnTypeName = this.getFullTypeName(returnParameter);
            definition.returnsOptional = makeOptional;
        }
        // Input Parameters
        var parameters = [];
        op.ownedParameters.forEach(function (p) {
            var paramDefinition = _this.buildParameterDefinition(p, paramFeatures, paramOptionality);
            paramDefinition.isReturn = p.direction === elements.ParameterDirectionKind.return;
            parameters.push(paramDefinition);
        });
        definition.parameters = parameters;
        return definition;
    };
    DefinitionBuilder.prototype.buildParameterDefinition = function (p, features, optionalityModifier) {
        var tsTypeName = this.getFullTypeName(p, 'any');
        var definition = { name: p.name, typeName: tsTypeName };
        var makeOptional = p.isOptional() && !!(features & opts.ParameterFeatures.OptionalModifier);
        // Description
        if ((features & opts.ParameterFeatures.JsDocDescription) && p.ownedComments) {
            definition.description = DefinitionBuilder.buildDescription(p);
        }
        // Type
        definition.typeName = tsTypeName;
        // Optionality
        definition.isOptional = makeOptional;
        definition.useQuestionToken = makeOptional && !!(optionalityModifier & opts.OptionalityModifier.QuestionToken);
        return definition;
    };
    DefinitionBuilder.prototype.buildPropertyDefinition = function (property, options) {
        if (!options)
            options = {};
        var tsTypeName = this.getFullTypeName(property, 'any');
        var definition = { name: property.name, typeName: tsTypeName };
        var isOwnedByInterface = elements.isInterface(property.owner);
        var features = (options.features === undefined)
            ? (isOwnedByInterface ? opts.PropertyFeatures.AllInterfaceProperty : opts.PropertyFeatures.All)
            : options.features;
        var isOptional = property.isOptional() && !!(features & opts.PropertyFeatures.OptionalModifier);
        var optionalityModifier = (options.optionality === undefined) ? opts.OptionalityModifier.QuestionToken : options.optionality;
        var defaultValueString = ((features & opts.PropertyFeatures.Initializer) && !isOwnedByInterface) ?
            DefinitionBuilder.getDefaultValueString(property, tsTypeName, property.defaultValue, isOptional, optionalityModifier, options.initializePrimitiveType, options.initializeArray)
            : undefined;
        // Description
        if ((features & opts.PropertyFeatures.JsDocDescription) && property.ownedComments) {
            definition.description = DefinitionBuilder.buildDescription(property);
        }
        // Access modifier
        if ((features & opts.PropertyFeatures.AccessModifier) && !isOwnedByInterface) {
            definition.accessModifier = DefinitionBuilder.getAccessModifierString(property.visibility);
        }
        // Readonly modifier
        if ((features & opts.PropertyFeatures.ReadonlyModifier) && property.isReadOnly || property.isDerived) {
            definition.isReadonly = true;
        }
        // isStatic
        definition.isStatic = property.isStatic;
        // Optionality
        definition.isOptional = isOptional;
        if (isOptional && !!(optionalityModifier & opts.OptionalityModifier.NullKeyword)) {
            definition.hasNullUnionType = true;
        }
        // Use the definite definite assignment assertion modifier if the property is required and is not initialized        
        if (!isOptional && !defaultValueString && !isOwnedByInterface && !!(features & opts.PropertyFeatures.DefiniteAssignmentAssertionModifier)) {
            definition.useDefiniteAssignmentAssertionModifier = true;
        }
        // Default value
        definition.defaultValue = defaultValueString;
        return definition;
    };
    DefinitionBuilder.buildImplements = function (cls, additional) {
        var allNames = [];
        if (cls.interfaceRealizations) {
            allNames.push.apply(allNames, cls.interfaceRealizations.map(function (ir) { return ir.contract.name; }));
        }
        if (additional) {
            allNames.push.apply(allNames, additional);
        }
        return allNames;
    };
    DefinitionBuilder.buildExtends = function (type, additional) {
        var allNames = [];
        if (type.generalizations) {
            allNames.push.apply(allNames, type.generalizations.map(function (g) { return g.general.name; }));
        }
        if (additional) {
            allNames.push.apply(allNames, additional);
        }
        return allNames;
    };
    DefinitionBuilder.buildDescription = function (type) {
        return type.ownedComments.map(function (c) { return c.body; });
    };
    DefinitionBuilder.getDefaultValueString = function (element, tsTypeName, defaultValue, isOptional, optionalityModifier, initializePrimitiveType, initializeArray) {
        var isPrimitive = TypeUtility.isPrimitiveType(tsTypeName);
        var valueIfOptional = optionalityModifier == opts.OptionalityModifier.NullKeyword ? 'null' : undefined;
        if (element.isMultivalued()) {
            // The element is an array (of a complex type or a primitive)
            if (initializeArray) {
                return isOptional ? valueIfOptional : '[]';
            }
            else
                return undefined;
        }
        else if (isPrimitive) {
            if (defaultValue) {
                // The type is a primitive having a default value in the model
                return elements.isLiteralString(defaultValue) ? "'" + defaultValue.value + "'" : defaultValue.getStringValue();
            }
            else if (initializePrimitiveType) {
                // The type is a primitive having no default value in the model
                if (isOptional) {
                    return valueIfOptional;
                }
                // A required primitive element without default
                else
                    return TypeUtility.getPrimitiveTypeDefault(tsTypeName);
            }
        }
        else {
            // The element is not a primitive and no array, so it is a complex type.
            // If optionalityModifier is NullKeyword, use it.
            if (isOptional && optionalityModifier == opts.OptionalityModifier.NullKeyword) {
                return valueIfOptional;
            }
        }
        return undefined;
    };
    DefinitionBuilder.prototype.getFullTypeName = function (typedElement, fallback) {
        var typeName = this.typeNameProvider.getTypeName(typedElement) || fallback;
        if (!typeName)
            return; // no type name and no fallback
        if (elements.isMultiplicityElement(typedElement) && typedElement.isMultivalued()) {
            return typeName + "[]";
        }
        else
            return typeName;
    };
    DefinitionBuilder.getAccessModifierString = function (visibility) {
        switch (visibility) {
            case elements.VisibilityKind.public:
                return 'public';
            case elements.VisibilityKind.private:
                return 'private';
            case elements.VisibilityKind.protected:
                return 'protected';
            default:
                return undefined;
        }
    };
    return DefinitionBuilder;
}());
export { DefinitionBuilder };
//# sourceMappingURL=data:application/json;base64,