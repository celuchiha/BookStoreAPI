import * as elements from '@yellicode/elements';
import * as opts from './options';
import { TypeUtility } from './type-utility';
export class TypeScriptModelBuilder {
    static buildClassDefinition(type, options) {
        if (!options)
            options = {};
        const definition = { name: type.name };
        const features = (options.features === undefined) ? opts.ClassFeatures.All : options.features;
        // Handle deprecated stuff
        if (options.prefix) {
            console.warn(`The 'prefix' option is deprecated. Use the 'export' or 'declare' option instead.`);
            if (options.prefix === 'export') {
                options.export = true;
            }
            else if (options.prefix === 'declare') {
                options.declare = true;
            }
        }
        // Description
        if ((features & opts.ClassFeatures.JsDocDescription) && type.ownedComments) {
            definition.description = TypeScriptModelBuilder.buildDescription(type);
        }
        // Generalizations
        if (elements.isClassifier(type)) {
            if (features & opts.ClassFeatures.Generalizations) {
                definition.extends = TypeScriptModelBuilder.buildExtends(type, options.inherits);
            }
        }
        if (elements.isClass(type)) {
            // Abstract
            definition.isAbstract = type.isAbstract;
            // InterfaceRealizations
            if (features & opts.ClassFeatures.InterfaceRealizations) {
                definition.implements = TypeScriptModelBuilder.buildImplements(type, options.implements);
            }
        }
        // Declare
        definition.declare = options.declare;
        // Export
        if (options.export == undefined) {
            definition.export = type.visibility === elements.VisibilityKind.public || type.visibility === elements.VisibilityKind.package;
        }
        else
            definition.export = options.export;
        return definition;
    }
    static buildInterfaceDefinition(type, options) {
        if (!options)
            options = {};
        const definition = { name: type.name };
        const features = (options.features === undefined) ? opts.InterfaceFeatures.All : options.features;
        // Handle deprecated stuff
        if (options.prefix) {
            console.warn(`The 'prefix' option is deprecated. Use the 'export' or 'declare' option instead.`);
            if (options.prefix === 'export') {
                options.export = true;
            }
            else if (options.prefix === 'declare') {
                options.declare = true;
            }
        }
        // Description
        if ((features & opts.InterfaceFeatures.JsDocDescription) && type.ownedComments) {
            definition.description = TypeScriptModelBuilder.buildDescription(type);
        }
        // Generalizations
        if (elements.isClassifier(type)) {
            if (features & opts.InterfaceFeatures.Generalizations) {
                definition.extends = TypeScriptModelBuilder.buildExtends(type, options.inherits);
            }
        }
        // Declare
        definition.declare = options.declare;
        // Export
        if (options.export == undefined) {
            definition.export = type.visibility === elements.VisibilityKind.public || type.visibility === elements.VisibilityKind.package;
        }
        else
            definition.export = options.export;
        return definition;
    }
    static buildEnumDefinition(type, options) {
        if (!options)
            options = {};
        const definition = { name: type.name };
        const features = (options.features === undefined) ? opts.EnumFeatures.All : options.features;
        // Handle deprecated stuff
        if (options.prefix) {
            console.warn(`The 'prefix' option is deprecated. Use the 'export' or 'declare' option instead.`);
            if (options.prefix === 'export') {
                options.export = true;
            }
            else if (options.prefix === 'declare') {
                options.declare = true;
            }
        }
        // Description
        if ((features & opts.EnumFeatures.JsDocDescription) && type.ownedComments) {
            definition.description = TypeScriptModelBuilder.buildDescription(type);
        }
        // Declare
        definition.declare = options.declare;
        // Export
        if (options.export == undefined) {
            definition.export = type.visibility === elements.VisibilityKind.public || type.visibility === elements.VisibilityKind.package;
        }
        else
            definition.export = options.export;
        // Literals
        if (elements.isEnumeration(type) && type.ownedLiterals && type.ownedLiterals.length) {
            const members = [];
            const buildInitializers = !!(features & opts.EnumFeatures.Initializers);
            type.ownedLiterals.forEach(literal => {
                const member = { name: literal.name };
                if (features & opts.EnumFeatures.JsDocDescription) {
                    member.description = TypeScriptModelBuilder.buildDescription(literal);
                }
                if (buildInitializers && literal.specification) {
                    const specification = literal.specification;
                    member.value = elements.isLiteralInteger(specification)
                        ? specification.value
                        : specification.getStringValue();
                }
                members.push(member);
            });
            definition.members = members;
        }
        return definition;
    }
    static buildImplements(cls, additional) {
        const allNames = [];
        if (cls.interfaceRealizations) {
            allNames.push(...cls.interfaceRealizations.map(ir => ir.contract.name));
        }
        if (additional) {
            allNames.push(...additional);
        }
        return allNames;
    }
    static buildExtends(type, additional) {
        const allNames = [];
        if (type.generalizations) {
            allNames.push(...type.generalizations.map(g => g.general.name));
        }
        if (additional) {
            allNames.push(...additional);
        }
        return allNames;
    }
    static buildDescription(type) {
        return type.ownedComments.map(c => c.body);
    }
    static getDefaultValueString(element, typeName, defaultValue, isOptional, optionalityModifier, initializePrimitiveType, initializeArray) {
        const isPrimitive = TypeUtility.isPrimitiveType(typeName);
        const valueIfOptional = optionalityModifier == opts.OptionalityModifier.NullKeyword ? 'null' : null;
        if (element.isMultivalued()) {
            // The element is an array (of a complex type or a primitive)
            if (initializeArray) {
                return isOptional ? valueIfOptional : '[]';
            }
            else
                return null;
        }
        else if (isPrimitive) {
            if (defaultValue) {
                // The type is a primitive having a default value in the model
                return elements.isLiteralString(defaultValue) ? `'${defaultValue.value}'` : defaultValue.getStringValue();
            }
            else if (initializePrimitiveType) {
                // The type is a primitive having no default value in the model
                if (isOptional) {
                    return valueIfOptional;
                }
                else
                    return TypeUtility.getPrimitiveTypeDefault(typeName);
            }
        }
        else {
            // The element is not a primitive and no array, so it is a complex type.
            // If optionalityModifier is NullKeyword, use it.
            if (isOptional && optionalityModifier == opts.OptionalityModifier.NullKeyword) {
                return valueIfOptional;
            }
        }
        return null;
    }
}
//# sourceMappingURL=data:application/json;base64,