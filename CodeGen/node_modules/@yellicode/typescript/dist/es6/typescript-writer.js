import * as elements from '@yellicode/elements';
import { CodeWriter, NameUtility, CodeWriterUtility } from '@yellicode/core';
import { TypeScriptTypeNameProvider } from './typescript-type-name-provider';
import { DefinitionBuilder } from './definition-builder';
/**
 * Provides code writing functionality specific for TypeScript.
 */
export class TypeScriptWriter extends CodeWriter {
    constructor(writer, options) {
        super(writer);
        if (!options)
            options = {};
        this.typeNameProvider = options.typeNameProvider || new TypeScriptTypeNameProvider();
        this.definitionBuilder = new DefinitionBuilder(this.typeNameProvider);
        this.maxCommentWidth = options.maxCommentWidth || 100;
    }
    /**
     * Writes a block of code wrapped in a #region block.
     */
    writeRegionBlock(name, contents) {
        this.writeLine(`//#region ${name}`);
        contents(this);
        this.writeLine(`//#endregion ${name}`);
        return this;
    }
    writeImports(moduleName, x) {
        if (!moduleName)
            return this;
        // Ensure forward slashes in the module name
        moduleName = moduleName.replace(/\\/g, "/");
        if (x instanceof Array) {
            if (x.length === 0)
                return this;
            this.writeLine(`import { ${x.join(', ')} } from '${moduleName}';`);
            return this;
        }
        // x is the alias
        if (!x) {
            x = TypeScriptWriter.makeSafeModuleName(moduleName);
        }
        this.writeLine(`import * as ${x} from '${moduleName}';`);
        return this;
    }
    /**
    * Writes an indented block of decorator code, wrapped in opening and closing brackets.
    * @param contents A callback function that writes the contents.
    */
    writeDecoratorCodeBlock(decoratorName, contents) {
        this.writeLine(`@${decoratorName}({`);
        this.increaseIndent();
        if (contents)
            contents(this);
        this.decreaseIndent();
        this.writeLine('})');
        return this;
    }
    /**
    * Writes an indented block of code, wrapped in opening and closing brackets.
    * @param contents A callback function that writes the contents.
    */
    writeCodeBlock(contents) {
        this.writeLine('{');
        this.increaseIndent();
        if (contents)
            contents(this);
        this.decreaseIndent();
        this.writeLine('}');
        return this;
    }
    ;
    writeClassBlock(cls, contents, options) {
        if (!cls)
            return this;
        let definition;
        if (elements.isType(cls)) {
            definition = this.definitionBuilder.buildClassDefinition(cls, options);
        }
        else
            definition = cls;
        if (definition.description) {
            this.writeJsDocLines(definition.description);
        }
        this.writeIndent();
        if (definition.export) {
            this.write(`export `);
        }
        if (definition.declare) {
            this.write('declare ');
        }
        if (definition.isAbstract) {
            this.write('abstract ');
        }
        this.write(`class ${definition.name}`);
        if (definition.extends) {
            this.writeExtends(definition.extends);
        }
        if (definition.implements) {
            this.writeImplements(definition.implements);
        }
        // Write the contents
        this.writeEndOfLine(' {');
        this.increaseIndent();
        if (contents)
            contents(this);
        this.decreaseIndent();
        this.writeLine('}');
        return this;
    }
    writeInterfaceBlock(iface, contents, options) {
        if (!iface)
            return this;
        let definition;
        if (elements.isType(iface)) {
            definition = this.definitionBuilder.buildInterfaceDefinition(iface, options);
        }
        else
            definition = iface;
        if (definition.description) {
            this.writeJsDocLines(definition.description);
        }
        this.writeIndent();
        if (definition.export) {
            this.write(`export `);
        }
        if (definition.declare) {
            this.write('declare ');
        }
        this.write(`interface ${definition.name}`);
        if (definition.extends) {
            this.writeExtends(definition.extends);
        }
        // Write the contents
        this.writeEndOfLine(' {');
        this.increaseIndent();
        if (contents)
            contents(this);
        this.decreaseIndent();
        this.writeLine('}');
        return this;
    }
    writeProperty(property, options) {
        if (!property)
            return this;
        let definition;
        if (elements.isProperty(property)) {
            definition = this.definitionBuilder.buildPropertyDefinition(property, options);
        }
        else
            definition = property;
        const hasDefaultValue = definition.defaultValue != null; // '!= null' to allow for empty strings
        // Description
        if (definition.description) {
            this.writeJsDocLines(definition.description);
        }
        // Start a new, indented line        
        this.writeIndent();
        // Access modifier 
        if (definition.accessModifier) {
            this.write(`${definition.accessModifier} `);
        }
        // Static modifier        
        if (definition.isStatic) {
            this.write('static ');
        }
        // Readonly modifier
        if (definition.isReadonly) {
            this.write('readonly ');
        }
        // Name
        this.write(property.name);
        if (definition.isOptional && !definition.hasNullUnionType) {
            this.write('?');
        }
        if (!hasDefaultValue && !definition.isOptional && definition.useDefiniteAssignmentAssertionModifier) {
            this.write('!');
        }
        // Type
        this.write(`: ${definition.typeName}`);
        if (definition.isOptional && definition.hasNullUnionType) {
            this.write(' | null');
        }
        // Initializer
        if (hasDefaultValue) {
            this.write(` = ${definition.defaultValue}`);
        }
        this.writeEndOfLine(';');
        return this;
    }
    writeEnumeration(enumeration, options) {
        if (!enumeration)
            return this;
        let definition;
        if (elements.isType(enumeration)) {
            definition = this.definitionBuilder.buildEnumDefinition(enumeration, options);
        }
        else
            definition = enumeration;
        if (definition.description) {
            this.writeJsDocLines(definition.description);
        }
        this.writeIndent();
        if (definition.export) {
            this.write(`export `);
        }
        if (definition.declare) {
            this.write('declare ');
        }
        this.write(`enum ${enumeration.name}`);
        this.writeEndOfLine(' {');
        this.increaseIndent();
        if (!definition.members)
            return this;
        for (let i = 0, len = definition.members.length; i < len; i++) {
            const member = definition.members[i];
            if (member.description) {
                this.writeJsDocLines(member.description);
            }
            this.writeIndent();
            this.write(member.name);
            if (member.value || member.value === 0) {
                const initialValue = (typeof member.value === "number") ?
                    member.value.toString() : `'${member.value}'`; // a string enum: wrap in quotes
                this.write(` = ${initialValue}`);
            }
            if (i < len - 1) {
                this.write(',');
            }
            this.writeEndOfLine();
        }
        this.decreaseIndent();
        this.writeLine('}');
        return this;
    }
    /**
     * Writes a string literal type from a specified enumeration. Example: 'type Easing = 'ease-in' | 'ease-out' | 'ease-in-out';'
     * @param enumeration The enumeration.
     * @param prefix An optional prefix, such as 'export'.
     */
    writeStringLiteralType(enumeration, options) {
        if (!enumeration)
            return this;
        if (!options)
            options = {};
        this.writeJsDocDescription(enumeration.ownedComments);
        this.writeIndent();
        if (options.export) {
            this.write(`export `);
        }
        if (options.declare) {
            this.write('declare ');
        }
        this.write(`type ${enumeration.name} = `);
        this.joinWrite(enumeration.ownedLiterals, ' | ', lit => `'${lit.name}'`);
        this.writeEndOfLine(';');
        return this;
    }
    writeFunctionDeclaration(func, options) {
        if (!func)
            return this;
        let definition;
        if (elements.isOperation(func)) {
            definition = this.definitionBuilder.buildFunctionDefinition(func, options);
        }
        else
            definition = func;
        this.writeFunctionStart(definition);
        this.writeEndOfLine(';');
        return this;
    }
    writeFunctionBlock(func, contents, options) {
        if (!func)
            return this;
        let definition;
        if (elements.isOperation(func)) {
            definition = this.definitionBuilder.buildFunctionDefinition(func, options);
        }
        else
            definition = func;
        this.writeFunctionStart(definition);
        if (definition.isAbstract) {
            this.writeEndOfLine(';');
            return this;
        }
        this.writeEndOfLine();
        this.writeCodeBlock((writer) => { contents(writer, func); });
        return this;
    }
    getTypeName(element) {
        if (!element)
            return null;
        if (elements.isTypedElement(element)) {
            return this.typeNameProvider ? this.typeNameProvider.getTypeName(element) : element.getTypeName();
        }
        else if (elements.isType(element)) {
            return this.typeNameProvider ? this.typeNameProvider.getTypeName(element) : element.name;
        }
        return null;
    }
    writeFunctionStart(definition) {
        // jsDoc tags 
        var jsDocLines = [];
        if (definition.description) {
            jsDocLines.push(...definition.description);
        }
        if (definition.parameters) {
            this.pushJsDocLinesForParameters(definition.parameters, jsDocLines);
        }
        this.writeJsDocLines(jsDocLines);
        // TODO: export, declare?!
        // if (definition.export) {
        //     this.write(`export `);
        // }
        // if (definition.declare) {
        //     this.write('declare ');
        // }
        // Start a new, indented line
        this.writeIndent();
        // Access modifier 
        if (definition.accessModifier) {
            this.write(`${definition.accessModifier} `);
        }
        // Static modifier                
        if (definition.isStatic) {
            this.write('static ');
        }
        else if (definition.isAbstract) {
            this.write('abstract ');
        }
        this.write(definition.name);
        // If needed, make the function optional using the '?'         
        // if (definition.isOptional) {
        //     this.write('?');
        // }
        this.write('(');
        if (definition.parameters) {
            this.writeInOutParameters(definition.parameters);
        }
        this.write('): ');
        // Write the return type                
        this.write(definition.returnTypeName || 'void');
        if (definition.returnsOptional) {
            this.write(' | null');
        }
    }
    writeInOutParameters(parameters) {
        let i = 0;
        parameters.forEach((p) => {
            if (p.isReturn)
                return;
            if (i > 0) {
                this.write(', ');
            }
            this.write(p.name);
            if (p.isOptional && (p.useQuestionToken)) {
                this.write('?');
            }
            this.write(`: ${p.typeName}`);
            if (p.isOptional && !p.useQuestionToken) {
                this.write(' | null');
            }
            i++;
        });
    }
    writeExtends(ext) {
        if (ext.length === 0)
            return;
        this.write(' extends ');
        this.joinWrite(ext, ', ', name => name);
    }
    writeImplements(impl) {
        if (impl.length === 0)
            return;
        this.write(' implements ');
        this.joinWrite(impl, ', ', name => name);
    }
    pushJsDocLinesFromComments(comments, lines) {
        if (!comments)
            return;
        let i = 0;
        comments.forEach((p) => {
            if (!p.body) {
                return;
            }
            if (i > 0) {
                lines.push(''); // add a blank line
            }
            lines.push(p.body);
            i++;
        });
    }
    pushJsDocLinesForParameters(parameters, lines) {
        if (!parameters)
            return;
        parameters.forEach((p) => {
            lines.push(this.getJsDocLineForParameter(p));
        });
    }
    getJsDocLineForParameter(parameter) {
        const tag = parameter.isReturn ? 'returns' : 'param';
        let line = `@${tag} {${parameter.typeName}}`;
        if (!parameter.isReturn) {
            line = `${line} ${parameter.name}`;
        }
        if (parameter.description && parameter.description.length > 0) {
            line = `${line} ${parameter.description.join(' ')}`;
        }
        return line;
    }
    writeJsDocDescription(data) {
        const lines = [];
        if (typeof data == 'string') {
            lines.push(data);
        }
        else {
            this.pushJsDocLinesFromComments(data, lines);
        }
        this.writeJsDocLines(lines);
        return this;
    }
    writeJsDocParagraph(text) {
        this.writeJsDocLines([text]);
        return this;
    }
    writeJsDocLines(lines) {
        if (lines.length === 0)
            return this;
        this.writeLine('/**');
        // Split here
        lines.forEach(line => {
            const lineLength = line ? line.length : 0;
            if (this.maxCommentWidth > 0 && lineLength > this.maxCommentWidth) {
                // See if we can split the line
                var split = CodeWriterUtility.wordWrap(line, this.maxCommentWidth);
                split.forEach(s => {
                    this.writeLine(`* ${s}`);
                });
            }
            else
                this.writeLine(`* ${line}`);
        });
        this.writeLine('*/');
        return this;
    }
    joinWrite(collection, separator, getStringFunc) {
        let isFirst = true;
        collection.forEach(c => {
            const value = getStringFunc(c);
            if (!value)
                return;
            if (isFirst) {
                isFirst = false;
            }
            else
                this.write(separator);
            this.write(value);
        });
    }
    /**
     * Makes a TypeScript safe alias for a ES6 module name.
     */
    static makeSafeModuleName(moduleName) {
        if (moduleName.startsWith('@')) {
            moduleName = moduleName.substring(1);
        }
        const parts = moduleName.split('/');
        if (parts.length > 1) {
            // Make the module name lowerCamelCase, e.g. rename myScope/myModule to myScopeMyModule
            moduleName = NameUtility.upperToLowerCamelCase(parts[0]);
            parts.forEach((p, i) => {
                if (i > 0) {
                    moduleName += NameUtility.lowerToUpperCamelCase(p);
                }
            });
        }
        return moduleName;
    }
}
//# sourceMappingURL=data:application/json;base64,