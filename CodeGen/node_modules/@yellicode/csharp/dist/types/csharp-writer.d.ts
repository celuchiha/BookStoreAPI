import * as elements from '@yellicode/elements';
import * as opts from './options';
import { CodeWriter, TextWriter } from '@yellicode/core';
import { NamespaceDefinition, ClassDefinition, AccessModifier, InterfaceDefinition, EnumDefinition, EnumMemberDefinition, MethodDefinition, ParameterDefinition, PropertyDefinition, StructDefinition } from './model';
/**
 * A CodeWriter for writing C# code from code generation templates. This writer can write classes, interfaces, structs and enumerations and also
 * contains functions for writing namespace blocks and using directives. The CSharpWriter is compatible with Yellicode models but can also work
 * independently.
 */
export declare class CSharpWriter extends CodeWriter {
    private typeNameProvider;
    private definitionBuilder;
    private commentWriter;
    /**
     * Constructor. Creates a new CSharpWriter instance using the TextWriter and options provided.
     * @param writer The template's current TextWriter.
     * @param options Optional: the global options for this writer.
     */
    constructor(writer: TextWriter, options?: opts.WriterOptions);
    /**
     * Writes 1 or more using directives, each on a new line.
     * @param values A collection of strings, typically namespace names.
     */
    writeUsingDirectives(...values: string[]): this;
    /**
     * Writes an indented block of code, wrapped in opening and closing brackets.
     * @param contents A callback function that writes the contents.
     */
    writeCodeBlock(contents: (writer: CSharpWriter) => void): this;
    /**
     * Writes an indented block of code, wrapped in a namespace declaration and opening and closing brackets.
     * @param definition The namespace definition. Not that an XML doc summary is not supported.
     * @param contents A callback function that writes the namespace contents.
     */
    writeNamespaceBlock(definition: NamespaceDefinition, contents: (writer: CSharpWriter) => void): this;
    /**
     * Writes an indented block of code, wrapped in a namespace declaration and opening and closing brackets.
     * @param pack A package or model that represents the namespace.
     * @param contents A callback function that writes the namespace contents.
     * @param options An optional NamespaceOptions object.
     */
    writeNamespaceBlock(pack: elements.Package, contents: (writer: CSharpWriter) => void, options?: opts.NamespaceOptions): this;
    /**
     * Writes a block of code, wrapped in a class declaration and opening and closing brackets.
     * This function does not write class members.
     * @param definition The class definition.
     * @param contents A callback function that writes the class contents.
     */
    writeClassBlock(definition: ClassDefinition, contents: (writer: CSharpWriter) => void): this;
    /**
     * Writes a block of code, wrapped in a class declaration and opening and closing brackets.
     * This function does not write class members.
     * @param cls The class.
     * @param contents A callback function that writes the class contents.
     * @param options An optional ClassOptions object.
     */
    writeClassBlock(cls: elements.Class, contents: (writer: CSharpWriter) => void, options?: opts.ClassOptions): this;
    /**
    * Writes a block of code, wrapped in a struct declaration and opening and closing brackets.
    * This function does not write struct members.
    * @param definition The struct definition.
    * @param contents A callback function that writes the struct contents.
    */
    writeStructBlock(definition: StructDefinition, contents: (writer: CSharpWriter) => void): this;
    /**
     * Writes a block of code, wrapped in a struct declaration and opening and closing brackets.
     * This function does not write struct members.
     * @param cls The struct type.
     * @param contents A callback function that writes the struct contents.
     * @param options An optional StructOptions object.
     */
    writeStructBlock(cls: elements.Type, contents: (writer: CSharpWriter) => void, options?: opts.StructOptions): this;
    /**
     * Writes a block of code, wrapped in an interface declaration and opening and closing brackets.
     * This function does not write interface members.
     * @param definition The interface definition.
     * @param contents  A callback function that writes the interface contents.
     */
    writeInterfaceBlock(definition: InterfaceDefinition, contents: (writer: CSharpWriter) => void): this;
    /**
     * Writes a block of code, wrapped in an interface declaration and opening and closing brackets.
     * This function does not write interface members.
     * @param iface The interface.
     * @param contents A callback function that writes the interface contents.
     * @param options An optional InterfaceOptions object.
     */
    writeInterfaceBlock(iface: elements.Interface, contents: (writer: CSharpWriter) => void, options?: opts.InterfaceOptions): this;
    /**
     * Writes a block of code, wrapped in an enum declaration and opening and closing brackets.
     * This function does not write enumeration members. Use the writeEnumMember function
     * to write each individual member or the writeEnumeration function to write the full enumeration.
     * @param definition The enumeration definition.
     * @param contents A callback function that writes the enumeration contents.
     */
    writeEnumerationBlock(definition: EnumDefinition, contents: (writer: CSharpWriter) => void): this;
    /**
    * Writes a block of code, wrapped in an enum declaration and opening and closing brackets.
    * This function does not write enumeration members. Use the writeEnumMember function
    * to write each individual member or the writeEnumeration function to write the full enumeration.
    * @param element The enumeration.
    * @param contents A callback function that writes the enumeration contents.
    * @param options An optional EnumerationOptions object.
    */
    writeEnumerationBlock(enumeration: elements.Enumeration, contents: (writer: CSharpWriter) => void, options?: opts.EnumOptions): this;
    /**
     *  Writes a full enumeration, including members.
     * @param definition The enumeration definition.
     */
    writeEnumeration(definition: EnumDefinition): this;
    /**
     * Writes a full enumeration, including members.
     * @param element The enumeration.
     * @param options An optional EnumOptions object.
     */
    writeEnumeration(enumeration: elements.Enumeration, options?: opts.EnumOptions): this;
    /**
     * Writes an individual enumeration member.
     * @param definition The enumeration member definition.
     */
    writeEnumMember(definition: EnumMemberDefinition): this;
    /**
     * Writes an individual enumeration member.
     * @param literal The EnumerationLiteral for which to write the member.
     * @param options An optional EnumMemberOptions object.
     * @param isLast Set to true if this is the last member of the enumeration to be written (avoiding
     * a trailing comma).
     */
    writeEnumMember(literal: elements.EnumerationLiteral, options?: opts.EnumMemberOptions, isLast?: boolean): this;
    /**
     * Writes a method declaration without a body. Use this function to generate interface methods.
     * @param definition The method definition.
     */
    writeMethodDeclaration(definition: MethodDefinition): this;
    /**
   * Writes a method declaration without a body. Use this function to generate interface methods.
   * @param operation The operation for which to write the method.
   * @param options An optional MethodOptions object.
   */
    writeMethodDeclaration(operation: elements.Operation, options?: opts.MethodOptions): this;
    /**
    * Writes an indented block of code, wrapped in a method declaration and opening and closing brackets.
    * @param method The operation for which to write the method.
    * @param contents A callback function that writes the operation contents. This callback will not be invoked
    * if the method is abstract.
     */
    writeMethodBlock(method: MethodDefinition, contents: (writer: CSharpWriter) => void): this;
    /**
    * Writes an indented block of code, wrapped in a method declaration and opening and closing brackets.
    * @param operation The operation for which to write the method.
    * @param contents A callback function that writes the operation contents. This callback will not be invoked
    * if the method is abstract.
    * @param options An optional MethodOptions object.
    */
    writeMethodBlock(operation: elements.Operation, contents: (writer: CSharpWriter) => void, options?: opts.MethodOptions): this;
    /**
     * Writes the input and output parameters of a method.
     * @param params The parameter definitions.
     */
    writeInOutParameters(params: ParameterDefinition[]): this;
    /**
   * Writes the input and output parameters (all parameters except the return parameter) of a method.
   * @param params A collection of parameters.
   * @param options An optional MethodOptions object.
   */
    writeInOutParameters(params: elements.Parameter[], options?: opts.MethodOptions): this;
    /**
     * Writes an auto property with a getter and a setter.
     * @param property The property definition.
     */
    writeAutoProperty(property: PropertyDefinition): this;
    /**
    * Writes an auto property with a getter and - if the property is not ReadOnly or Derived - a setter.
    * This function can be used for both Class- and and Interface properties.
    */
    writeAutoProperty(property: elements.Property, options?: opts.PropertyOptions): this;
    /**
     *  Writes a property code block using optional callback functions for writing the getter and setter contents.
     * @param property The property definition.
     * @param getterContents An optional callback function that writes the getter code.
     * @param setterContents An optional callback function that writes the setter code.
     */
    writePropertyBlock(property: PropertyDefinition, getterContents: () => void | null, setterContents: () => void | null): this;
    /**
    *  Writes a property code block using optional callback functions for writing the getter and setter contents.
    * @param property The property.
    * @param getterContents An optional callback function that writes the getter code.
    * @param setterContents An optional callback function that writes the setter code.
    * @param options An optional PropertyOptions object.
    */
    writePropertyBlock(property: elements.Property, getterContents: () => void | null, setterContents: () => void | null, options?: opts.PropertyOptions): this;
    private writePropertyStart;
    /**
    * Writes the type's access modifier to the output with a trailing whitespace.
    * @param definition The type definition.
    */
    writeAccessModifier(definition: {
        accessModifier?: AccessModifier;
    }): this;
    /**
    * Writes the visibility to the output with a trailing whitespace. If the visibilty is null or
    * not supported by C#, nothing will be written.
    * @param visibilityKind A VisibilityKind value. This value can be null.
    */
    writeAccessModifier(visibilityKind: elements.VisibilityKind | null): this;
    /**
     * Gets the name of the type. This function uses the current typeNameProvider for resolving
     * the type name.
     * @param type Any element that derives from Type.
     */
    getTypeName(type: elements.Type | null): string | null;
    /**
    * Gets the type name of the typed element. This function uses the current typeNameProvider for resolving
    * the type name.
    * @param typedElement Any element that has a type, such as a Property or Parameter.
    */
    getTypeName(typedElement: elements.TypedElement | null): string | null;
    /**
     * Writes a method declaration without a body.
     * @deprecated Use the writeMethodDeclaration() function instead.
     */
    writeInterfaceMethod(operation: elements.Operation, options?: opts.MethodOptions): this;
    /**
     * Writes an indented block of code, wrapped in a method declaration and opening and closing brackets.
     * @deprecated Use the writeMethodBlock() function instead.
     */
    writeClassMethodBlock(operation: elements.Operation, contents: (writer: CSharpWriter) => void, options?: opts.MethodOptions): this;
    /**
     * Writes a <summary> XML doc tag from an array of string comments. Each comment will be written on a new line.
     * The output will be word-wrapped to the current maxCommentWith specified in the writer options
     * (default: 100 characters).
     * @param paragraph A string array of comments.
     */
    writeXmlDocSummary(paragraph: string[]): this;
    /**
     * Writes a <summary> XML doc tag from a string. The output will be word-wrapped to the
     * current maxCommentWith specified in the writer options.
     * @param comments The paragraph to write.
     */
    writeXmlDocSummary(paragraph: string): this;
    /**
     * Writes a <summary> XML doc tag from the element's ownedComments. The output will be word-wrapped to the
     * current maxCommentWith specified in the writer options.
     * (default: 100 characters).
     * @param comments Any Yellicode model element.
     */
    writeXmlDocSummary(element: elements.Element): this;
    /**
     * Writes a paragraph of xml doc comments, each line starting with forward slashes '/// '.
     * The output will be word-wrapped to the current maxCommentWith specified in the writer options
     * (default: 100 characters).
     * @param line The paragraph to write.
     */
    writeXmlDocParagraph(paragraph: string[]): this;
    /**
   * Writes a paragraph of xml doc comments, each line starting with forward slashes '/// '.
   * The output will be word-wrapped to the current maxCommentWith specified in the writer options
   * (default: 100 characters).
   * @param paragraph The paragraph to write.
   */
    writeXmlDocParagraph(paragraph: string): this;
    /**
     * Writes a paragraph of xml doc comments, each line starting with forward slashes '/// '.
     * @param lines
     * @deprecated Please use writeXmlDocParagraph instead.
     */
    writeXmlDocLines(lines: string[]): this;
    /**
     * Writes a paragraph of comments, delimited by a '\/\*' and a '\*\/', each other line starting with a '*'.
     * @param paragraph The paragraph to write.
     */
    writeDelimitedCommentParagraph(paragraph: string): this;
    writeDelimitedCommentParagraph(paragraph: string[]): this;
    writeDelimitedCommentLines(paragraph: string[]): this;
    private joinWrite;
    private writeInherits;
    private writeImplements;
}
