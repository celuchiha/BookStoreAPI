import * as elements from '@yellicode/elements';
import * as opts from './options';
import { ClassDefinition, InterfaceDefinition, EnumDefinition, EnumMemberDefinition, AccessModifier, NamespaceDefinition, MethodDefinition, ParameterDefinition, PropertyDefinition, StructDefinition } from './model';
export declare class DefinitionBuilder {
    private typeNameProvider;
    constructor(typeNameProvider: elements.TypeNameProvider);
    buildNamespaceDefinition(pack: elements.Package, options?: opts.NamespaceOptions): NamespaceDefinition;
    buildClassDefinition(type: elements.Type, options?: opts.ClassOptions): ClassDefinition;
    buildStructDefinition(type: elements.Type, options?: opts.StructOptions): StructDefinition;
    buildInterfaceDefinition(type: elements.Type, options?: opts.InterfaceOptions): InterfaceDefinition;
    buildEnumMemberDefinition(literal: elements.EnumerationLiteral, isLast?: boolean, options?: opts.EnumMemberOptions): EnumMemberDefinition;
    buildEnumDefinition(type: elements.Type, options?: opts.EnumOptions): EnumDefinition;
    buildPropertyDefinition(property: elements.Property, options?: opts.PropertyOptions): PropertyDefinition;
    buildMethodDefinition(operation: elements.Operation, options?: opts.MethodOptions): MethodDefinition;
    buildParameterDefinitions(params: elements.Parameter[], options?: opts.MethodOptions): ParameterDefinition[];
    private static buildInherits;
    private static buildImplements;
    static buildXmlDocSummary(element: elements.Element): string[] | undefined;
    private static buildTypeDefinition;
    private static buildDefinitionBase;
    private static getDefaultValueString;
    static getAccessModifierString(visibility: elements.VisibilityKind | null): AccessModifier | undefined;
    private getFullTypeName;
}
