import * as elements from '@yellicode/elements';
import * as opts from './options';
import { ParameterDirectionKind } from '@yellicode/elements';
import { CSharpTypeNameProvider } from './csharp-type-name-provider';
var DefinitionBuilder = /** @class */ (function () {
    function DefinitionBuilder(typeNameProvider) {
        this.typeNameProvider = typeNameProvider;
    }
    DefinitionBuilder.prototype.buildNamespaceDefinition = function (pack, options) {
        if (!options)
            options = {};
        // We have no namespace features yet, but the NamespaceFeatures type is there for future extension
        var features = (options.features === undefined) ? opts.NamespaceFeatures.All : options.features;
        var name;
        if (options.writeFullName) {
            var allPackages = pack.getNestingPackages();
            allPackages.push(pack); // add the package itself
            name = allPackages.map(function (p) { return p.name; }).join('.');
        }
        else
            name = pack.name;
        return { name: name };
    };
    DefinitionBuilder.prototype.buildClassDefinition = function (type, options) {
        // Initialize options and features
        if (!options)
            options = {};
        var features = (options.features === undefined) ? opts.ClassFeatures.All : options.features;
        // Build the base definition
        var definition = DefinitionBuilder.buildTypeDefinition(type, !!(features & opts.ClassFeatures.XmlDocSummary), options);
        // Build the class-specific definition
        definition.inherits = DefinitionBuilder.buildInherits(type, options.inherits);
        definition.implements = DefinitionBuilder.buildImplements(type, options.implements);
        if (elements.isClass(type)) {
            definition.isAbstract = type.isAbstract || options.isAbstract;
        }
        return definition;
    };
    DefinitionBuilder.prototype.buildStructDefinition = function (type, options) {
        // Initialize options and features
        if (!options)
            options = {};
        var features = (options.features === undefined) ? opts.StructFeatures.All : options.features;
        // Build the base definition
        var definition = DefinitionBuilder.buildTypeDefinition(type, !!(features & opts.StructFeatures.XmlDocSummary), options);
        // Build the struct-specific definition        
        definition.implements = DefinitionBuilder.buildImplements(type, options.implements);
        return definition;
    };
    DefinitionBuilder.prototype.buildInterfaceDefinition = function (type, options) {
        // Initialize options and features
        if (!options)
            options = {};
        var features = (options.features === undefined) ? opts.InterfaceFeatures.All : options.features;
        // Build the base definition
        var definition = DefinitionBuilder.buildTypeDefinition(type, !!(features & opts.InterfaceFeatures.XmlDocSummary), options);
        // Build the interface-specific definition
        definition.inherits = DefinitionBuilder.buildInherits(type, options.inherits);
        return definition;
    };
    DefinitionBuilder.prototype.buildEnumMemberDefinition = function (literal, isLast, options) {
        // Initialize options and features
        if (!options)
            options = {};
        var features = (options.features === undefined) ? opts.EnumMemberFeatures.All : options.features;
        var buildInitializers = !!(features & opts.EnumFeatures.Initializers);
        // Build the base definition
        var definition = DefinitionBuilder.buildDefinitionBase(literal, !!(features & opts.EnumMemberFeatures.XmlDocSummary));
        // Build the member-specific definition
        definition.isLast = isLast || false;
        if (buildInitializers && literal.specification != null) { // using '!=' on purpose  
            var specification = literal.specification;
            definition.value = elements.isLiteralInteger(specification) ? specification.value : undefined;
        }
        return definition;
    };
    DefinitionBuilder.prototype.buildEnumDefinition = function (type, options) {
        var _this = this;
        // Initialize options and features
        if (!options)
            options = {};
        var features = (options.features === undefined) ? opts.EnumFeatures.All : options.features;
        // Build the base definition         
        var definition = DefinitionBuilder.buildDefinitionBase(type, !!(features & opts.EnumFeatures.XmlDocSummary));
        // Build the enum-specific definition
        definition.accessModifier = DefinitionBuilder.getAccessModifierString(type.visibility);
        // Build enum members
        if (elements.isEnumeration(type) && type.ownedLiterals) {
            var members_1 = [];
            // Pass on enum features to enum member features
            var memberFeatures_1 = opts.EnumMemberFeatures.None;
            if (features & opts.EnumFeatures.XmlDocSummary)
                memberFeatures_1 |= opts.EnumMemberFeatures.XmlDocSummary;
            if (features & opts.EnumFeatures.Initializers)
                memberFeatures_1 |= opts.EnumMemberFeatures.Initializers;
            type.ownedLiterals.forEach(function (literal, index) {
                var isLast = index === type.ownedLiterals.length - 1;
                var member = _this.buildEnumMemberDefinition(literal, isLast, { features: memberFeatures_1 });
                members_1.push(member);
            });
            definition.members = members_1;
        }
        return definition;
    };
    DefinitionBuilder.prototype.buildPropertyDefinition = function (property, options) {
        // Initialize options and features
        if (!options)
            options = {};
        var features = (options.features === undefined) ? opts.PropertyFeatures.All : options.features;
        var ownerIsInterface = elements.isInterface(property.owner);
        // Build the base definition         
        var definition = DefinitionBuilder.buildDefinitionBase(property, !!(features & opts.PropertyFeatures.XmlDocSummary));
        // Build the property-specific definition
        var typename = this.getFullTypeName(property, options.collectionType || null, 'object');
        definition.accessModifier = DefinitionBuilder.getAccessModifierString(property.visibility);
        definition.isVirtual = options.virtual;
        definition.typeName = typename;
        if (!ownerIsInterface && (features & opts.PropertyFeatures.AccessModifier))
            definition.accessModifier = DefinitionBuilder.getAccessModifierString(property.visibility);
        if ((features & opts.PropertyFeatures.OptionalModifier) &&
            property.lower === 0 &&
            CSharpTypeNameProvider.canBeNullable(property, typename)) {
            definition.isNullable = true;
        }
        definition.noSetter = property.isReadOnly || property.isDerived;
        definition.defaultValue = DefinitionBuilder.getDefaultValueString(property.defaultValue);
        return definition;
    };
    DefinitionBuilder.prototype.buildMethodDefinition = function (operation, options) {
        if (!options)
            options = {};
        var features = (options.features === undefined) ? opts.MethodFeatures.All : options.features;
        var ownerIsInterface = elements.isInterface(operation.owner);
        // Build the base definition         
        var definition = DefinitionBuilder.buildDefinitionBase(operation, !!(features & opts.MethodFeatures.XmlDocSummary));
        definition.isConstructor = operation.isConstructor;
        definition.isStatic = operation.isStatic;
        definition.isPartial = options.isPartial;
        if (!operation.isConstructor) {
            definition.isAbstract = options.isAbstract || (!options.isVirtual && operation.isAbstract);
            definition.isVirtual = options.isVirtual;
        }
        if (!ownerIsInterface)
            definition.accessModifier = DefinitionBuilder.getAccessModifierString(operation.visibility);
        // Get the return type and documentation
        if (!operation.isConstructor) {
            var returnParameter = operation.getReturnParameter();
            if (returnParameter) {
                definition.returnTypeName = this.getFullTypeName(returnParameter, options.collectionType || null);
                if (features & opts.MethodFeatures.XmlDocReturns) {
                    definition.xmlDocReturns = DefinitionBuilder.buildXmlDocSummary(operation);
                }
            }
        }
        // Build parameter definitions      
        definition.parameters = this.buildParameterDefinitions(operation.ownedParameters, options);
        return definition;
    };
    DefinitionBuilder.prototype.buildParameterDefinitions = function (params, options) {
        var _this = this;
        if (!options)
            options = {};
        var features = (options.features === undefined) ? opts.MethodFeatures.All : options.features;
        var inOutParameters = [];
        if (!params)
            return inOutParameters;
        params.forEach(function (p) {
            if (p.direction === ParameterDirectionKind.return)
                return;
            var typeName = _this.getFullTypeName(p, options.collectionType || null, 'object');
            var paramDefinition = DefinitionBuilder.buildDefinitionBase(p, !!(features & opts.MethodFeatures.XmlDocParameters));
            paramDefinition.isOutput = p.direction === elements.ParameterDirectionKind.out;
            paramDefinition.isReference = p.direction === elements.ParameterDirectionKind.inout;
            paramDefinition.isNullable = p.lower === 0 && CSharpTypeNameProvider.canBeNullable(p, typeName);
            paramDefinition.typeName = typeName;
            paramDefinition.defaultValue = DefinitionBuilder.getDefaultValueString(p.defaultValue),
                inOutParameters.push(paramDefinition);
        });
        return inOutParameters;
    };
    DefinitionBuilder.buildInherits = function (type, additional) {
        if (!elements.isClassifier(type)) {
            return;
        }
        var allNames = [];
        if (type.generalizations) {
            // todo: allow qualifiedName
            allNames.push.apply(allNames, type.generalizations.map(function (g) { return g.general.name; }));
        }
        if (additional) {
            allNames.push.apply(allNames, additional);
        }
        return allNames.length ? allNames : undefined;
    };
    DefinitionBuilder.buildImplements = function (type, additional) {
        if (!elements.isBehavioredClassifier(type)) {
            return;
        }
        var allNames = [];
        if (type.interfaceRealizations) {
            // todo: allow qualifiedName 
            allNames.push.apply(allNames, type.interfaceRealizations.map(function (ir) { return ir.contract.name; }));
        }
        if (additional) {
            allNames.push.apply(allNames, additional);
        }
        return allNames.length ? allNames : undefined;
    };
    DefinitionBuilder.buildXmlDocSummary = function (element) {
        if (!element.ownedComments || !element.ownedComments.length) {
            return undefined;
        }
        return element.ownedComments.map(function (c) { return c.body; });
    };
    DefinitionBuilder.buildTypeDefinition = function (type, buildXmlDocSummary, options) {
        var definition = DefinitionBuilder.buildDefinitionBase(type, buildXmlDocSummary);
        definition.accessModifier = DefinitionBuilder.getAccessModifierString(type.visibility);
        definition.isPartial = options.isPartial;
        return definition;
    };
    DefinitionBuilder.buildDefinitionBase = function (element, buildXmlDocSummary) {
        var definition = {
            name: element.name,
            xmlDocSummary: buildXmlDocSummary ? DefinitionBuilder.buildXmlDocSummary(element) : undefined
        };
        return definition;
    };
    DefinitionBuilder.getDefaultValueString = function (defaultValue) {
        if (!defaultValue)
            return undefined;
        return elements.isLiteralString(defaultValue) ?
            "\"" + defaultValue.value + "\"" :
            defaultValue.getStringValue();
    };
    DefinitionBuilder.getAccessModifierString = function (visibility) {
        switch (visibility) {
            case elements.VisibilityKind.public:
                return 'public';
            case elements.VisibilityKind.private:
                return 'private';
            case elements.VisibilityKind.protected:
                return 'protected';
            case elements.VisibilityKind.package:
                return 'internal';
            default:
                return undefined;
        }
    };
    DefinitionBuilder.prototype.getFullTypeName = function (typedElement, collectionType, fallback) {
        var typeName = this.typeNameProvider.getTypeName(typedElement) || fallback;
        if (!typeName)
            return; // no type name and no fallback
        if (elements.isMultiplicityElement(typedElement) && typedElement.isMultivalued()) {
            switch (collectionType) {
                case opts.CollectionType.IList:
                    return "IList<" + typeName + ">";
                case opts.CollectionType.IEnumerable:
                    return "IEnumerable<" + typeName + ">";
                default:
                    return "ICollection<" + typeName + ">";
            }
        }
        else
            return typeName;
    };
    return DefinitionBuilder;
}());
export { DefinitionBuilder };
//# sourceMappingURL=data:application/json;base64,