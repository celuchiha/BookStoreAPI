import { CodeWriterUtility } from '@yellicode/core';
var CSharpCommentWriter = /** @class */ (function () {
    function CSharpCommentWriter(writer, maxCommentWidth) {
        this.writer = writer;
        this.maxCommentWidth = maxCommentWidth;
    }
    CSharpCommentWriter.prototype.writeDelimitedCommentParagraph = function (text) {
        if (text == null)
            return;
        var lines = [text];
        this.writer.writeLine("/*");
        this.writeCommentLines(lines, "* ");
        this.writer.writeLine("*/");
    };
    CSharpCommentWriter.prototype.writeDelimitedCommentLines = function (lines) {
        if (lines == null)
            return;
        this.writer.writeLine("/*");
        this.writeCommentLines(lines, "* ");
        this.writer.writeLine("*/");
    };
    CSharpCommentWriter.prototype.writeCommentLines = function (lines, prefix) {
        var _this = this;
        if (!lines)
            return;
        lines.forEach(function (line) {
            if (line == null)
                return;
            if (_this.maxCommentWidth > 0 && line.length > _this.maxCommentWidth) {
                // See if we can split the line
                var split = CodeWriterUtility.wordWrap(line, _this.maxCommentWidth);
                split.forEach(function (s) {
                    _this.writer.writeLine("" + prefix + s);
                });
            }
            else
                _this.writer.writeLine("" + prefix + line);
        });
    };
    return CSharpCommentWriter;
}());
export { CSharpCommentWriter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWVudC13cml0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tbWVudC13cml0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFjLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFaEU7SUFFSSw2QkFBb0IsTUFBa0IsRUFBVSxlQUF1QjtRQUFuRCxXQUFNLEdBQU4sTUFBTSxDQUFZO1FBQVUsb0JBQWUsR0FBZixlQUFlLENBQVE7SUFFdkUsQ0FBQztJQUVNLDREQUE4QixHQUFyQyxVQUFzQyxJQUFZO1FBQzlDLElBQUksSUFBSSxJQUFJLElBQUk7WUFBRSxPQUFPO1FBQ3pCLElBQU0sS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUMvQixDQUFDO0lBRU0sd0RBQTBCLEdBQWpDLFVBQWtDLEtBQWU7UUFDN0MsSUFBSSxLQUFLLElBQUksSUFBSTtZQUFFLE9BQU87UUFDMUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUMvQixDQUFDO0lBRU0sK0NBQWlCLEdBQXhCLFVBQXlCLEtBQWUsRUFBRSxNQUFlO1FBQXpELGlCQWdCQztRQWZHLElBQUksQ0FBQyxLQUFLO1lBQUUsT0FBTztRQUVuQixLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUEsSUFBSTtZQUNkLElBQUksSUFBSSxJQUFJLElBQUk7Z0JBQ1osT0FBTztZQUVYLElBQUksS0FBSSxDQUFDLGVBQWUsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFJLENBQUMsZUFBZSxFQUFFO2dCQUNoRSwrQkFBK0I7Z0JBQy9CLElBQU0sS0FBSyxHQUFhLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsS0FBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO2dCQUMvRSxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQztvQkFDWCxLQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFHLE1BQU0sR0FBRyxDQUFHLENBQUMsQ0FBQztnQkFDM0MsQ0FBQyxDQUFDLENBQUE7YUFDTDs7Z0JBQ0ksS0FBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBRyxNQUFNLEdBQUcsSUFBTSxDQUFDLENBQUM7UUFDbkQsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ0wsMEJBQUM7QUFBRCxDQUFDLEFBdENELElBc0NDIn0=