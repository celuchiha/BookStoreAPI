import * as elements from '@yellicode/elements';
import * as opts from './options';
var ModelBuilder = /** @class */ (function () {
    function ModelBuilder() {
    }
    ModelBuilder.buildClassDefinition = function (type, options) {
        if (!options)
            options = {};
        var features = (options.features === undefined) ? opts.ClassFeatures.All : options.features;
        var definition = { name: type.name };
        if (features & opts.ClassFeatures.XmlDocSummary) {
            definition.xmlDocSummary = ModelBuilder.buildXmlDocSummary(type);
        }
        definition.isPartial = options.isPartial;
        if (elements.isClassifier(type)) {
            definition.inherits = ModelBuilder.buildInherits(type, options.inherits);
        }
        if (elements.isClass(type)) {
            definition.isAbstract = type.isAbstract;
            definition.implements = ModelBuilder.buildImplements(type, options.implements);
        }
        return definition;
    };
    ModelBuilder.buildInterfaceDefinition = function (type, options) {
        if (!options)
            options = {};
        var features = (options.features === undefined) ? opts.InterfaceFeatures.All : options.features;
        var definition = { name: type.name };
        if (features & opts.InterfaceFeatures.XmlDocSummary) {
            definition.xmlDocSummary = ModelBuilder.buildXmlDocSummary(type);
        }
        definition.isPartial = options.isPartial;
        if (elements.isClassifier(type)) {
            definition.inherits = ModelBuilder.buildInherits(type, options.inherits);
        }
        return definition;
    };
    ModelBuilder.buildInherits = function (type, additional) {
        var allNames = [];
        if (type.generalizations) {
            // todo: allow qualifiedName
            allNames.push.apply(allNames, type.generalizations.map(function (g) { return g.general.name; }));
        }
        if (additional) {
            allNames.push.apply(allNames, additional);
        }
        return allNames.length ? allNames : undefined;
    };
    ModelBuilder.buildImplements = function (type, additional) {
        var allNames = [];
        if (type.interfaceRealizations) {
            // todo: allow qualifiedName 
            allNames.push.apply(allNames, type.interfaceRealizations.map(function (ir) { return ir.contract.name; }));
        }
        if (additional) {
            allNames.push.apply(allNames, additional);
        }
        return allNames.length ? allNames : undefined;
    };
    ModelBuilder.buildXmlDocSummary = function (element) {
        if (!element.ownedComments || !element.ownedComments.length) {
            return;
        }
        return element.ownedComments.map(function (c) { return c.body; });
    };
    return ModelBuilder;
}());
export { ModelBuilder };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWwtYnVpbGRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlbC1idWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxRQUFRLE1BQU0scUJBQXFCLENBQUM7QUFDaEQsT0FBTyxLQUFLLElBQUksTUFBTSxXQUFXLENBQUM7QUFJbEM7SUFBQTtJQXVFQSxDQUFDO0lBdEVpQixpQ0FBb0IsR0FBbEMsVUFBbUMsSUFBbUIsRUFBRSxPQUEyQjtRQUMvRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDM0IsSUFBTSxRQUFRLEdBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUU5RixJQUFNLFVBQVUsR0FBb0IsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBRXhELEVBQUUsQ0FBQyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7WUFDOUMsVUFBVSxDQUFDLGFBQWEsR0FBRyxZQUFZLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckUsQ0FBQztRQUVELFVBQVUsQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUN6QyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM5QixVQUFVLENBQUMsUUFBUSxHQUFHLFlBQVksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM3RSxDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJ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