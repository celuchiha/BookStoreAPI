var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as elements from '@yellicode/elements';
import { CodeWriter } from '@yellicode/core';
import { CSharpTypeNameProvider } from './csharp-type-name-provider';
import { CSharpCommentWriter } from './comment-writer';
import { XmlDocUtility } from './xml-doc-utility';
import { DefinitionBuilder } from './definition-builder';
/**
 * A CodeWriter for writing C# code from code generation templates. This writer can write classes, interfaces, structs and enumerations and also
 * contains functions for writing namespace blocks and using directives. The CSharpWriter is compatible with Yellicode models but can also work
 * independently.
 */
var CSharpWriter = /** @class */ (function (_super) {
    __extends(CSharpWriter, _super);
    /**
     * Constructor. Creates a new CSharpWriter instance using the TextWriter and options provided.
     * @param writer The template's current TextWriter.
     * @param options Optional: the global options for this writer.
     */
    function CSharpWriter(writer, options) {
        var _this = _super.call(this, writer) || this;
        if (!options)
            options = {};
        _this.typeNameProvider = options.typeNameProvider || new CSharpTypeNameProvider();
        _this.definitionBuilder = new DefinitionBuilder(_this.typeNameProvider);
        _this.commentWriter = new CSharpCommentWriter(writer, options.maxCommentWidth || 100);
        return _this;
    }
    /**
     * Writes 1 or more using directives, each on a new line.
     * @param values A collection of strings, typically namespace names.
     */
    CSharpWriter.prototype.writeUsingDirectives = function () {
        var _this = this;
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        values.forEach(function (v) {
            _this.writeLine("using " + v + ";");
        });
        return this;
    };
    /**
     * Writes an indented block of code, wrapped in opening and closing brackets.
     * @param contents A callback function that writes the contents.
     */
    CSharpWriter.prototype.writeCodeBlock = function (contents) {
        this.writeLine('{');
        this.increaseIndent();
        if (contents)
            contents(this);
        this.decreaseIndent();
        this.writeLine('}');
        return this;
    };
    ;
    CSharpWriter.prototype.writeNamespaceBlock = function (data, contents, options) {
        if (!data)
            return this;
        var definition = (elements.isPackage(data)) ?
            this.definitionBuilder.buildNamespaceDefinition(data, options) :
            data;
        this.writeLine("namespace " + definition.name);
        this.writeCodeBlock(contents);
        return this;
    };
    ;
    CSharpWriter.prototype.writeClassBlock = function (data, contents, options) {
        if (!data)
            return this;
        var definition = (elements.isType(data)) ?
            this.definitionBuilder.buildClassDefinition(data, options) :
            data;
        if (definition.xmlDocSummary) {
            this.writeXmlDocSummary(definition.xmlDocSummary);
        }
        this.writeIndent();
        this.writeAccessModifier(definition);
        if (definition.isAbstract) {
            this.write('abstract ');
        }
        if (definition.isPartial) {
            this.write('partial ');
        }
        this.write("class " + definition.name);
        var hasGeneralizations = false;
        hasGeneralizations = this.writeInherits(definition.inherits);
        this.writeImplements(hasGeneralizations, definition.implements);
        this.writeEndOfLine();
        this.writeCodeBlock(contents);
        return this;
    };
    CSharpWriter.prototype.writeStructBlock = function (data, contents, options) {
        if (!data)
            return this;
        var definition = (elements.isType(data)) ?
            this.definitionBuilder.buildStructDefinition(data, options) :
            data;
        if (definition.xmlDocSummary) {
            this.writeXmlDocSummary(definition.xmlDocSummary);
        }
        this.writeIndent();
        this.writeAccessModifier(definition);
        if (definition.isPartial) {
            this.write('partial ');
        }
        this.write("struct " + definition.name);
        this.writeImplements(false, definition.implements);
        this.writeEndOfLine();
        this.writeCodeBlock(contents);
        return this;
    };
    CSharpWriter.prototype.writeInterfaceBlock = function (data, contents, options) {
        if (!data)
            return this;
        var definition = (elements.isType(data)) ?
            this.definitionBuilder.buildInterfaceDefinition(data, options) :
            data;
        if (definition.xmlDocSummary) {
            this.writeXmlDocSummary(definition.xmlDocSummary);
        }
        this.writeIndent();
        this.writeAccessModifier(definition);
        if (definition.isPartial) {
            this.write('partial ');
        }
        this.write("interface " + definition.name);
        this.writeInherits(definition.inherits);
        this.writeEndOfLine();
        this.writeCodeBlock(contents);
        return this;
    };
    CSharpWriter.prototype.writeEnumerationBlock = function (data, contents, options) {
        if (!data)
            return this;
        var definition = (elements.isType(data)) ?
            this.definitionBuilder.buildEnumDefinition(data, options) :
            data;
        if (definition.xmlDocSummary) {
            this.writeXmlDocSummary(definition.xmlDocSummary);
        }
        this.writeIndent();
        this.writeAccessModifier(definition);
        this.write("enum " + definition.name);
        this.writeEndOfLine();
        this.writeCodeBlock(contents);
        return this;
    };
    CSharpWriter.prototype.writeEnumeration = function (data, options) {
        var _this = this;
        if (!data)
            return this;
        var definition = (elements.isType(data)) ?
            this.definitionBuilder.buildEnumDefinition(data, options) :
            data;
        this.writeEnumerationBlock(definition, function () {
            if (definition.members) {
                definition.members.forEach(function (memberDefinition) {
                    _this.writeEnumMember(memberDefinition);
                });
            }
        });
        return this;
    };
    CSharpWriter.prototype.writeEnumMember = function (data, options, isLast) {
        if (!data)
            return this;
        var definition = (elements.isEnumerationLiteral(data)) ?
            this.definitionBuilder.buildEnumMemberDefinition(data, isLast, options) :
            data;
        if (definition.xmlDocSummary) {
            this.writeXmlDocSummary(definition.xmlDocSummary);
        }
        this.writeIndent();
        this.write(definition.name);
        if (definition.value != null) { // using '!=' on purpose  
            this.write(" = " + definition.value);
        }
        if (!definition.isLast) {
            this.write(',');
        }
        this.writeEndOfLine();
        return this;
    };
    CSharpWriter.prototype.writeMethodDeclaration = function (data, options) {
        if (!data)
            return this;
        var definition = (elements.isOperation(data)) ?
            this.definitionBuilder.buildMethodDefinition(data, options) :
            data;
        if (definition.xmlDocSummary) {
            this.writeXmlDocSummary(definition.xmlDocSummary);
        }
        if (definition.parameters) {
            this.writeXmlDocParagraph(XmlDocUtility.getXmlDocLinesForInOutParameters(definition.parameters));
        }
        var xmlDocReturns = XmlDocUtility.getXmlDocLineForReturnParameter(definition);
        if (xmlDocReturns) {
            this.writeXmlDocParagraph([xmlDocReturns]);
        }
        this.writeIndent();
        if (!definition.isPartial) {
            this.writeAccessModifier(definition); // Partial methods are implicitly private                  
        }
        if (definition.isStatic) {
            this.write('static ');
        }
        else if (definition.isAbstract) {
            this.write('abstract ');
        }
        else if (definition.isVirtual) {
            this.write('virtual ');
        }
        if (definition.isPartial) {
            this.write('partial ');
        }
        if (definition.isPartial)
            this.write('void '); // partial methods must return void, intentional trailing white space
        else
            this.write((definition.returnTypeName || 'void') + " "); // intentional trailing white space
        this.write(definition.name + "(");
        if (definition.parameters) {
            this.writeInOutParameters(definition.parameters);
        }
        this.write(');');
        this.writeEndOfLine();
        return this;
    };
    CSharpWriter.prototype.writeMethodBlock = function (data, contents, options) {
        if (!data)
            return this;
        var definition = (elements.isOperation(data)) ?
            this.definitionBuilder.buildMethodDefinition(data, options) :
            data;
        // Write the documentation
        if (definition.xmlDocSummary) {
            this.writeXmlDocSummary(definition.xmlDocSummary);
        }
        if (definition.parameters) {
            this.writeXmlDocParagraph(XmlDocUtility.getXmlDocLinesForInOutParameters(definition.parameters));
        }
        var xmlDocReturns = definition.isConstructor ? null : XmlDocUtility.getXmlDocLineForReturnParameter(definition);
        if (xmlDocReturns) {
            this.writeXmlDocParagraph([xmlDocReturns]);
        }
        // Start of the actual method      
        this.writeIndent();
        if (!definition.isPartial) {
            this.writeAccessModifier(definition); // Partial methods are implicitly private                  
        }
        if (definition.isStatic) {
            this.write('static ');
        }
        else if (definition.isAbstract) {
            this.write('abstract ');
        }
        else if (definition.isVirtual) {
            this.write('virtual ');
        }
        if (definition.isPartial) {
            this.write('partial ');
        }
        // Write the return type
        if (!definition.isConstructor) {
            if (definition.isPartial)
                this.write('void '); // partial methods must return void, intentional trailing white space
            else
                this.write((definition.returnTypeName || 'void') + " "); // intentional trailing white space
        }
        this.write(definition.name + "(");
        if (definition.parameters) {
            this.writeInOutParameters(definition.parameters);
        }
        this.write(')');
        if (definition.isAbstract) {
            this.writeEndOfLine(';');
        }
        else {
            this.writeEndOfLine();
            this.writeCodeBlock(contents);
        }
        return this;
    };
    CSharpWriter.prototype.writeInOutParameters = function (data, options) {
        var _this = this;
        if (!data || !data.length) // without at least 1 element, we cannot determine the type
            return this;
        var definitions = elements.isParameter(data[0]) ?
            this.definitionBuilder.buildParameterDefinitions(data, options) : data;
        if (!definitions.length)
            return this;
        var i = 0;
        definitions.forEach(function (p) {
            if (i > 0) {
                _this.write(', ');
            }
            if (p.isOutput) {
                _this.write('out ');
            }
            else if (p.isReference) {
                _this.write('ref '); // The ref keyword can be used for both value- and reference types
            }
            _this.write(p.typeName);
            if (p.isNullable) {
                _this.write('?');
            }
            _this.write(" " + p.name);
            if (p.defaultValue) {
                _this.write(" = " + p.defaultValue);
            }
            i++;
        });
        return this;
    };
    CSharpWriter.prototype.writeAutoProperty = function (data, options) {
        if (!data)
            return this;
        var definition = (elements.isProperty(data)) ?
            this.definitionBuilder.buildPropertyDefinition(data, options) :
            data;
        if (definition.hasGetter != null) {
            console.warn('PropertyDefinition.hasGetter is deprecated. A getter is now written by default. Please use noGetter if you want to omit it.');
        }
        if (definition.hasSetter != null) {
            console.warn('PropertyDefinition.hasSetter is deprecated. A setter is now written by default. Please use noSetter if you want to omit it.');
        }
        this.writePropertyStart(definition);
        this.write(' { ');
        if (!definition.noGetter)
            this.write('get;');
        if (!definition.noSetter) {
            if (!definition.noGetter)
                this.write(' ');
            this.write('set;');
        }
        ;
        this.write(' }');
        if (definition.defaultValue !== undefined) {
            this.write(" = " + definition.defaultValue + ";");
        }
        this.writeEndOfLine();
        return this;
    };
    CSharpWriter.prototype.writePropertyBlock = function (data, getterContents, setterContents, options) {
        var _this = this;
        if (!data)
            return this;
        var definition = (elements.isProperty(data)) ?
            this.definitionBuilder.buildPropertyDefinition(data, options) :
            data;
        this.writePropertyStart(definition);
        this.writeEndOfLine();
        this.writeCodeBlock(function () {
            if (getterContents) {
                _this.writeLine('get');
                _this.writeCodeBlock(getterContents);
            }
            if (setterContents) {
                _this.writeLine('set');
                _this.writeCodeBlock(setterContents);
            }
        });
        return this;
    };
    CSharpWriter.prototype.writePropertyStart = function (definition) {
        if (definition.xmlDocSummary) {
            this.writeXmlDocSummary(definition.xmlDocSummary);
        }
        // Start a new, indented line        
        this.writeIndent();
        // Access modifier
        this.writeAccessModifier(definition);
        // Virtual
        if (definition.isVirtual) {
            this.write('virtual ');
        }
        // Type
        this.write(definition.typeName);
        if (definition.isNullable) {
            this.write('?');
        }
        // Name               
        this.write(" " + definition.name);
    };
    CSharpWriter.prototype.writeAccessModifier = function (data) {
        if (!data)
            return this;
        var accessModifier = (typeof data == 'number') ?
            DefinitionBuilder.getAccessModifierString(data) : // VisibilityKind
            data.accessModifier; // TypeDefinition
        if (!accessModifier)
            return this;
        this.write(accessModifier);
        this.writeWhiteSpace();
        return this;
    };
    CSharpWriter.prototype.getTypeName = function (element) {
        if (!element)
            return null;
        return this.typeNameProvider.getTypeName(element);
    };
    // #region deprecated
    /**
     * Writes a method declaration without a body.
     * @deprecated Use the writeMethodDeclaration() function instead.
     */
    CSharpWriter.prototype.writeInterfaceMethod = function (operation, options) {
        console.warn('writeInterfaceMethod is deprecated. Use the writeMethodDeclaration() function instead. ');
        this.writeMethodDeclaration(operation, options);
        return this;
    };
    /**
     * Writes an indented block of code, wrapped in a method declaration and opening and closing brackets.
     * @deprecated Use the writeMethodBlock() function instead.
     */
    CSharpWriter.prototype.writeClassMethodBlock = function (operation, contents, options) {
        console.warn('writeClassMethodBlock is deprecated. Use the writeMethodBlock() function instead. ');
        this.writeMethodBlock(operation, contents, options);
        return this;
    };
    CSharpWriter.prototype.writeXmlDocSummary = function (data) {
        if (elements.isNamedElement(data)) { // we have no isElement check, but this will do            
            data = DefinitionBuilder.buildXmlDocSummary(data);
        }
        if (!data)
            return this;
        var array = [];
        array.push('<summary>');
        if (typeof data == 'string') {
            // string
            array.push(data);
        }
        else {
            // string[]           
            array.push.apply(array, data);
        }
        array.push('</summary>');
        this.commentWriter.writeCommentLines(array, '/// ');
        return this;
    };
    CSharpWriter.prototype.writeXmlDocParagraph = function (data) {
        if (data == null)
            return this;
        var lines;
        if (typeof data == 'string') {
            lines = [data];
        }
        else
            lines = data;
        this.commentWriter.writeCommentLines(lines, '/// ');
        return this;
    };
    /**
     * Writes a paragraph of xml doc comments, each line starting with forward slashes '/// '.
     * @param lines
     * @deprecated Please use writeXmlDocParagraph instead.
     */
    CSharpWriter.prototype.writeXmlDocLines = function (lines) {
        console.warn('writeXmlDocLines is deprecated. Use the writeXmlDocParagraph() function instead.');
        if (lines == null)
            return this;
        this.commentWriter.writeCommentLines(lines, '/// ');
        return this;
    };
    CSharpWriter.prototype.writeDelimitedCommentParagraph = function (data) {
        if (typeof data == 'string') {
            this.commentWriter.writeDelimitedCommentParagraph(data);
        }
        else
            this.commentWriter.writeDelimitedCommentLines(data);
        return this;
    };
    CSharpWriter.prototype.writeDelimitedCommentLines = function (paragraph) {
        console.warn('writeDelimitedCommentLines is deprecated. Use the writeDelimitedCommentParagraph() function instead.');
        this.commentWriter.writeDelimitedCommentLines(paragraph);
        return this;
    };
    //#endregion Xml Docs    
    CSharpWriter.prototype.joinWrite = function (collection, separator, getStringFunc) {
        var _this = this;
        var isFirst = true;
        collection.forEach(function (c) {
            var value = getStringFunc(c);
            if (!value)
                return;
            if (isFirst) {
                isFirst = false;
            }
            else
                _this.write(separator);
            _this.write(value);
        });
    };
    CSharpWriter.prototype.writeInherits = function (inherits) {
        if (!inherits || !inherits.length)
            return false;
        this.write(' : ');
        this.joinWrite(inherits, ', ', function (name) { return name; });
        return true;
    };
    CSharpWriter.prototype.writeImplements = function (hasGeneralizations, impl) {
        if (!impl || !impl.length)
            return false;
        this.write(hasGeneralizations ? ', ' : ' : ');
        this.joinWrite(impl, ', ', function (name) { return name; });
        return true;
    };
    return CSharpWriter;
}(CodeWriter));
export { CSharpWriter };
//# sourceMappingURL=data:application/json;base64,