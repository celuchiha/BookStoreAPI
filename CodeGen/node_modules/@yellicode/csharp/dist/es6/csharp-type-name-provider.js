import * as elements from '@yellicode/elements';
export class CSharpTypeNameProvider extends elements.DefaultTypeNameProvider {
    getTypeNameForType(type, isDataType) {
        if (!type)
            return null;
        if (isDataType) {
            if (elements.isPrimitiveBoolean(type))
                return "bool";
            if (elements.isPrimitiveInteger(type))
                return "int";
            if (elements.isPrimitiveReal(type))
                return "double"; // By default, a real numeric literal on the right side of the assignment operator is treated as double (https://msdn.microsoft.com/en-us/library/b1e65aza.aspx)
            if (elements.isPrimitiveString(type))
                return "string";
            if (elements.isPrimitiveObject(type))
                return "object";
        }
        return super.getTypeNameForType(type, isDataType);
    }
    static canBeNullable(typedElement, csTypeName) {
        if (!typedElement || !csTypeName)
            return false;
        // A collection cannot be nullable
        if (elements.isMultiplicityElement(typedElement) && typedElement.isMultivalued()) {
            return false;
        }
        // Check the mapped type name (it could come from a custom TypeNameProvider) 
        switch (csTypeName) { // the following cannot be nullable:
            case 'string':
            case 'System.String':
            case 'object':
            case 'System.Object':
                return false;
        }
        // Check the type itself
        const type = typedElement.type;
        if (!type)
            return false;
        return elements.isEnumeration(type) || elements.isDataType(type); // isDataType includes PrimitiveType      
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3NoYXJwLXR5cGUtbmFtZS1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jc2hhcnAtdHlwZS1uYW1lLXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxRQUFRLE1BQU0scUJBQXFCLENBQUM7QUFFaEQsTUFBTSxPQUFPLHNCQUF1QixTQUFRLFFBQVEsQ0FBQyx1QkFBdUI7SUFDakQsa0JBQWtCLENBQUMsSUFBMEIsRUFBRSxVQUFtQjtRQUNyRixJQUFJLENBQUMsSUFBSTtZQUFFLE9BQU8sSUFBSSxDQUFDO1FBRXZCLElBQUksVUFBVSxFQUFFO1lBQ1osSUFBSSxRQUFRLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDO2dCQUFFLE9BQU8sTUFBTSxDQUFDO1lBQ3JELElBQUksUUFBUSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQztnQkFBRSxPQUFPLEtBQUssQ0FBQztZQUNwRCxJQUFJLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDO2dCQUFFLE9BQU8sUUFBUSxDQUFDLENBQUMsZ0tBQWdLO1lBQ3JOLElBQUksUUFBUSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQztnQkFBRSxPQUFPLFFBQVEsQ0FBQztZQUN0RCxJQUFJLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7Z0JBQUUsT0FBTyxRQUFRLENBQUM7U0FDekQ7UUFFRCxPQUFPLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVNLE1BQU0sQ0FBQyxhQUFhLENBQUMsWUFBbUMsRUFBRSxVQUFrQjtRQUMvRSxJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsVUFBVTtZQUM1QixPQUFPLEtBQUssQ0FBQztRQUVqQixrQ0FBa0M7UUFDbEMsSUFBSSxRQUFRLENBQUMscUJBQXFCLENBQUMsWUFBWSxDQUFDLElBQUksWUFBWSxDQUFDLGFBQWEsRUFBRSxFQUFDO1lBQzdFLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBRUQsNkVBQTZFO1FBQzdFLFFBQVEsVUFBVSxFQUFFLEVBQUUsb0NBQW9DO1lBQ3RELEtBQUssUUFBUSxDQUFDO1lBQ2QsS0FBSyxlQUFlLENBQUM7WUFDckIsS0FBSyxRQUFRLENBQUM7WUFDZCxLQUFLLGVBQWU7Z0JBQ2hCLE9BQU8sS0FBSyxDQUFDO1NBQ3BCO1FBRUQsd0JBQXdCO1FBQ3hCLE1BQU0sSUFBSSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUM7UUFDL0IsSUFBSSxDQUFDLElBQUk7WUFBRSxPQUFPLEtBQUssQ0FBQztRQUV4QixPQUFPLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLDBDQUEwQztJQUNoSCxDQUFDO0NBQ0oifQ==