import * as elements from '@yellicode/elements';
import * as opts from './options';
import { ParameterDirectionKind } from '@yellicode/elements';
import { CSharpTypeNameProvider } from './csharp-type-name-provider';
export class DefinitionBuilder {
    constructor(typeNameProvider) {
        this.typeNameProvider = typeNameProvider;
    }
    buildNamespaceDefinition(pack, options) {
        if (!options)
            options = {};
        // We have no namespace features yet, but the NamespaceFeatures type is there for future extension
        const features = (options.features === undefined) ? opts.NamespaceFeatures.All : options.features;
        let name;
        if (options.writeFullName) {
            const allPackages = pack.getNestingPackages();
            allPackages.push(pack); // add the package itself
            name = allPackages.map(p => p.name).join('.');
        }
        else
            name = pack.name;
        return { name: name };
    }
    buildClassDefinition(type, options) {
        // Initialize options and features
        if (!options)
            options = {};
        const features = (options.features === undefined) ? opts.ClassFeatures.All : options.features;
        // Build the base definition
        const definition = DefinitionBuilder.buildTypeDefinition(type, !!(features & opts.ClassFeatures.XmlDocSummary), options);
        // Build the class-specific definition
        definition.inherits = DefinitionBuilder.buildInherits(type, options.inherits);
        definition.implements = DefinitionBuilder.buildImplements(type, options.implements);
        if (elements.isClass(type)) {
            definition.isAbstract = type.isAbstract || options.isAbstract;
        }
        return definition;
    }
    buildStructDefinition(type, options) {
        // Initialize options and features
        if (!options)
            options = {};
        const features = (options.features === undefined) ? opts.StructFeatures.All : options.features;
        // Build the base definition
        const definition = DefinitionBuilder.buildTypeDefinition(type, !!(features & opts.StructFeatures.XmlDocSummary), options);
        // Build the struct-specific definition        
        definition.implements = DefinitionBuilder.buildImplements(type, options.implements);
        return definition;
    }
    buildInterfaceDefinition(type, options) {
        // Initialize options and features
        if (!options)
            options = {};
        const features = (options.features === undefined) ? opts.InterfaceFeatures.All : options.features;
        // Build the base definition
        const definition = DefinitionBuilder.buildTypeDefinition(type, !!(features & opts.InterfaceFeatures.XmlDocSummary), options);
        // Build the interface-specific definition
        definition.inherits = DefinitionBuilder.buildInherits(type, options.inherits);
        return definition;
    }
    buildEnumMemberDefinition(literal, isLast, options) {
        // Initialize options and features
        if (!options)
            options = {};
        const features = (options.features === undefined) ? opts.EnumMemberFeatures.All : options.features;
        const buildInitializers = !!(features & opts.EnumFeatures.Initializers);
        // Build the base definition
        const definition = DefinitionBuilder.buildDefinitionBase(literal, !!(features & opts.EnumMemberFeatures.XmlDocSummary));
        // Build the member-specific definition
        definition.isLast = isLast || false;
        if (buildInitializers && literal.specification != null) { // using '!=' on purpose  
            const specification = literal.specification;
            definition.value = elements.isLiteralInteger(specification) ? specification.value : undefined;
        }
        return definition;
    }
    buildEnumDefinition(type, options) {
        // Initialize options and features
        if (!options)
            options = {};
        const features = (options.features === undefined) ? opts.EnumFeatures.All : options.features;
        // Build the base definition         
        const definition = DefinitionBuilder.buildDefinitionBase(type, !!(features & opts.EnumFeatures.XmlDocSummary));
        // Build the enum-specific definition
        definition.accessModifier = DefinitionBuilder.getAccessModifierString(type.visibility);
        // Build enum members
        if (elements.isEnumeration(type) && type.ownedLiterals) {
            const members = [];
            // Pass on enum features to enum member features
            let memberFeatures = opts.EnumMemberFeatures.None;
            if (features & opts.EnumFeatures.XmlDocSummary)
                memberFeatures |= opts.EnumMemberFeatures.XmlDocSummary;
            if (features & opts.EnumFeatures.Initializers)
                memberFeatures |= opts.EnumMemberFeatures.Initializers;
            type.ownedLiterals.forEach((literal, index) => {
                let isLast = index === type.ownedLiterals.length - 1;
                const member = this.buildEnumMemberDefinition(literal, isLast, { features: memberFeatures });
                members.push(member);
            });
            definition.members = members;
        }
        return definition;
    }
    buildPropertyDefinition(property, options) {
        // Initialize options and features
        if (!options)
            options = {};
        const features = (options.features === undefined) ? opts.PropertyFeatures.All : options.features;
        const ownerIsInterface = elements.isInterface(property.owner);
        // Build the base definition         
        const definition = DefinitionBuilder.buildDefinitionBase(property, !!(features & opts.PropertyFeatures.XmlDocSummary));
        // Build the property-specific definition
        const typename = this.getFullTypeName(property, options.collectionType || null, 'object');
        definition.accessModifier = DefinitionBuilder.getAccessModifierString(property.visibility);
        definition.isVirtual = options.virtual;
        definition.typeName = typename;
        if (!ownerIsInterface && (features & opts.PropertyFeatures.AccessModifier))
            definition.accessModifier = DefinitionBuilder.getAccessModifierString(property.visibility);
        if ((features & opts.PropertyFeatures.OptionalModifier) &&
            property.lower === 0 &&
            CSharpTypeNameProvider.canBeNullable(property, typename)) {
            definition.isNullable = true;
        }
        definition.noSetter = property.isReadOnly || property.isDerived;
        definition.defaultValue = DefinitionBuilder.getDefaultValueString(property.defaultValue);
        return definition;
    }
    buildMethodDefinition(operation, options) {
        if (!options)
            options = {};
        const features = (options.features === undefined) ? opts.MethodFeatures.All : options.features;
        const ownerIsInterface = elements.isInterface(operation.owner);
        // Build the base definition         
        const definition = DefinitionBuilder.buildDefinitionBase(operation, !!(features & opts.MethodFeatures.XmlDocSummary));
        definition.isConstructor = operation.isConstructor;
        definition.isStatic = operation.isStatic;
        definition.isPartial = options.isPartial;
        if (!operation.isConstructor) {
            definition.isAbstract = options.isAbstract || (!options.isVirtual && operation.isAbstract);
            definition.isVirtual = options.isVirtual;
        }
        if (!ownerIsInterface)
            definition.accessModifier = DefinitionBuilder.getAccessModifierString(operation.visibility);
        // Get the return type and documentation
        if (!operation.isConstructor) {
            var returnParameter = operation.getReturnParameter();
            if (returnParameter) {
                definition.returnTypeName = this.getFullTypeName(returnParameter, options.collectionType || null);
                if (features & opts.MethodFeatures.XmlDocReturns) {
                    definition.xmlDocReturns = DefinitionBuilder.buildXmlDocSummary(operation);
                }
            }
        }
        // Build parameter definitions      
        definition.parameters = this.buildParameterDefinitions(operation.ownedParameters, options);
        return definition;
    }
    buildParameterDefinitions(params, options) {
        if (!options)
            options = {};
        const features = (options.features === undefined) ? opts.MethodFeatures.All : options.features;
        const inOutParameters = [];
        if (!params)
            return inOutParameters;
        params.forEach(p => {
            if (p.direction === ParameterDirectionKind.return)
                return;
            const typeName = this.getFullTypeName(p, options.collectionType || null, 'object');
            const paramDefinition = DefinitionBuilder.buildDefinitionBase(p, !!(features & opts.MethodFeatures.XmlDocParameters));
            paramDefinition.isOutput = p.direction === elements.ParameterDirectionKind.out;
            paramDefinition.isReference = p.direction === elements.ParameterDirectionKind.inout;
            paramDefinition.isNullable = p.lower === 0 && CSharpTypeNameProvider.canBeNullable(p, typeName);
            paramDefinition.typeName = typeName;
            paramDefinition.defaultValue = DefinitionBuilder.getDefaultValueString(p.defaultValue),
                inOutParameters.push(paramDefinition);
        });
        return inOutParameters;
    }
    static buildInherits(type, additional) {
        if (!elements.isClassifier(type)) {
            return;
        }
        const allNames = [];
        if (type.generalizations) {
            // todo: allow qualifiedName
            allNames.push(...type.generalizations.map(g => g.general.name));
        }
        if (additional) {
            allNames.push(...additional);
        }
        return allNames.length ? allNames : undefined;
    }
    static buildImplements(type, additional) {
        if (!elements.isBehavioredClassifier(type)) {
            return;
        }
        const allNames = [];
        if (type.interfaceRealizations) {
            // todo: allow qualifiedName 
            allNames.push(...type.interfaceRealizations.map(ir => ir.contract.name));
        }
        if (additional) {
            allNames.push(...additional);
        }
        return allNames.length ? allNames : undefined;
    }
    static buildXmlDocSummary(element) {
        if (!element.ownedComments || !element.ownedComments.length) {
            return undefined;
        }
        return element.ownedComments.map(c => c.body);
    }
    static buildTypeDefinition(type, buildXmlDocSummary, options) {
        var definition = DefinitionBuilder.buildDefinitionBase(type, buildXmlDocSummary);
        definition.accessModifier = DefinitionBuilder.getAccessModifierString(type.visibility);
        definition.isPartial = options.isPartial;
        return definition;
    }
    static buildDefinitionBase(element, buildXmlDocSummary) {
        var definition = {
            name: element.name,
            xmlDocSummary: buildXmlDocSummary ? DefinitionBuilder.buildXmlDocSummary(element) : undefined
        };
        return definition;
    }
    static getDefaultValueString(defaultValue) {
        if (!defaultValue)
            return undefined;
        return elements.isLiteralString(defaultValue) ?
            `"${defaultValue.value}"` :
            defaultValue.getStringValue();
    }
    static getAccessModifierString(visibility) {
        switch (visibility) {
            case elements.VisibilityKind.public:
                return 'public';
            case elements.VisibilityKind.private:
                return 'private';
            case elements.VisibilityKind.protected:
                return 'protected';
            case elements.VisibilityKind.package:
                return 'internal';
            default:
                return undefined;
        }
    }
    getFullTypeName(typedElement, collectionType, fallback) {
        const typeName = this.typeNameProvider.getTypeName(typedElement) || fallback;
        if (!typeName)
            return; // no type name and no fallback
        if (elements.isMultiplicityElement(typedElement) && typedElement.isMultivalued()) {
            switch (collectionType) {
                case opts.CollectionType.IList:
                    return `IList<${typeName}>`;
                case opts.CollectionType.IEnumerable:
                    return `IEnumerable<${typeName}>`;
                default:
                    return `ICollection<${typeName}>`;
            }
        }
        else
            return typeName;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmaW5pdGlvbi1idWlsZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2RlZmluaXRpb24tYnVpbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssUUFBUSxNQUFNLHFCQUFxQixDQUFDO0FBQ2hELE9BQU8sS0FBSyxJQUFJLE1BQU0sV0FBVyxDQUFDO0FBRWxDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzdELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRXJFLE1BQU0sT0FBTyxpQkFBaUI7SUFDMUIsWUFBb0IsZ0JBQTJDO1FBQTNDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBMkI7SUFBSSxDQUFDO0lBRTdELHdCQUF3QixDQUFDLElBQXNCLEVBQUUsT0FBK0I7UUFDbkYsSUFBSSxDQUFDLE9BQU87WUFBRSxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQzNCLGtHQUFrRztRQUNsRyxNQUFNLFFBQVEsR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7UUFDbEcsSUFBSSxJQUFZLENBQUM7UUFDakIsSUFBSSxPQUFPLENBQUMsYUFBYSxFQUFFO1lBQ3ZCLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1lBQzlDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyx5QkFBeUI7WUFDakQsSUFBSSxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2pEOztZQUNJLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxD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