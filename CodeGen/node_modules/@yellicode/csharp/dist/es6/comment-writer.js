import { CodeWriterUtility } from '@yellicode/core';
export class CSharpCommentWriter {
    constructor(writer, maxCommentWidth) {
        this.writer = writer;
        this.maxCommentWidth = maxCommentWidth;
    }
    writeDelimitedCommentParagraph(text) {
        if (text == null)
            return;
        const lines = [text];
        this.writer.writeLine("/*");
        this.writeCommentLines(lines, "* ");
        this.writer.writeLine("*/");
    }
    writeDelimitedCommentLines(lines) {
        if (lines == null)
            return;
        this.writer.writeLine("/*");
        this.writeCommentLines(lines, "* ");
        this.writer.writeLine("*/");
    }
    writeCommentLines(lines, prefix) {
        if (!lines)
            return;
        lines.forEach(line => {
            if (line == null)
                return;
            if (this.maxCommentWidth > 0 && line.length > this.maxCommentWidth) {
                // See if we can split the line
                const split = CodeWriterUtility.wordWrap(line, this.maxCommentWidth);
                split.forEach(s => {
                    this.writer.writeLine(`${prefix}${s}`);
                });
            }
            else
                this.writer.writeLine(`${prefix}${line}`);
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWVudC13cml0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tbWVudC13cml0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFjLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFaEUsTUFBTSxPQUFPLG1CQUFtQjtJQUU1QixZQUFvQixNQUFrQixFQUFVLGVBQXVCO1FBQW5ELFdBQU0sR0FBTixNQUFNLENBQVk7UUFBVSxvQkFBZSxHQUFmLGVBQWUsQ0FBUTtJQUV2RSxDQUFDO0lBRU0sOEJBQThCLENBQUMsSUFBWTtRQUM5QyxJQUFJLElBQUksSUFBSSxJQUFJO1lBQUUsT0FBTztRQUN6QixNQUFNLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDL0IsQ0FBQztJQUVNLDBCQUEwQixDQUFDLEtBQWU7UUFDN0MsSUFBSSxLQUFLLElBQUksSUFBSTtZQUFFLE9BQU87UUFDMUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUMvQixDQUFDO0lBRU0saUJBQWlCLENBQUMsS0FBZSxFQUFFLE1BQWU7UUFDckQsSUFBSSxDQUFDLEtBQUs7WUFBRSxPQUFPO1FBRW5CLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDakIsSUFBSSxJQUFJLElBQUksSUFBSTtnQkFDWixPQUFPO1lBRVgsSUFBSSxJQUFJLENBQUMsZUFBZSxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUU7Z0JBQ2hFLCtCQUErQjtnQkFDL0IsTUFBTSxLQUFLLEdBQWEsaUJBQWlCLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7Z0JBQy9FLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ2QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDM0MsQ0FBQyxDQUFDLENBQUE7YUFDTDs7Z0JBQ0ksSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxNQUFNLEdBQUcsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNuRCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSiJ9