(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@yellicode/core')) :
    typeof define === 'function' && define.amd ? define(['exports', '@yellicode/core'], factory) :
    (factory((global['@yellicode/html'] = {}),global.core));
}(this, (function (exports,core) { 'use strict';

    /**
     * This file contains a simple HtmlWriter that makes generating HTML code easier.
     */
    /**
     * https://html.spec.whatwg.org/multipage/syntax.html#void-elements
     */
    const voidHtmlElements = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr'];
    /**
     * A very basic CodeWriter for writing HTML.
     */
    class HtmlWriter extends core.CodeWriter {
        constructor(textWriter) {
            super(textWriter);
        }
        writeOpeningTag(tagName, options) {
            this.writeIndent();
            this.write(`<${tagName}`);
            if (options.classNames) {
                this.write(` class="${options.classNames}"`);
            }
            if (options.attributes) {
                for (const key in options.attributes) {
                    if (options.attributes.hasOwnProperty(key)) {
                        const value = options.attributes[key];
                        if (typeof value == "boolean") {
                            if (value)
                                this.write(` ${key}`);
                        }
                        else
                            this.write(` ${key}="${options.attributes[key]}"`);
                    }
                }
            }
            this.write('>');
            return this;
        }
        writeElementFromCallback(tagName, options, innerHtml) {
            this.writeOpeningTag(tagName, options);
            this.writeEndOfLine();
            this.increaseIndent();
            if (innerHtml)
                innerHtml(this);
            this.decreaseIndent();
            this.writeLine(`</${tagName}>`);
        }
        ;
        writeElementFromString(tagName, options, innerHtml) {
            this.writeOpeningTag(tagName, options);
            if (innerHtml) {
                this.write(innerHtml);
            }
            if (innerHtml || voidHtmlElements.indexOf(tagName) === -1) {
                this.writeEndOfLine(`</${tagName}>`);
            }
            else
                this.writeEndOfLine(); // this is a void element
        }
        writeElement(tagName, options, contents) {
            if (!options)
                options = {};
            if (!contents || typeof contents == "string") {
                this.writeElementFromString(tagName, options, contents);
            }
            else {
                this.writeElementFromCallback(tagName, options, contents);
            }
            return this;
        }
    }

    exports.HtmlWriter = HtmlWriter;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
