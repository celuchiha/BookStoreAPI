/*
 * Copyright (c) 2019 Yellicode
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
var fs = require('fs');
var path = require('path');
var os = require('os');
import { DefaultRegionMarkerFormatter } from './region-marker-formatter';
/**
 * Internal writer class that is passed to WriterBase implementations. We don't let people inherit from TextWriter directly because
 * we want to control the instantiation and lifetime of each StreamWriter instance.
 */
var StreamWriter = /** @class */ (function () {
    /**
     * Constructor. Creates a new StreamWriter that writes to the provided WritableStream.
     * @param stream A Node.js WritableStream instance.
     * @param regionMarkerFormatter An optional RegionMarkerFormatter.
     */
    function StreamWriter(stream, regionMarkerFormatter) {
        this.stream = stream;
        this.indent = 0;
        this.textFileCache = {};
        this.endOfLineString = os.EOL;
        this.indentString = "\t";
        this.templateDirName = path.resolve('.');
        this.fileRegionMapper = regionMarkerFormatter == null ? new DefaultRegionMarkerFormatter() : regionMarkerFormatter;
    }
    /******************************************************************************
     *                          TextWriter implementation
    ******************************************************************************/
    /**
    * Writes a new line to the output. The line is indented automatically. The line is ended with the endOfLineString.
    * @param value The line to write. When omitted, only the endOfLineString is written.
    */
    StreamWriter.prototype.writeLine = function (value) {
        if (value) {
            this.stream.write(this.createIndentString() + value + this.endOfLineString);
        }
        else
            this.stream.write(this.endOfLineString);
        return this;
    };
    ;
    /**
    * Writes a collection of lines to the output. Each line is indented automatically and ended with the endOfLineString.
    * @param values The lines to write.
    * @param delimiter An optional delimiter to be written at the end of each line, except for the last one.
    */
    StreamWriter.prototype.writeLines = function (values, delimiter) {
        var _this = this;
        if (!values)
            return this;
        var len = values.length;
        values.forEach(function (value, index) {
            _this.stream.write(_this.createIndentString() + value);
            if (delimiter && index < len - 1) {
                _this.stream.write(delimiter);
            }
            _this.stream.write(_this.endOfLineString);
        });
        return this;
    };
    /**
     * Writes a new line to the output while temporarily increasing the indent. The line is ended with the endOfLineString.
     * @param value The line to write.
     */
    StreamWriter.prototype.writeLineIndented = function (value) {
        this.stream.write(this.indentString + this.createIndentString() + value + this.endOfLineString);
        return this;
    };
    StreamWriter.prototype.writeEndOfLine = function (value) {
        if (value) {
            this.stream.write(value);
        }
        this.stream.write(this.endOfLineString);
        return this;
    };
    StreamWriter.prototype.writeIndent = function () {
        this.stream.write(this.createIndentString());
        return this;
    };
    ;
    StreamWriter.prototype.write = function (value) {
        if (value == null)
            return this; // avoid 'May not write null values to stream'
        this.stream.write(value);
        return this;
    };
    ;
    StreamWriter.prototype.writeWhiteSpace = function () {
        this.write(" ");
        return this;
    };
    StreamWriter.prototype.increaseIndent = function () {
        this.indent++;
        return this;
    };
    StreamWriter.prototype.decreaseIndent = function () {
        if (this.indent > 0) {
            this.indent--;
        }
        return this;
    };
    StreamWriter.prototype.clearIndent = function () {
        this.indent = 0;
        return this;
    };
    StreamWriter.prototype.writeFile = function (path, encoding) {
        var fullPath = this.resolveFileName(path);
        var contents = this.readTextFile(fullPath, false, encoding);
        if (contents == null || contents.length <= 0)
            return this;
        this.stream.write(contents);
        return this;
    };
    StreamWriter.prototype.writeFileRegion = function (regionName, path, encoding) {
        if (this.fileRegionMapper == null || regionName == null || regionName.length === 0 || path == null || path.length === 0)
            return false;
        var fullPath = this.resolveFileName(path);
        var contents = this.readTextFile(fullPath, true, encoding);
        if (contents == null || contents.length <= 0)
            return false;
        // First find the region match 
        var regionStartMarker = this.fileRegionMapper.getRegionStartMarker(regionName);
        var regionStartIndex = contents.indexOf(regionStartMarker);
        if (regionStartIndex < 0) {
            return false;
        }
        var regionEndMarker = this.fileRegionMapper.getRegionEndMarker(regionName);
        var regionEndIndex = contents.indexOf(regionEndMarker, regionStartIndex);
        if (regionEndIndex < 0) {
            return false;
        }
        var region = contents.substring(regionStartIndex + regionStartMarker.length, regionEndIndex);
        this.stream.write(region);
        this.writeEndOfLine();
        return true;
    };
    /******************************************************************************
     *                         End of TextWriter implementation
    ******************************************************************************/
    StreamWriter.prototype.createIndentString = function () {
        var result = "";
        for (var i = 0; i < this.indent; i++) {
            result += this.indentString;
        }
        return result;
    };
    ;
    StreamWriter.prototype.resolveFileName = function (fileName) {
        return path.join(this.templateDirName, fileName);
    };
    StreamWriter.prototype.readTextFile = function (path, useCache, encoding) {
        if (useCache && this.textFileCache.hasOwnProperty(path)) {
            return this.textFileCache[path];
        }
        if (!fs.existsSync(path)) {
            //  this.writeLine(`Cannot write the contents of file '${fullPath}' because the file does not exist.`);
            if (useCache) {
                this.textFileCache[path] = null;
            }
            return undefined;
        }
        if (encoding != null) {
            encoding = encoding.toLowerCase();
        }
        else
            encoding = 'utf-8';
        var contents = fs.readFileSync(path, encoding);
        if (contents == null || contents.length === 0)
            return undefined;
        // Remove any utf-8 BOM if there is any
        if (encoding === 'utf-8' && contents.charCodeAt(0) === 0xFEFF) {
            contents = contents.slice(1);
        }
        if (useCache) {
            this.textFileCache[path] = contents;
        }
        return contents;
    };
    return StreamWriter;
}());
export { StreamWriter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyZWFtLXdyaXRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJlYW0td3JpdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUNILElBQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6QixJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDN0IsSUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBR3pCLE9BQU8sRUFBeUIsNEJBQTRCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUVoRzs7O0dBR0c7QUFFSDtJQVNJOzs7O09BSUc7SUFDSCxzQkFBb0IsTUFBNkIsRUFBRSxxQkFBNkM7UUFBNUUsV0FBTSxHQUFOLE1BQU0sQ0FBdUI7UUFiekMsV0FBTSxHQUFXLENBQUMsQ0FBQztRQUVuQixrQkFBYSxHQUFzQyxFQUFFLENBQUM7UUFHdkQsb0JBQWUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDO1FBQ3pCLGlCQUFZLEdBQUcsSUFBSSxDQUFDO1FBUXZCLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcscUJBQXFCLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLDRCQUE0QixFQUFFLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDO0lBQ3ZILENBQUM7SUFFRDs7bUZBRStFO0lBQy9FOzs7TUFHRTtJQUNLLGdDQUFTLEdBQWhCLFVBQWlCLEtBQWM7UUFDM0IsSUFBSSxLQUFLLEVBQUM7WUFDTixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQy9FOztZQUNJLElBQUksQ0FBQyxNQUFNLENB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