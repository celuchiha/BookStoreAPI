/*
 * Copyright (c) 2019 Yellicode
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
import * as elements from "@yellicode/elements";
/**
 * Default implementation of the TypeNameProvider interface. This implementation
 * returns type names as-is, but allows inheritors to provide their own implementation
 * by overriding getTypeNameForType and/or getTypeNameForTypedElement.
 * @deprecated DefaultTypeNameProvider has moved to the 'yellicode/elements' package, please update your references.
 */
var DefaultTypeNameProvider = /** @class */ (function () {
    function DefaultTypeNameProvider() {
        console.warn("DefaultTypeNameProvider has moved to the '@yellicode/elements' package, please update your references.");
    }
    DefaultTypeNameProvider.prototype.getTypeName = function (typeOrTypedElement) {
        if (elements.isTypedElement(typeOrTypedElement)) {
            // The argument is a typedElement            
            var isMultiValued = elements.isMultiplicityElement(typeOrTypedElement) && typeOrTypedElement.isMultivalued();
            return this.getTypeNameForTypedElement(typeOrTypedElement, elements.isDataType(typeOrTypedElement.type), isMultiValued);
        }
        else {
            // The argument is a type
            return this.getTypeNameForType(typeOrTypedElement, elements.isDataType(typeOrTypedElement));
        }
    };
    /**
    * Returns the name of the provided type. This function is also called by getTypeNameOfTypedElement() if that function is not overridden.
    * @param type The type information.
    * @param isDataType Indicates if the type is a data type (that is, an Enumeration, PrimitiveType or DataType).
    */
    DefaultTypeNameProvider.prototype.getTypeNameForType = function (type, isDataType) {
        // Note: we don't use isDataType in this default implementation, but it is considered relevant for implementers.
        return type ? type.name : null;
    };
    /**
    * Returns the name of the provided element's type. Internally, this function calls getTypeNameForType for the type, but
    * you should override this function if you need to provide different type names for a type depending on the context.
    * For example, you may return a different type name for a property or parameter that is multi-valued.
    * @param typedElement Any element that has a type.
    * @param isDataType Indicates if the element's type is a data type (that is, an Enumeration, PrimitiveType or DataType).
    * @param isMultiValued Indicates if the TypedElement is multi-valued (that is, has an upper bound greater than 1).
    */
    DefaultTypeNameProvider.prototype.getTypeNameForTypedElement = function (typedElement, isDataType, isMultiValued) {
        // Note: we don't use isMultiValued in this default implementation, but it is considered relevant for implementers.
        return this.getTypeNameForType(typedElement.type, isDataType);
    };
    /**
     * DEPRECATED: Returns the name of the provided element's data type. Override this function to map primitives and other data types
     * (both built-in or types exported from a profile) to the target language. The default implementation calls the
     * getDataTypeNameForType function using the type of the typedElement.
     * @param typedElement Any TypedElement instance.
     * @deprecated Please override getTypeNameForTypedElement instead.
     */
    DefaultTypeNameProvider.prototype.getDataTypeName = function (typedElement) {
        console.warn("DefaultTypeNameProvider.getDataTypeName is deprecated. Please override getTypeNameForTypedElement instead.");
        var isMultiValued = elements.isMultiplicityElement(typedElement) && typedElement.isMultivalued();
        return this.getTypeNameForTypedElement(typedElement, true, isMultiValued);
    };
    /**
    * DEPRECATED: Returns the name of the provided data type. Override this function to map primitives and other data types
    * (both built-in or types exported from a profile) to the target language.
    * @param type The type information.
    * @deprecated Please override getTypeNameForType instead.
    */
    DefaultTypeNameProvider.prototype.getDataTypeNameForType = function (type) {
        console.warn("DefaultTypeNameProvider.getDataTypeNameForType is deprecated. Please override getTypeNameForType instead.");
        return this.getTypeNameForType(type, true);
    };
    /**
     * DEPRECATED: Returns the name of the provided element's complex type (any type that is not a DataType). Override this function to provide
     * a custom name for the complex type. The default implementation calls the getComplexTypeNameForType function using
     * the type of the typedElement.
     * @param typedElement Any TypedElement instance.
     * @deprecated Please override getTypeNameForTypedElement instead.
     */
    DefaultTypeNameProvider.prototype.getComplexTypeName = function (typedElement) {
        console.warn("DefaultTypeNameProvider.getComplexTypeName is deprecated. Please override getTypeNameForTypedElement instead.");
        var isMultiValued = elements.isMultiplicityElement(typedElement) && typedElement.isMultivalued();
        return this.getTypeNameForTypedElement(typedElement, false, isMultiValued);
    };
    /**
    * DEPRECATED: Returns the name of the provided complex type (any type that is not a DataType). Override this function to provide
    * a custom name for the complex type.
    * @param type The type information.
    * @deprecated Please override getTypeNameForType instead.
    */
    DefaultTypeNameProvider.prototype.getComplexTypeNameForType = function (type) {
        console.warn("DefaultTypeNameProvider.getComplexTypeNameForType is deprecated. Please override getTypeNameForType instead.");
        return this.getTypeNameForType(type, false);
    };
    return DefaultTypeNameProvider;
}());
export { DefaultTypeNameProvider };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZS1uYW1lLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3R5cGUtbmFtZS1wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFDSCxPQUFPLEtBQUssUUFBUSxNQUFNLHFCQUFxQixDQUFDO0FBd0JoRDs7Ozs7R0FLRztBQUNIO0lBQ0k7UUFDSSxPQUFPLENBQUMsSUFBSSxDQUFDLHdHQUF3RyxDQUFDLENBQUM7SUFDM0gsQ0FBQztJQVlNLDZDQUFXLEdBQWxCLFVBQW1CLGtCQUFnRTtRQUMvRSxJQUFJLFFBQVEsQ0FBQyxjQUFjLENBQUMsa0JBQWtCLENBQUMsRUFBRTtZQUM3Qyw2Q0FBNkM7WUFDN0MsSUFBTSxhQUFhLEdBQUcsUUFBUSxDQUFDLHFCQUFxQixDQUFDLGtCQUFrQixDQUFDLElBQUksa0JBQWtCLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDL0csT0FBTyxJQUFJLENBQUMsMEJBQTBCLENBQUMsa0JBQWtCLEVBQUUsUUFBUSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQztTQUMzSDthQUNJO1lBQ0QseUJBQXlCO1lBQ3pCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGtCQUFrQixFQUFFLFFBQVEsQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO1NBQy9GO0lBQ0wsQ0FBQztJQUVBOzs7O01BSUU7SUFDcUIsb0RBQWtCLEdBQTFDLFVBQTJDLElBQTBCLEVBQUUsVUFBbUI7UUFDdEYsZ0hBQWdIO1FBQ2hILE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDbkMsQ0FBQztJQUVBOzs7Ozs7O01BT0U7SUFDcUIsNERBQTBCLEdBQWxELFVBQW1ELFlBQW1DLEVBQUUsVUFBbUIsRUFBRSxhQUFzQjtRQUMvSCxtSEFBbUg7UUFDbkgsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ21CLGlEQUFlLEdBQXJDLFVBQXNDLFlBQW1DO1FBQ3JFLE9BQU8sQ0FBQyxJQUFJLENBQUMsNEdBQTRHLENBQUMsQ0FBQztRQUMzSCxJQUFNLGFBQWEsR0FBRyxRQUFRLENBQUMscUJBQXFCLENBQUMsWUFBWSxDQUFDLElBQUksWUFBWSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ25HLE9BQU8sSUFBSSxDQUFDLDBCQUEwQixDQUFDLFlBQVksRUFBRSxJQUFJLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDOUUsQ0FBQztJQUVBOzs7OztNQUtFO0lBQ21CLHdEQUFzQixHQUE1QyxVQUE2QyxJQUEwQjtRQUNuRSxPQUFPLENBQUMsSUFBSSxDQUFDLDJHQUEyRyxDQUFDLENBQUM7UUFDMUgsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDbUIsb0RBQWtCLEdBQXhDLFVBQXlDLFlBQW1DO1FBQ3hFLE9BQU8sQ0FBQyxJQUFJLENBQUMsK0dBQStHLENBQUMsQ0FBQztRQUM5SCxJQUFNLGFBQWEsR0FBRyxRQUFRLENBQUMscUJBQXFCLENBQUMsWUFBWSxDQUFDLElBQUksWUFBWSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ25HLE9BQU8sSUFBSSxDQUFDLDBCQUEwQixDQUFDLFlBQVksRUFBRSxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDL0UsQ0FBQztJQUVBOzs7OztNQUtFO0lBQ21CLDJEQUF5QixHQUEvQyxVQUFnRCxJQUEwQjtRQUN0RSxPQUFPLENBQUMsSUFBSSxDQUFDLDhHQUE4RyxDQUFDLENBQUM7UUFDN0gsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFTCw4QkFBQztBQUFELENBQUMsQUFsR0QsSUFrR0MifQ==