/*
 * Copyright (c) 2019 Yellicode
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
import * as path from 'path';
import * as fs from 'fs';
import { ModelReader } from '@yellicode/elements';
import { StreamWriter } from './stream-writer';
import { FileSystemUtility } from './file-system-utility';
export var OutputMode;
(function (OutputMode) {
    /**
     * The output file will be truncated if it exists. This is the default value.
     */
    OutputMode[OutputMode["Overwrite"] = 0] = "Overwrite";
    /**
     * The output file will not be truncated if it already exists. Use this option if you want
     * to update the file manually once it is generated.
     */
    OutputMode[OutputMode["Once"] = 1] = "Once";
    /**
     * The template output will be appended to the file if it already exists. The file is created if it
     * does not exist.
     */
    OutputMode[OutputMode["Append"] = 2] = "Append";
})(OutputMode || (OutputMode = {}));
var InternalGenerator = /** @class */ (function () {
    function InternalGenerator() {
        this.outputMode = OutputMode.Overwrite;
        //this.templateArgs = InternalGenerator.parseTemplateArgs(process.argv);
        this.parseProcessArgs(process.argv);
        var startedMessage = { cmd: 'processStarted' };
        this.sendProcessMessage(startedMessage);
    }
    InternalGenerator.prototype.parseProcessArgs = function (args) {
        for (var index = 0; index < args.length; index++) {
            var val = args[index];
            if (val === '--templateArgs') {
                this.templateArgs = InternalGenerator.parseTemplateArgs(args, index);
            }
            else if (val === '--outputMode') {
                this.outputMode = InternalGenerator.parseOutputMode(args, index) || this.outputMode;
            }
        }
    };
    InternalGenerator.parseOutputMode = function (args, index) {
        if (args.length <= index + 1)
            return null;
        var outputModeString = args[index + 1];
        switch (outputModeString) {
            case 'append':
                return OutputMode.Append;
            case 'once':
                return OutputMode.Once;
            case 'overwrite':
                return OutputMode.Overwrite;
            default:
                return null;
        }
    };
    InternalGenerator.parseTemplateArgs = function (args, index) {
        if (args.length <= index + 1)
            return null;
        var templateArgsString = args[index + 1];
        if (templateArgsString.length > 0) {
            return JSON.parse(templateArgsString);
        }
        return null;
    };
    InternalGenerator.prototype.sendProcessMessage = function (message) {
        process.send(message); // https://github.com/Microsoft/TypeScript/issues/10158        
    };
    InternalGenerator.prototype.generate = function (options, template) {
        this.generateInternal(options, function (writer) {
            template(writer);
            return Promise.resolve();
        });
    };
    InternalGenerator.prototype.generateAsync = function (options, template) {
        this.generateInternal(options, template);
    };
    /**
     * Executes the provided template using the model that was configured in the code generation configuration.
     */
    InternalGenerator.prototype.generateFromModel = function (options, template) {
        var _this = this;
        this.getModel(options)
            .then(function (model) {
            _this.generateInternal(options, function (writer) {
                template(writer, model);
                return Promise.resolve();
            });
        }).catch(function (err) {
            console.log(err);
        });
    };
    InternalGenerator.prototype.generateFromModelAsync = function (options, template) {
        var _this = this;
        this.getModel(options)
            .then(function (model) {
            _this.generateInternal(options, function (writer) {
                return template(writer, model);
            });
        }).catch(function (err) {
            console.log(err);
        });
    };
    InternalGenerator.prototype.generateInternal = function (options, callback) {
        var _this = this;
        // Get the working directory. The host will make sure that this is the directory in which the template resides.
        var templateDirName = path.resolve('./');
        // console.log('Generator: Template directory name is \'%s\'', templateDirName);
        var fullOutputFileName = path.join(templateDirName, options.outputFile);
        // Ensure that the directory exists        
        FileSystemUtility.ensureDirectory(path.dirname(fullOutputFileName));
        // Let the host know that we started something so that we don't get killed
        var startedMessage = { cmd: 'generateStarted' };
        this.sendProcessMessage(startedMessage);
        // console.log('Generator: Generating file \'%s\'...', fullOutputFileName);
        var mode = options.outputMode === undefined ? this.outputMode : options.outputMode;
        if (mode === OutputMode.Once && fs.existsSync(fullOutputFileName)) {
            // Don't regenerate the file
            var finishedMessage = { cmd: 'generateFinished' };
            this.sendProcessMessage(finishedMessage);
            return;
        }
        var flags = mode === OutputMode.Append ? 'a' : 'w';
        var writeStream = fs.createWriteStream(fullOutputFileName, { flags: flags });
        writeStream.once('open', function (fd) {
            var cw = new StreamWriter(writeStream, options.regionMarkerFormatter);
            callback(cw)
                .then(function () {
                writeStream.end();
                // console.log('Generator: Finished generating \'%s\'...', fullOutputFileName);
                // Let the host know that we are done
                var finishedMessage = { cmd: 'generateFinished' };
                _this.sendProcessMessage(finishedMessage);
            });
        });
    };
    /**
    * Loads the model that was configured in the code generation configuration.
    */
    InternalGenerator.prototype.getModel = function (options) {
        var codeModelOptions = options || {};
        var parseJson = codeModelOptions.noParse !== true;
        var promise = new Promise(function (resolve, reject) {
            process.on('message', function (m) {
                if (m.cmd !== 'setModel') {
                    return;
                }
                if (!m.modelData) {
                    return reject('The host returned an empty model. Please make sure that a model has been configured for this template.');
                }
                var model;
                // Should we parse the model into a Yellicode model?                                
                if (parseJson && ModelReader.canRead(m.modelData)) {
                    // The modelData will contain a Yellicode document with two main nodes: a 'model' node and an optional 'profiles' node.
                    // We need to parse the entire document (because profiles must be applied) and then return
                    // just the model part.
                    var document_1 = ModelReader.readDocument(m.modelData);
                    if (document_1) {
                        model = document_1.model;
                    }
                    else
                        model = null;
                }
                else
                    model = m.modelData; // return plain JSON
                // Apply transforms                
                var targetModel;
                if (model && codeModelOptions.modelTransform) {
                    targetModel = codeModelOptions.modelTransform.transform(model);
                }
                else
                    targetModel = model;
                resolve(targetModel);
            });
        });
        var getModelMessage = { cmd: 'getModel' };
        this.sendProcessMessage(getModelMessage);
        return promise;
    };
    return InternalGenerator;
}());
export var Generator = new InternalGenerator();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2dlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEtBQUssSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUM3QixPQUFPLEtBQUssRUFBRSxNQUFNLElBQUksQ0FBQztBQUV6QixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFbEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRy9DLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBd0YxRCxNQUFNLENBQU4sSUFBWSxVQWVYO0FBZkQsV0FBWSxVQUFVO0lBQ2xCOztPQUVHO0lBQ0gscURBQVMsQ0FBQTtJQUNUOzs7T0FHRztJQUNILDJDQUFJLENBQUE7SUFDSjs7O09BR0c7SUFDSCwrQ0FBTSxDQUFBO0FBQ1YsQ0FBQyxFQWZXLFVBQVUsS0FBVixVQUFVLFFBZXJCO0FBRUQ7SUFJSTtRQUZRLGVBQVUsR0FBZSxVQUFVLENBQUMsU0FBUyxDQUFDO1FBR2xELHdFQUF3RTtRQUN4RSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BDLElBQU0sY0FBYyxHQUFvQixFQUFFLEdBQUcsRUFBRSxnQkFBZ0IsRUFBRSxDQUFDO1FBQ2xFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRU8sNENBQWdCLEdBQXhCLFVBQXlCLElBQWM7UUFDbkMsS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDOUMsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3hCLElBQUksR0FBRyxLQUFLLGdCQUFnQixFQUFFO2dC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