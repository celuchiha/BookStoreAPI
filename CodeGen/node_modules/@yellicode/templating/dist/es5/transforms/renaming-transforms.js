var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
 * Copyright (c) 2019 Yellicode
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
import * as elements from "@yellicode/elements";
import { PackagedElementTransform } from "./packaged-element-transform";
import { NameUtility } from "../name-utility";
// Note: using plural words here to avoid using reserved keywords.
/**
 * Enumerates which element types to be renamed when performing rename transforms.
 */
export var RenameTargets;
(function (RenameTargets) {
    /**
     * No elements are renamed.
     */
    RenameTargets[RenameTargets["none"] = 0] = "none";
    /**
     * Classes are renamed.
     */
    RenameTargets[RenameTargets["classes"] = 1] = "classes";
    /**
     * Interfaces are renamed.
     */
    RenameTargets[RenameTargets["interfaces"] = 2] = "interfaces";
    /**
     * Properties are renamed.
     */
    RenameTargets[RenameTargets["properties"] = 4] = "properties";
    /**
     * Operations are renamed.
     */
    RenameTargets[RenameTargets["operations"] = 8] = "operations";
    /**
     * Operation parameters are renamed.
     */
    RenameTargets[RenameTargets["parameters"] = 16] = "parameters";
    /**
     * Enumerations are renamed.
     */
    RenameTargets[RenameTargets["enumerations"] = 32] = "enumerations";
    /**
     * Enumeration literals are renamed.
     */
    RenameTargets[RenameTargets["enumerationLiterals"] = 64] = "enumerationLiterals";
    /**
     * All members are renamed: properties, operations, parameters and enumerationLiterals.
     */
    RenameTargets[RenameTargets["allMembers"] = 92] = "allMembers";
    /**
     * All elements are renamed.
     */
    RenameTargets[RenameTargets["all"] = 127] = "all";
})(RenameTargets || (RenameTargets = {}));
/**
 * A base class for renaming classes, interfaces, properties, operations parameters, enumerations and enumeration literals.
 * @deprecated RenamingTransform has moved to the 'yellicode/elements' package, please update your references.
 */
var RenamingTransform = /** @class */ (function (_super) {
    __extends(RenamingTransform, _super);
    /**
     * Constructor. Creates a new RenamingTransform with the specified targets.
     * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
     */
    function RenamingTransform(targets) {
        var _this = this;
        console.warn("RenamingTransform has moved to the 'yellicode/elements' package, please update your references.");
        _this = _super.call(this) || this;
        _this.targets = targets == null ? RenameTargets.all : targets;
        return _this;
    }
    RenamingTransform.prototype.hasTarget = function (target) {
        if (this.targets & target)
            return true;
        else
            return false;
    };
    RenamingTransform.prototype.transformElement = function (element) {
        var _this = this;
        if (!elements.ElementTypeUtility.isMemberedClassifier(element.elementType))
            return;
        if (this.hasTarget(RenameTargets.classes) && elements.ElementTypeUtility.isClass(element.elementType)) {
            element.name = this.rename(element.name, element);
        }
        if (this.hasTarget(RenameTargets.interfaces) && elements.ElementTypeUtility.isInterface(element.elementType)) {
            element.name = this.rename(element.name, element);
        }
        // The element has OwnedAttributes and OwnedOperations
        var classifier = element;
        if (classifier.ownedAttributes != null && this.hasTarget(RenameTargets.properties)) {
            classifier.ownedAttributes.forEach(function (att) {
                att.name = _this.rename(att.name, att);
            });
        }
        if (classifier.ownedOperations != null) {
            classifier.ownedOperations.forEach(function (op) {
                if (_this.hasTarget(RenameTargets.operations)) {
                    op.name = _this.rename(op.name, op);
                }
                if (_this.hasTarget(RenameTargets.parameters)) {
                    op.ownedParameters.forEach(function (p) {
                        p.name = _this.rename(p.name, p);
                    });
                }
            });
        }
        if (elements.ElementTypeUtility.isEnumeration(element.elementType)) {
            var enumeration = element;
            if (this.hasTarget(RenameTargets.enumerations)) {
                enumeration.name = this.rename(enumeration.name, enumeration);
            }
            if (enumeration.ownedLiterals != null && this.hasTarget(RenameTargets.enumerationLiterals)) {
                enumeration.ownedLiterals.forEach(function (literal) {
                    literal.name = _this.rename(literal.name, literal);
                });
            }
        }
    };
    return RenamingTransform;
}(PackagedElementTransform));
export { RenamingTransform };
/**
 * A transform that capitalizes its rename targets, that is, makes the
 * first character uppercase.
 * @deprecated CapitalizingTransform has moved to the 'yellicode/elements' package, please update your references.
 */
var CapitalizingTransform = /** @class */ (function (_super) {
    __extends(CapitalizingTransform, _super);
    /**
     * Constructor. Creates a new CapitalizingTransform with the specified targets.
     * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
     */
    function CapitalizingTransform(targets) {
        var _this = this;
        console.warn("CapitalizingTransform has moved to the 'yellicode/elements' package, please update your references.");
        _this = _super.call(this, targets) || this;
        return _this;
    }
    CapitalizingTransform.prototype.rename = function (name, target) {
        return NameUtility.capitalize(name);
    };
    return CapitalizingTransform;
}(RenamingTransform));
export { CapitalizingTransform };
/**
 * A transform that uncapitalizes its rename targets, that is, makes the
 * first character lowercase.
 * @deprecated UnCapitalizingTransform has moved to the 'yellicode/elements' package, please update your references.
 */
var UnCapitalizingTransform = /** @class */ (function (_super) {
    __extends(UnCapitalizingTransform, _super);
    /**
     * Constructor. Creates a new UnCapitalizingTransform with the specified targets.
     * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
     */
    function UnCapitalizingTransform(targets) {
        var _this = this;
        console.warn("UnCapitalizingTransform has moved to the 'yellicode/elements' package, please update your references.");
        _this = _super.call(this, targets) || this;
        return _this;
    }
    UnCapitalizingTransform.prototype.rename = function (name, target) {
        return NameUtility.unCapitalize(name);
    };
    return UnCapitalizingTransform;
}(RenamingTransform));
export { UnCapitalizingTransform };
/**
 * A transform that converts its rename targets from UpperCamelCase to lowerCamelCase.
 *  @deprecated UpperToLowerCamelCaseTransform has moved to the 'yellicode/elements' package, please update your references.
 */
var UpperToLowerCamelCaseTransform = /** @class */ (function (_super) {
    __extends(UpperToLowerCamelCaseTransform, _super);
    /**
       * Constructor. Creates a new UpperToLowerCamelCaseTransform with the specified targets.
       * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
       */
    function UpperToLowerCamelCaseTransform(targets) {
        var _this = this;
        console.warn("UpperToLowerCamelCaseTransform has moved to the 'yellicode/elements' package, please update your references.");
        _this = _super.call(this, targets) || this;
        return _this;
    }
    UpperToLowerCamelCaseTransform.prototype.rename = function (name, target) {
        return NameUtility.upperToLowerCamelCase(name);
    };
    return UpperToLowerCamelCaseTransform;
}(RenamingTransform));
export { UpperToLowerCamelCaseTransform };
/**
 * A transform that converts its rename targets from lowerCamelCase to UpperCamelCase.
 * @deprecated LowerToUpperCamelCaseTransform has moved to the 'yellicode/elements' package, please update your references.
 */
var LowerToUpperCamelCaseTransform = /** @class */ (function (_super) {
    __extends(LowerToUpperCamelCaseTransform, _super);
    /**
       * Constructor. Creates a new LowerToUpperCamelCaseTransform with the specified targets.
       * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
       */
    function LowerToUpperCamelCaseTransform(targets) {
        var _this = this;
        console.warn("LowerToUpperCamelCaseTransform has moved to the 'yellicode/elements' package, please update your references.");
        _this = _super.call(this, targets) || this;
        return _this;
    }
    LowerToUpperCamelCaseTransform.prototype.rename = function (name, target) {
        return NameUtility.lowerToUpperCamelCase(name);
    };
    return LowerToUpperCamelCaseTransform;
}(RenamingTransform));
export { LowerToUpperCamelCaseTransform };
/**
 * A transform that adds a prefix to its rename targets.
 * @deprecated PrefixingTransform has moved to the 'yellicode/elements' package, please update your references.
 */
var PrefixingTransform = /** @class */ (function (_super) {
    __extends(PrefixingTransform, _super);
    /**
    * Constructor. Creates a new PrefixingTransform with the specified targets.
    * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
    */
    function PrefixingTransform(targets, prefix) {
        var _this = this;
        console.warn("PrefixingTransform has moved to the 'yellicode/elements' package, please update your references.");
        _this = _super.call(this, targets) || this;
        _this.prefix = prefix;
        return _this;
    }
    PrefixingTransform.prototype.rename = function (name, target) {
        return this.prefix + name;
    };
    return PrefixingTransform;
}(RenamingTransform));
export { PrefixingTransform };
/**
 * A transform that adds a suffix to its rename targets.
 * @deprecated SuffixingTransform has moved to the 'yellicode/elements' package, please update your references.
 */
var SuffixingTransform = /** @class */ (function (_super) {
    __extends(SuffixingTransform, _super);
    /**
    * Constructor. Creates a new SuffixingTransform with the specified targets.
    * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
    */
    function SuffixingTransform(targets, suffix) {
        var _this = this;
        console.warn("SuffixingTransform has moved to the 'yellicode/elements' package, please update your references.");
        _this = _super.call(this, targets) || this;
        _this.suffix = suffix;
        return _this;
    }
    SuffixingTransform.prototype.rename = function (name, target) {
        return name + this.suffix;
    };
    return SuffixingTransform;
}(RenamingTransform));
export { SuffixingTransform };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuYW1pbmctdHJhbnNmb3Jtcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90cmFuc2Zvcm1zL3JlbmFtaW5nLXRyYW5zZm9ybXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOzs7Ozs7R0FNRztBQUNILE9BQU8sS0FBSyxRQUFRLE1BQU0scUJBQXFCLENBQUM7QUFDaEQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDeEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRTlDLGtFQUFrRTtBQUVsRTs7R0FFRztBQUNILE1BQU0sQ0FBTixJQUFZLGFBeUNYO0FBekNELFdBQVksYUFBYTtJQUNyQjs7T0FFRztJQUNILGlEQUFRLENBQUE7SUFDUjs7T0FFRztJQUNILHVEQUFnQixDQUFBO0lBQ2hCOztPQUVHO0lBQ0gsNkRBQW1CLENBQUE7SUFDbkI7O09BRUc7SUFDSCw2REFBbUIsQ0FBQTtJQUNuQjs7T0FFRztJQUNILDZEQUFtQixDQUFBO0lBQ25COztPQUVHO0lBQ0gsOERBQW1CLENBQUE7SUFDbkI7O09BRUc7SUFDSCxrRUFBcUIsQ0FBQTtJQUNyQjs7T0FFRztJQUNILGdGQUE0QixDQUFBO0lBQzVCOztPQUVHO0lBQ0gsOERBQXVFLENBQUE7SUFDdkU7O09BRUc7SUFDSCxpREFBc0csQ0FBQTtBQUMxRyxDQUFDLEVBekNXLGFBQWEsS0FBYixhQUFhLFFBeUN4QjtBQUVEOzs7R0FHRztBQUNIO0lBQWdELHFDQUF3QjtJQUdwRTs7O09BR0c7SUFDSCwyQkFBWSxPQUF1QjtRQUFuQyxpQkFJQztRQUhHLE9BQU8sQ0FBQyxJQUFJLENBQUMsaUdBQWlHLENBQUMsQ0FBQztRQUNoSCxRQUFBLGlCQUFPLFNBQUM7UUFDUixLQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMs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