/**
 * The abstract base class for all code writers. This writer implements the TextWriter interface by decorating
 * the TextWriter provided in the constructor.
 * @deprecated CodeWriter has moved to the 'yellicode/core' package, please update your references.
 */
var CodeWriter = /** @class */ (function () {
    /**
     * Constructor. Creates a new CodeWriter that uses the provided TextWriter internally.
     * @param writer A TextWriter object. In a code generation template, a TextWriter instance can be obtained by calling any of the generate...()
     * functions on the current CodeGenerator.
     */
    function CodeWriter(writer) {
        console.warn("CodeWriter has moved to the '@yellicode/core' package, please update your references.");
        this.writer = writer;
    }
    Object.defineProperty(CodeWriter.prototype, "endOfLineString", {
        // NOTE: only documenting the get accessors because the TS compiler we use for doc generation concats the doc 
        // comments for the getter and setter.
        /**
        * Gets or sets the end of line string. The default value is platform dependent.
        */
        get: function () {
            return this.writer.endOfLineString;
        },
        set: function (value) {
            this.writer.endOfLineString = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CodeWriter.prototype, "indentString", {
        /**
         * Gets or sets the indent string. The default value is a '\t' (tab character).
        */
        get: function () {
            return this.writer.indentString;
        },
        set: function (value) {
            this.writer.indentString = value;
        },
        enumerable: true,
        configurable: true
    });
    /******************************************************************************
     *                          TextWriter delegation
    ******************************************************************************/
    /**
     * Writes a string value to the output.
     * @param value The string value to be written.
     */
    CodeWriter.prototype.write = function (value) {
        this.writer.write(value);
        return this;
    };
    ;
    /**
    * Writes a single whitespace character to the output.
    */
    CodeWriter.prototype.writeWhiteSpace = function () {
        this.writer.writeWhiteSpace();
        return this;
    };
    /**
    * Writes a new line to the output. The line is indented automatically. The line is ended with the endOfLineString.
    * @param value The line to write. When omitted, only the endOfLineString is written.
    */
    CodeWriter.prototype.writeLine = function (value) {
        this.writer.writeLine(value);
        return this;
    };
    ;
    /**
   * Writes a collection of lines to the output. Each line is indented automatically and ended with the endOfLineString.
   * @param values The lines to write.
   * @param delimiter An optional delimiter to be written at the end of each line, except for the last one.
   */
    CodeWriter.prototype.writeLines = function (values, delimiter) {
        this.writer.writeLines(values, delimiter);
        return this;
    };
    /**
     * Writes a new line to the output while temporarily increasing the indent. The line is ended with the endOfLineString.
     * @param value The line to write.
     */
    CodeWriter.prototype.writeLineIndented = function (value) {
        this.writer.writeLineIndented(value);
        return this;
    };
    /**
     * Writes the endOfLineString to the output.
     * @param value Any value to write before the endOfLineString string is written.
     */
    CodeWriter.prototype.writeEndOfLine = function (value) {
        this.writer.writeEndOfLine(value);
        return this;
    };
    ;
    /**
      * Writes the contents of the specified file to the output.
      * @param fileName The path of the file, relative to the template.
      * @param encoding Optional: the encoding that is used for the file. The default is 'utf-8'.
      */
    CodeWriter.prototype.writeFile = function (path, encoding) {
        this.writer.writeFile(path, encoding);
        return this;
    };
    /**
    * Writes the contents of the specified file region to the output.
    * @param regionName The name of the region to write. The region should be marked using "/// <region>code goes here...</region>".
    * @param fileName The path of the file, relative to the template.
    * @param encoding The encoding that is used for the file. The default is 'utf-8'.
    */
    CodeWriter.prototype.writeFileRegion = function (regionName, path, encoding) {
        return this.writer.writeFileRegion(regionName, path, encoding);
    };
    /**
    * Writes the current indentString to the output.
    */
    CodeWriter.prototype.writeIndent = function () {
        this.writer.writeIndent();
        return this;
    };
    ;
    /**
    * Increases the current indent, which is prefixed to each line of the output.
    */
    CodeWriter.prototype.increaseIndent = function () {
        this.writer.increaseIndent();
        return this;
    };
    /**
    * Decreases the current indent, which is prefixed to each line of the output.
    */
    CodeWriter.prototype.decreaseIndent = function () {
        this.writer.decreaseIndent();
        return this;
    };
    /**
     * Resets any indentation, causing new line writes to start at the first character position.
     */
    CodeWriter.prototype.clearIndent = function () {
        this.writer.clearIndent();
        return this;
    };
    return CodeWriter;
}());
export { CodeWriter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZS13cml0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29kZS13cml0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBU0E7Ozs7R0FJRztBQUNIO0lBNEJJOzs7O09BSUc7SUFDSCxvQkFBWSxNQUFrQjtRQUMxQixPQUFPLENBQUMsSUFBSSxDQUFDLHVGQUF1RixDQUFDLENBQUM7UUFDdEcsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDekIsQ0FBQztJQTNCRCxzQkFBVyx1Q0FBZTtRQU4xQiw4R0FBOEc7UUFDOUcsc0NBQXNDO1FBRXRDOztVQUVFO2FBQ0Y7WUFDSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDO1FBQ3ZDLENBQUM7YUFFRCxVQUEyQixLQUFhO1lBQ3BDLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztRQUN4QyxDQUFDOzs7T0FKQTtJQVNELHNCQUFXLG9DQUFZO1FBSHZCOztVQUVFO2FBQ0Y7WUFDSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDO1FBQ3BDLENBQUM7YUFFRCxVQUF3QixLQUFhO1lBQ2pDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztRQUNyQyxDQUFDOzs7T0FKQTtJQWdCRDs7bUZBRStFO0lBQy9FOzs7T0FHRztJQUNJLDBCQUFLLEdBQVosVUFBYSxLQUFhO1FBQ3RCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFBQSxDQUFDO0lBRUY7O01BRUU7SUFDSyxvQ0FBZSxHQUF0QjtRQUNJLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDOUIsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVEOzs7TUFHRTtJQUNLLDhCQUFTLEdBQWhCLFVBQWlCLEtBQWM7UUFDM0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0IsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUFBLENBQUM7SUFFRjs7OztLQUlDO0lBQ00sK0JBQVUsR0FBakIsVUFBa0IsTUFBZ0IsRUFBRSxTQUFrQjtRQUNsRCxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDMUMsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVEOzs7T0FHRztJQUNJLHNDQUFpQixHQUF4QixVQUF5QixLQUFhO1FBQ2xDLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDckMsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVEOzs7T0FHRztJQUNJLG1DQUFjLEdBQXJCLFVBQXNCLEtBQWM7UUFDaEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEMsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUFBLENBQUM7SUFFRjs7OztRQUlJO0lBQ0csOEJBQVMsR0FBaEIsVUFBaUIsSUFBWSxFQUFFLFFBQWlCO1FBQzVDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztRQUN0QyxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQ7Ozs7O01BS0U7SUFDSyxvQ0FBZSxHQUF0QixVQUF1QixVQUFrQixFQUFFLElBQVksRUFBRSxRQUFpQjtRQUN0RSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVEOztNQUVFO0lBQ0ssZ0NBQVcsR0FBbEI7UUFDSSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzFCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFBQSxDQUFDO0lBRUY7O01BRUU7SUFDSyxtQ0FBYyxHQUFyQjtRQUNJLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDN0IsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVEOztNQUVFO0lBQ0ssbUNBQWMsR0FBckI7UUFDSSxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQzdCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRDs7T0FFRztJQUNJLGdDQUFXLEdBQWxCO1FBQ0ksSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUMxQixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBS0wsaUJBQUM7QUFBRCxDQUFDLEFBdEpELElBc0pDIn0=