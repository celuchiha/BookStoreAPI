/*
 * Copyright (c) 2019 Yellicode
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
import { StringUtility } from '@yellicode/core';
/**
 * Provides helper functions for converting names.
 */
var NameUtility = /** @class */ (function () {
    function NameUtility() {
    }
    /**
    * Makes the first character of the string uppercase.
    * @deprecated NameUtility has moved to the 'yellicode/core' package, please update your references.
    */
    NameUtility.capitalize = function (input) {
        console.warn("NameUtility has moved to the '@yellicode/core' package, please update your references.");
        if (!input)
            return input;
        return StringUtility.capitalize(input);
    };
    /**
     * Makes the first character of the string lowercase.
     * @deprecated NameUtility has moved to the 'yellicode/core' package, please update your references.
     */
    NameUtility.unCapitalize = function (input) {
        console.warn("NameUtility has moved to the '@yellicode/core' package, please update your references.");
        if (!input)
            return input;
        return StringUtility.unCapitalize(input);
    };
    /**
     * Converts a UpperCamelCase or lowerCamelCase string to a kebab-case (aka dash-case) string.
     * @param input A camelCase or UpperCamelCase string.
     * @returns a kebab-case (aka dash-case) string, meaning all lowercase with a dash separating words.
     * @deprecated NameUtility has moved to the 'yellicode/core' package, please update your references.
     */
    NameUtility.camelToKebabCase = function (input) {
        console.warn("NameUtility has moved to the '@yellicode/core' package, please update your references.");
        if (!input)
            return input;
        var result = [];
        for (var i = 0, len = input.length; i < len; i++) {
            var c = input.charAt(i);
            var upperCase = c.toUpperCase();
            var lowerCase = c.toLowerCase();
            var isUpperCase = (c === upperCase && c !== lowerCase);
            if (isUpperCase && i > 0 && i < len - 1) {
                var insertHyphen = true;
                if (i < len - 1 && StringUtility.isUpperCase(input.charAt(i + 1))) {
                    // The next character is also uppercase
                    insertHyphen = false;
                }
                if (insertHyphen) {
                    result.push('-');
                }
            }
            result.push(lowerCase);
        }
        return result.join('');
    };
    /**
     * Converts a UpperCamelCase string to a lowerCamelCase string.
     * @param input A UpperCamelCase string.
     * @returns a lowerCamelCase string.
     * @deprecated NameUtility has moved to the 'yellicode/core' package, please update your references.
     */
    NameUtility.upperToLowerCamelCase = function (input) {
        console.warn("NameUtility has moved to the '@yellicode/core' package, please update your references.");
        if (!input)
            return input;
        var done = false;
        var isPreviousMatch = false;
        var result = new Array(input.length);
        for (var i = 0, len = input.length; i < len; i++) {
            var c = input.charAt(i);
            if (!done) {
                var upperCase = c.toUpperCase();
                var lowerCase = c.toLowerCase();
                var isMatch = (c === upperCase && c !== lowerCase);
                if (isMatch) {
                    // The character is upperCase, make it lowerCase      
                    c = lowerCase;
                }
                else {
                    // The character is lowerCase. We are done, but..                
                    if (isPreviousMatch && i > 1) {
                        // ... if we converted the previous char to lowercase, make it uppercase again.    
                        // For example: ISBNNumber would become isbnNumber instead of isbnnumber
                        result[i - 1] = result[i - 1].toUpperCase();
                    }
                    done = true;
                }
                isPreviousMatch = isMatch;
            }
            result[i] = c;
        }
        return result.join('');
    };
    /**
   * Converts a lowerCamelCase string to a UpperCamelCase string.
   * @param input A lowerCamelCase string.
   * @returns a UpperCamelCase string.
   * @deprecated NameUtility has moved to the 'yellicode/core' package, please update your references.
   */
    NameUtility.lowerToUpperCamelCase = function (input) {
        console.warn("NameUtility has moved to the '@yellicode/core' package, please update your references.");
        return StringUtility.capitalize(input);
    };
    /**
     * Converts a kebab-case, lowerCamelCase or UpperCamelCase string to an ALL_UPPER_CASE string.
     * @param input A kebab-case (aka dash-case), lowerCamelCase or UpperCamelCase string.
     * @returns an ALL_UPPER_CASE string.
     * @deprecated NameUtility has moved to the 'yellicode/core' package, please update your references.
     */
    NameUtility.toAllUpperCase = function (input) {
        console.warn("NameUtility has moved to the '@yellicode/core' package, please update your references.");
        if (!input)
            return input;
        var result = [];
        for (var i = 0, len = input.length; i < len; i++) {
            var c = input.charAt(i);
            var upperCase = c.toUpperCase();
            var lowerCase = c.toLowerCase();
            var isUpperCase = (c === upperCase && c !== lowerCase);
            var isDash = c === '-';
            if ((isDash || isUpperCase) && i > 0 && i < len - 1) {
                var insertHyphen = true;
                if (i < len - 1 && StringUtility.isUpperCase(input.charAt(i + 1))) {
                    // The next character is also uppercase
                    insertHyphen = false;
                }
                if (insertHyphen) {
                    result.push('_');
                }
            }
            if (!isDash)
                result.push(upperCase);
        }
        return result.join('');
    };
    return NameUtility;
}());
export { NameUtility };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmFtZS11dGlsaXR5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL25hbWUtdXRpbGl0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFDSCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFaEQ7O0dBRUc7QUFDSDtJQUFBO0lBMElBLENBQUM7SUF6SUc7OztNQUdFO0lBQ1ksc0JBQVUsR0FBeEIsVUFBeUIsS0FBYTtRQUNsQyxPQUFPLENBQUMsSUFBSSxDQUFDLHdGQUF3RixDQUFDLENBQUM7UUFDdkcsSUFBSSxDQUFDLEtBQUs7WUFBRSxPQUFPLEtBQUssQ0FBQztRQUN6QixPQUFPLGFBQWEsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVEOzs7T0FHRztJQUNXLHdCQUFZLEdBQTFCLFVBQTJCLEtBQWE7UUFDcEMsT0FBTyxDQUFDLElBQUksQ0FBQyx3RkFBd0YsQ0FBQyxDQUFDO1FBQ3ZHLElBQUksQ0FBQyxLQUFLO1lBQUUsT0FBTyxLQUFLLENBQUM7UUFDekIsT0FBTyxhQUFhLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNXLDRCQUFnQixHQUE5QixVQUErQixLQUFhO1FBQ3hDLE9BQU8sQ0FBQyxJQUFJLENBQUMsd0ZBQXdGLENBQUMsQ0FBQztRQUN2RyxJQUFJLENBQUMsS0FBSztZQUFFLE9BQU8sS0FBSyxDQUFDO1FBRXpCLElBQU0sTUFBTSxHQUFhLEVBQUUsQ0FBQztRQUU1QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzlDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEIsSUFBTSxTQUFT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