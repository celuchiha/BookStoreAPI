/*
 * Copyright (c) 2019 Yellicode
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
/**
 * Contains helper methods that can be used by custom code writers and templates.
 * @deprecated CodeWriterUtility has moved to the 'yellicode/core' package, please update your references.
 */
var CodeWriterUtility = /** @class */ (function () {
    function CodeWriterUtility() {
    }
    /**
     * Wraps the provided string input to a specified maximum width.
     * @argument str The string to be wrapped.
     * @argument width The maximum width of the wrapped text in characters.
     * @returns A string array containing all lines.
     */
    CodeWriterUtility.wordWrap = function (str, width) {
        console.warn("CodeWriterUtility has moved to the '@yellicode/core' package, please update your references.");
        var result = [];
        if (width < 1 || str == null || str.length <= width)
            return result;
        var len = str.length;
        var rangeMax = len - width; // we don't need to split after this position
        var rangeStart = 0;
        var subString;
        while (rangeStart < rangeMax) {
            var subLength = void 0;
            var rangeEnd = rangeStart + width;
            // First test for newlines in this range. If so, don't split on word break but on the newline.
            var ixNewLine = str.indexOf("\n", rangeStart);
            if (ixNewLine > -1 && ixNewLine > rangeStart && ixNewLine < rangeEnd) {
                subLength = ixNewLine - rangeStart;
                subString = str.substr(rangeStart, subLength);
                rangeStart = rangeStart + subLength + 1;
                result.push(subString);
                continue;
            }
            // No newlines. Find the last wordbreak in the range.
            var ix = str.lastIndexOf(" ", rangeEnd); // find the last word break
            var rangeStartNext = 0;
            if (ix > -1 && ix != rangeStart - 1) {
                subLength = ix - rangeStart;
                if (subLength > 0) {
                    rangeStartNext = rangeStart + subLength + 1; // +1 to skip the whitespace
                }
                //else { // not needed anymore because of the maxPos check
                //    sub = str.substr(pos);
                //    newPos = len + 1;
                //}
            }
            else {
                // The range has no whitespace. 
                subLength = width;
                rangeStartNext = rangeStart + width;
            }
            subString = str.substr(rangeStart, subLength);
            rangeStart = rangeStartNext;
            result.push(subString.trim());
        }
        // Add the remainder
        if (rangeStart < len) {
            subString = str.substr(rangeStart);
            result.push(subString);
        }
        //  console.debug(result);
        return result;
    };
    return CodeWriterUtility;
}());
export { CodeWriterUtility };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZS13cml0ZXItdXRpbGl0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb2RlLXdyaXRlci11dGlsaXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVIOzs7R0FHRztBQUNIO0lBQUE7SUEyREEsQ0FBQztJQTFERzs7Ozs7T0FLRztJQUNXLDBCQUFRLEdBQXRCLFVBQXVCLEdBQVcsRUFBRSxLQUFhO1FBQzdDLE9BQU8sQ0FBQyxJQUFJLENBQUMsOEZBQThGLENBQUMsQ0FBQztRQUM3RyxJQUFNLE1BQU0sR0FBYSxFQUFFLENBQUM7UUFFNUIsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksR0FBRyxDQUFDLE1BQU0sSUFBSSxLQUFLO1lBQy9DLE9BQU8sTUFBTSxDQUFDO1FBRWxCLElBQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7UUFDdkIsSUFBSSxRQUFRLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDLDZDQUE2QztRQUN6RSxJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUM7UUFDbkIsSUFBSSxTQUFpQixDQUFDO1FBQ3RCLE9BQU8sVUFBVSxHQUFHLFFBQVEsRUFBRTtZQUMxQixJQUFJLFNBQVMsU0FBUSxDQUFDO1lBQ3RCLElBQUksUUFBUSxHQUFHLFVBQVUsR0FBRyxLQUFLLENBQUM7WUFDbEMsOEZBQThGO1lBQzlGLElBQUksU0FBUyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQzlDLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQyxJQUFJLFNBQVMsR0FBRyxVQUFVLElBQUksU0FBUyxHQUFHLFFBQVEsRUFBRTtnQkFDbEUsU0FBUyxHQUFHLFNBQVMsR0FBRyxVQUFVLENBQUM7Z0JBQ25DLFNBQVMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztnQkFDOUMsVUFBVSxHQUFHLFVBQVUsR0FBRyxTQUFTLEdBQUcsQ0FBQyxDQUFDO2dCQUN4QyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUN2QixTQUFTO2FBQ1o7WUFDRCxxREFBcUQ7WUFDckQsSUFBSSxFQUFFLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQywyQkFBMkI7WUFDcEUsSUFBSSxjQUFjLEdBQVcsQ0FBQyxDQUFDO1lBQy9CLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxVQUFVLEdBQUcsQ0FBQyxFQUFFO2dCQUNqQyxTQUFTLEdBQUcsRUFBRSxHQUFHLFVBQVUsQ0FBQztnQkFDNUIsSUFBSSxTQUFTLEdBQUcsQ0FBQyxFQUFFO29CQUNmLGNBQWMsR0FBRyxVQUFVLEdBQUcsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDLDRCQUE0QjtpQkFDNUU7Z0JBQ0QsMERBQTBEO2dCQUMxRCw0QkFBNEI7Z0JBQzVCLHVCQUF1QjtnQkFDdkIsR0FBRzthQUNOO2lCQUFNO2dCQUNILGdDQUFnQztnQkFDaEMsU0FBUyxHQUFHLEtBQUssQ0FBQztnQkFDbEIsY0FBYyxHQUFHLFVBQVUsR0FBRyxLQUFLLENBQUM7YUFDdkM7WUFDRCxTQUFTLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDOUMsVUFBVSxHQUFHLGNBQWMsQ0FBQztZQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ2pDO1FBQ0Qsb0JBQW9CO1FBQ3BCLElBQUksVUFBVSxHQUFHLEdBQUcsRUFBRTtZQUNsQixTQUFTLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNuQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQzFCO1FBQ0QsMEJBQTBCO1FBQzFCLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCx3QkFBQztBQUFELENBQUMsQUEzREQsSUEyREMifQ==