/**
 * The abstract base class for all code writers. This writer implements the TextWriter interface by decorating
 * the TextWriter provided in the constructor.
 * @deprecated CodeWriter has moved to the 'yellicode/core' package, please update your references.
 */
export class CodeWriter {
    // NOTE: only documenting the get accessors because the TS compiler we use for doc generation concats the doc 
    // comments for the getter and setter.
    /**
    * Gets or sets the end of line string. The default value is platform dependent.
    */
    get endOfLineString() {
        return this.writer.endOfLineString;
    }
    set endOfLineString(value) {
        this.writer.endOfLineString = value;
    }
    /**
     * Gets or sets the indent string. The default value is a '\t' (tab character).
    */
    get indentString() {
        return this.writer.indentString;
    }
    set indentString(value) {
        this.writer.indentString = value;
    }
    /**
     * Constructor. Creates a new CodeWriter that uses the provided TextWriter internally.
     * @param writer A TextWriter object. In a code generation template, a TextWriter instance can be obtained by calling any of the generate...()
     * functions on the current CodeGenerator.
     */
    constructor(writer) {
        console.warn(`CodeWriter has moved to the '@yellicode/core' package, please update your references.`);
        this.writer = writer;
    }
    /******************************************************************************
     *                          TextWriter delegation
    ******************************************************************************/
    /**
     * Writes a string value to the output.
     * @param value The string value to be written.
     */
    write(value) {
        this.writer.write(value);
        return this;
    }
    ;
    /**
    * Writes a single whitespace character to the output.
    */
    writeWhiteSpace() {
        this.writer.writeWhiteSpace();
        return this;
    }
    /**
    * Writes a new line to the output. The line is indented automatically. The line is ended with the endOfLineString.
    * @param value The line to write. When omitted, only the endOfLineString is written.
    */
    writeLine(value) {
        this.writer.writeLine(value);
        return this;
    }
    ;
    /**
   * Writes a collection of lines to the output. Each line is indented automatically and ended with the endOfLineString.
   * @param values The lines to write.
   * @param delimiter An optional delimiter to be written at the end of each line, except for the last one.
   */
    writeLines(values, delimiter) {
        this.writer.writeLines(values, delimiter);
        return this;
    }
    /**
     * Writes a new line to the output while temporarily increasing the indent. The line is ended with the endOfLineString.
     * @param value The line to write.
     */
    writeLineIndented(value) {
        this.writer.writeLineIndented(value);
        return this;
    }
    /**
     * Writes the endOfLineString to the output.
     * @param value Any value to write before the endOfLineString string is written.
     */
    writeEndOfLine(value) {
        this.writer.writeEndOfLine(value);
        return this;
    }
    ;
    /**
      * Writes the contents of the specified file to the output.
      * @param fileName The path of the file, relative to the template.
      * @param encoding Optional: the encoding that is used for the file. The default is 'utf-8'.
      */
    writeFile(path, encoding) {
        this.writer.writeFile(path, encoding);
        return this;
    }
    /**
    * Writes the contents of the specified file region to the output.
    * @param regionName The name of the region to write. The region should be marked using "/// <region>code goes here...</region>".
    * @param fileName The path of the file, relative to the template.
    * @param encoding The encoding that is used for the file. The default is 'utf-8'.
    */
    writeFileRegion(regionName, path, encoding) {
        return this.writer.writeFileRegion(regionName, path, encoding);
    }
    /**
    * Writes the current indentString to the output.
    */
    writeIndent() {
        this.writer.writeIndent();
        return this;
    }
    ;
    /**
    * Increases the current indent, which is prefixed to each line of the output.
    */
    increaseIndent() {
        this.writer.increaseIndent();
        return this;
    }
    /**
    * Decreases the current indent, which is prefixed to each line of the output.
    */
    decreaseIndent() {
        this.writer.decreaseIndent();
        return this;
    }
    /**
     * Resets any indentation, causing new line writes to start at the first character position.
     */
    clearIndent() {
        this.writer.clearIndent();
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZS13cml0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29kZS13cml0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBU0E7Ozs7R0FJRztBQUNILE1BQU07SUFHRiw4R0FBOEc7SUFDOUcsc0NBQXNDO0lBRXRDOztNQUVFO0lBQ0YsSUFBVyxlQUFlO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUM7SUFDdkMsQ0FBQztJQUVELElBQVcsZUFBZSxDQUFDLEtBQWE7UUFDcEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO0lBQ3hDLENBQUM7SUFFRDs7TUFFRTtJQUNGLElBQVcsWUFBWTtRQUNuQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDO0lBQ3BDLENBQUM7SUFFRCxJQUFXLFlBQVksQ0FBQyxLQUFhO1FBQ2pDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztJQUNyQyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILFlBQVksTUFBa0I7UUFDMUIsT0FBTyxDQUFDLElBQUksQ0FBQyx1RkFBdUYsQ0FBQyxDQUFDO1FBQ3RHLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7bUZBRStFO0lBQy9FOzs7T0FHRztJQUNJLEtBQUssQ0FBQyxLQUFhO1FBQ3RCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFBQSxDQUFDO0lBRUY7O01BRUU7SUFDSyxlQUFlO1FBQ2xCLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDOUIsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVEOzs7TUFHRTtJQUNLLFNBQVMsQ0FBQyxLQUFjO1FBQzNCLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFBQSxDQUFDO0lBRUY7Ozs7S0FJQztJQUNNLFVBQVUsQ0FBQyxNQUFnQixFQUFFLFNBQWtCO1FBQ2xELElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUMxQyxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksaUJBQWlCLENBQUMsS0FBYTtRQUNsQyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRDs7O09BR0c7SUFDSSxjQUFjLENBQUMsS0FBYztRQUNoQyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsQyxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBQUEsQ0FBQztJQUVGOzs7O1FBSUk7SUFDRyxTQUFTLENBQUMsSUFBWSxFQUFFLFFBQWlCO1FBQzVDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztRQUN0QyxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQ7Ozs7O01BS0U7SUFDSyxlQUFlLENBQUMsVUFBa0IsRUFBRSxJQUFZLEVBQUUsUUFBaUI7UUFDdEUsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFRDs7TUFFRTtJQUNLLFdBQVc7UUFDZCxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzFCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFBQSxDQUFDO0lBRUY7O01BRUU7SUFDSyxjQUFjO1FBQ2pCLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDN0IsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVEOztNQUVFO0lBQ0ssY0FBYztRQUNqQixJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQzdCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRDs7T0FFRztJQUNJLFdBQVc7UUFDZCxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzFCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7Q0FLSiJ9