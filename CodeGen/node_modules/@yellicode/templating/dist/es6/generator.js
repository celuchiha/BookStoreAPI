/*
 * Copyright (c) 2019 Yellicode
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
import * as path from 'path';
import * as fs from 'fs';
import { ModelReader } from '@yellicode/elements';
import { StreamWriter } from './stream-writer';
import { FileSystemUtility } from './file-system-utility';
export var OutputMode;
(function (OutputMode) {
    /**
     * The output file will be truncated if it exists. This is the default value.
     */
    OutputMode[OutputMode["Overwrite"] = 0] = "Overwrite";
    /**
     * The output file will not be truncated if it already exists. Use this option if you want
     * to update the file manually once it is generated.
     */
    OutputMode[OutputMode["Once"] = 1] = "Once";
    /**
     * The template output will be appended to the file if it already exists. The file is created if it
     * does not exist.
     */
    OutputMode[OutputMode["Append"] = 2] = "Append";
})(OutputMode || (OutputMode = {}));
class InternalGenerator {
    constructor() {
        this.outputMode = OutputMode.Overwrite;
        //this.templateArgs = InternalGenerator.parseTemplateArgs(process.argv);
        this.parseProcessArgs(process.argv);
        const startedMessage = { cmd: 'processStarted' };
        this.sendProcessMessage(startedMessage);
    }
    parseProcessArgs(args) {
        for (let index = 0; index < args.length; index++) {
            const val = args[index];
            if (val === '--templateArgs') {
                this.templateArgs = InternalGenerator.parseTemplateArgs(args, index);
            }
            else if (val === '--outputMode') {
                this.outputMode = InternalGenerator.parseOutputMode(args, index) || this.outputMode;
            }
        }
    }
    static parseOutputMode(args, index) {
        if (args.length <= index + 1)
            return null;
        const outputModeString = args[index + 1];
        switch (outputModeString) {
            case 'append':
                return OutputMode.Append;
            case 'once':
                return OutputMode.Once;
            case 'overwrite':
                return OutputMode.Overwrite;
            default:
                return null;
        }
    }
    static parseTemplateArgs(args, index) {
        if (args.length <= index + 1)
            return null;
        const templateArgsString = args[index + 1];
        if (templateArgsString.length > 0) {
            return JSON.parse(templateArgsString);
        }
        return null;
    }
    sendProcessMessage(message) {
        process.send(message); // https://github.com/Microsoft/TypeScript/issues/10158        
    }
    generate(options, template) {
        this.generateInternal(options, (writer) => {
            template(writer);
            return Promise.resolve();
        });
    }
    generateAsync(options, template) {
        this.generateInternal(options, template);
    }
    /**
     * Executes the provided template using the model that was configured in the code generation configuration.
     */
    generateFromModel(options, template) {
        this.getModel(options)
            .then((model) => {
            this.generateInternal(options, (writer) => {
                template(writer, model);
                return Promise.resolve();
            });
        }).catch((err) => {
            console.log(err);
        });
    }
    generateFromModelAsync(options, template) {
        this.getModel(options)
            .then((model) => {
            this.generateInternal(options, (writer) => {
                return template(writer, model);
            });
        }).catch((err) => {
            console.log(err);
        });
    }
    generateInternal(options, callback) {
        // Get the working directory. The host will make sure that this is the directory in which the template resides.
        const templateDirName = path.resolve('./');
        // console.log('Generator: Template directory name is \'%s\'', templateDirName);
        const fullOutputFileName = path.join(templateDirName, options.outputFile);
        // Ensure that the directory exists        
        FileSystemUtility.ensureDirectory(path.dirname(fullOutputFileName));
        // Let the host know that we started something so that we don't get killed
        var startedMessage = { cmd: 'generateStarted' };
        this.sendProcessMessage(startedMessage);
        // console.log('Generator: Generating file \'%s\'...', fullOutputFileName);
        const mode = options.outputMode === undefined ? this.outputMode : options.outputMode;
        if (mode === OutputMode.Once && fs.existsSync(fullOutputFileName)) {
            // Don't regenerate the file
            var finishedMessage = { cmd: 'generateFinished' };
            this.sendProcessMessage(finishedMessage);
            return;
        }
        const flags = mode === OutputMode.Append ? 'a' : 'w';
        const writeStream = fs.createWriteStream(fullOutputFileName, { flags: flags });
        writeStream.once('open', (fd) => {
            var cw = new StreamWriter(writeStream, options.regionMarkerFormatter);
            callback(cw)
                .then(() => {
                writeStream.end();
                // console.log('Generator: Finished generating \'%s\'...', fullOutputFileName);
                // Let the host know that we are done
                var finishedMessage = { cmd: 'generateFinished' };
                this.sendProcessMessage(finishedMessage);
            });
        });
    }
    /**
    * Loads the model that was configured in the code generation configuration.
    */
    getModel(options) {
        const codeModelOptions = options || {};
        const parseJson = codeModelOptions.noParse !== true;
        const promise = new Promise((resolve, reject) => {
            process.on('message', (m) => {
                if (m.cmd !== 'setModel') {
                    return;
                }
                if (!m.modelData) {
                    return reject('The host returned an empty model. Please make sure that a model has been configured for this template.');
                }
                let model;
                // Should we parse the model into a Yellicode model?                                
                if (parseJson && ModelReader.canRead(m.modelData)) {
                    // The modelData will contain a Yellicode document with two main nodes: a 'model' node and an optional 'profiles' node.
                    // We need to parse the entire document (because profiles must be applied) and then return
                    // just the model part.
                    const document = ModelReader.readDocument(m.modelData);
                    if (document) {
                        model = document.model;
                    }
                    else
                        model = null;
                }
                else
                    model = m.modelData; // return plain JSON
                // Apply transforms                
                let targetModel;
                if (model && codeModelOptions.modelTransform) {
                    targetModel = codeModelOptions.modelTransform.transform(model);
                }
                else
                    targetModel = model;
                resolve(targetModel);
            });
        });
        var getModelMessage = { cmd: 'getModel' };
        this.sendProcessMessage(getModelMessage);
        return promise;
    }
}
export const Generator = new InternalGenerator();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2dlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEtBQUssSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUM3QixPQUFPLEtBQUssRUFBRSxNQUFNLElBQUksQ0FBQztBQUV6QixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFbEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRy9DLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBd0YxRCxNQUFNLENBQU4sSUFBWSxVQWVYO0FBZkQsV0FBWSxVQUFVO0lBQ2xCOztPQUVHO0lBQ0gscURBQVMsQ0FBQTtJQUNUOzs7T0FHRztJQUNILDJDQUFJLENBQUE7SUFDSjs7O09BR0c7SUFDSCwrQ0FBTSxDQUFBO0FBQ1YsQ0FBQyxFQWZXLFVBQVUsS0FBVixVQUFVLFFBZXJCO0FBRUQ7SUFJSTtRQUZRLGVBQVUsR0FBZSxVQUFVLENBQUMsU0FBUyxDQUFDO1FBR2xELHdFQUF3RTtRQUN4RSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sY0FBYyxHQUFvQixFQUFFLEdBQUcsRUFBRSxnQkFBZ0IsRUFBRSxDQUFDO1FBQ2xFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRU8sZ0JBQWdCLENBQUMsSUFBYztRQUNuQyxLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUM5QyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDeEIsSUFBSSxHQUFHLEtBQUssZ0JBQWdCLEVBQUU7Z0JBQzFCLElB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