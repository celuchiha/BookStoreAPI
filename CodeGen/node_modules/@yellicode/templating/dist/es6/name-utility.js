/*
 * Copyright (c) 2019 Yellicode
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
import { StringUtility } from '@yellicode/core';
/**
 * Provides helper functions for converting names.
 */
export class NameUtility {
    /**
    * Makes the first character of the string uppercase.
    * @deprecated NameUtility has moved to the 'yellicode/core' package, please update your references.
    */
    static capitalize(input) {
        console.warn(`NameUtility has moved to the '@yellicode/core' package, please update your references.`);
        if (!input)
            return input;
        return StringUtility.capitalize(input);
    }
    /**
     * Makes the first character of the string lowercase.
     * @deprecated NameUtility has moved to the 'yellicode/core' package, please update your references.
     */
    static unCapitalize(input) {
        console.warn(`NameUtility has moved to the '@yellicode/core' package, please update your references.`);
        if (!input)
            return input;
        return StringUtility.unCapitalize(input);
    }
    /**
     * Converts a UpperCamelCase or lowerCamelCase string to a kebab-case (aka dash-case) string.
     * @param input A camelCase or UpperCamelCase string.
     * @returns a kebab-case (aka dash-case) string, meaning all lowercase with a dash separating words.
     * @deprecated NameUtility has moved to the 'yellicode/core' package, please update your references.
     */
    static camelToKebabCase(input) {
        console.warn(`NameUtility has moved to the '@yellicode/core' package, please update your references.`);
        if (!input)
            return input;
        const result = [];
        for (var i = 0, len = input.length; i < len; i++) {
            var c = input.charAt(i);
            const upperCase = c.toUpperCase();
            const lowerCase = c.toLowerCase();
            const isUpperCase = (c === upperCase && c !== lowerCase);
            if (isUpperCase && i > 0 && i < len - 1) {
                let insertHyphen = true;
                if (i < len - 1 && StringUtility.isUpperCase(input.charAt(i + 1))) {
                    // The next character is also uppercase
                    insertHyphen = false;
                }
                if (insertHyphen) {
                    result.push('-');
                }
            }
            result.push(lowerCase);
        }
        return result.join('');
    }
    /**
     * Converts a UpperCamelCase string to a lowerCamelCase string.
     * @param input A UpperCamelCase string.
     * @returns a lowerCamelCase string.
     * @deprecated NameUtility has moved to the 'yellicode/core' package, please update your references.
     */
    static upperToLowerCamelCase(input) {
        console.warn(`NameUtility has moved to the '@yellicode/core' package, please update your references.`);
        if (!input)
            return input;
        let done = false;
        let isPreviousMatch = false;
        const result = new Array(input.length);
        for (var i = 0, len = input.length; i < len; i++) {
            var c = input.charAt(i);
            if (!done) {
                const upperCase = c.toUpperCase();
                const lowerCase = c.toLowerCase();
                const isMatch = (c === upperCase && c !== lowerCase);
                if (isMatch) {
                    // The character is upperCase, make it lowerCase      
                    c = lowerCase;
                }
                else {
                    // The character is lowerCase. We are done, but..                
                    if (isPreviousMatch && i > 1) {
                        // ... if we converted the previous char to lowercase, make it uppercase again.    
                        // For example: ISBNNumber would become isbnNumber instead of isbnnumber
                        result[i - 1] = result[i - 1].toUpperCase();
                    }
                    done = true;
                }
                isPreviousMatch = isMatch;
            }
            result[i] = c;
        }
        return result.join('');
    }
    /**
   * Converts a lowerCamelCase string to a UpperCamelCase string.
   * @param input A lowerCamelCase string.
   * @returns a UpperCamelCase string.
   * @deprecated NameUtility has moved to the 'yellicode/core' package, please update your references.
   */
    static lowerToUpperCamelCase(input) {
        console.warn(`NameUtility has moved to the '@yellicode/core' package, please update your references.`);
        return StringUtility.capitalize(input);
    }
    /**
     * Converts a kebab-case, lowerCamelCase or UpperCamelCase string to an ALL_UPPER_CASE string.
     * @param input A kebab-case (aka dash-case), lowerCamelCase or UpperCamelCase string.
     * @returns an ALL_UPPER_CASE string.
     * @deprecated NameUtility has moved to the 'yellicode/core' package, please update your references.
     */
    static toAllUpperCase(input) {
        console.warn(`NameUtility has moved to the '@yellicode/core' package, please update your references.`);
        if (!input)
            return input;
        const result = [];
        for (var i = 0, len = input.length; i < len; i++) {
            var c = input.charAt(i);
            const upperCase = c.toUpperCase();
            const lowerCase = c.toLowerCase();
            const isUpperCase = (c === upperCase && c !== lowerCase);
            const isDash = c === '-';
            if ((isDash || isUpperCase) && i > 0 && i < len - 1) {
                let insertHyphen = true;
                if (i < len - 1 && StringUtility.isUpperCase(input.charAt(i + 1))) {
                    // The next character is also uppercase
                    insertHyphen = false;
                }
                if (insertHyphen) {
                    result.push('_');
                }
            }
            if (!isDash)
                result.push(upperCase);
        }
        return result.join('');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmFtZS11dGlsaXR5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL25hbWUtdXRpbGl0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFDSCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFaEQ7O0dBRUc7QUFDSCxNQUFNO0lBQ0Y7OztNQUdFO0lBQ0ssTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFhO1FBQ2xDLE9BQU8sQ0FBQyxJQUFJLENBQUMsd0ZBQXdGLENBQUMsQ0FBQztRQUN2RyxJQUFJLENBQUMsS0FBSztZQUFFLE9BQU8sS0FBSyxDQUFDO1FBQ3pCLE9BQU8sYUFBYSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFhO1FBQ3BDLE9BQU8sQ0FBQyxJQUFJLENBQUMsd0ZBQXdGLENBQUMsQ0FBQztRQUN2RyxJQUFJLENBQUMsS0FBSztZQUFFLE9BQU8sS0FBSyxDQUFDO1FBQ3pCLE9BQU8sYUFBYSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsS0FBYTtRQUN4QyxPQUFPLENBQUMsSUFBSSxDQUFDLHdGQUF3RixDQUFDLENBQUM7UUFDdkcsSUFBSSxDQUFDLEtBQUs7WUFBRSxPQUFPLEtBQUssQ0FBQztRQUV6QixNQUFNLE1BQU0sR0FBYSxFQUFFLENBQUM7UUFFNUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM5QyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hCLE1BQU0sU0FBUyxHQUFH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