/*
 * Copyright (c) 2019 Yellicode
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
import * as elements from "@yellicode/elements";
import { PackagedElementTransform } from "./packaged-element-transform";
import { NameUtility } from "../name-utility";
// Note: using plural words here to avoid using reserved keywords.
/**
 * Enumerates which element types to be renamed when performing rename transforms.
 */
export var RenameTargets;
(function (RenameTargets) {
    /**
     * No elements are renamed.
     */
    RenameTargets[RenameTargets["none"] = 0] = "none";
    /**
     * Classes are renamed.
     */
    RenameTargets[RenameTargets["classes"] = 1] = "classes";
    /**
     * Interfaces are renamed.
     */
    RenameTargets[RenameTargets["interfaces"] = 2] = "interfaces";
    /**
     * Properties are renamed.
     */
    RenameTargets[RenameTargets["properties"] = 4] = "properties";
    /**
     * Operations are renamed.
     */
    RenameTargets[RenameTargets["operations"] = 8] = "operations";
    /**
     * Operation parameters are renamed.
     */
    RenameTargets[RenameTargets["parameters"] = 16] = "parameters";
    /**
     * Enumerations are renamed.
     */
    RenameTargets[RenameTargets["enumerations"] = 32] = "enumerations";
    /**
     * Enumeration literals are renamed.
     */
    RenameTargets[RenameTargets["enumerationLiterals"] = 64] = "enumerationLiterals";
    /**
     * All members are renamed: properties, operations, parameters and enumerationLiterals.
     */
    RenameTargets[RenameTargets["allMembers"] = 92] = "allMembers";
    /**
     * All elements are renamed.
     */
    RenameTargets[RenameTargets["all"] = 127] = "all";
})(RenameTargets || (RenameTargets = {}));
/**
 * A base class for renaming classes, interfaces, properties, operations parameters, enumerations and enumeration literals.
 * @deprecated RenamingTransform has moved to the 'yellicode/elements' package, please update your references.
 */
export class RenamingTransform extends PackagedElementTransform {
    /**
     * Constructor. Creates a new RenamingTransform with the specified targets.
     * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
     */
    constructor(targets) {
        console.warn(`RenamingTransform has moved to the 'yellicode/elements' package, please update your references.`);
        super();
        this.targets = targets == null ? RenameTargets.all : targets;
    }
    hasTarget(target) {
        if (this.targets & target)
            return true;
        else
            return false;
    }
    transformElement(element) {
        if (!elements.ElementTypeUtility.isMemberedClassifier(element.elementType))
            return;
        if (this.hasTarget(RenameTargets.classes) && elements.ElementTypeUtility.isClass(element.elementType)) {
            element.name = this.rename(element.name, element);
        }
        if (this.hasTarget(RenameTargets.interfaces) && elements.ElementTypeUtility.isInterface(element.elementType)) {
            element.name = this.rename(element.name, element);
        }
        // The element has OwnedAttributes and OwnedOperations
        var classifier = element;
        if (classifier.ownedAttributes != null && this.hasTarget(RenameTargets.properties)) {
            classifier.ownedAttributes.forEach(att => {
                att.name = this.rename(att.name, att);
            });
        }
        if (classifier.ownedOperations != null) {
            classifier.ownedOperations.forEach(op => {
                if (this.hasTarget(RenameTargets.operations)) {
                    op.name = this.rename(op.name, op);
                }
                if (this.hasTarget(RenameTargets.parameters)) {
                    op.ownedParameters.forEach(p => {
                        p.name = this.rename(p.name, p);
                    });
                }
            });
        }
        if (elements.ElementTypeUtility.isEnumeration(element.elementType)) {
            var enumeration = element;
            if (this.hasTarget(RenameTargets.enumerations)) {
                enumeration.name = this.rename(enumeration.name, enumeration);
            }
            if (enumeration.ownedLiterals != null && this.hasTarget(RenameTargets.enumerationLiterals)) {
                enumeration.ownedLiterals.forEach(literal => {
                    literal.name = this.rename(literal.name, literal);
                });
            }
        }
    }
}
/**
 * A transform that capitalizes its rename targets, that is, makes the
 * first character uppercase.
 * @deprecated CapitalizingTransform has moved to the 'yellicode/elements' package, please update your references.
 */
export class CapitalizingTransform extends RenamingTransform {
    /**
     * Constructor. Creates a new CapitalizingTransform with the specified targets.
     * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
     */
    constructor(targets) {
        console.warn(`CapitalizingTransform has moved to the 'yellicode/elements' package, please update your references.`);
        super(targets);
    }
    rename(name, target) {
        return NameUtility.capitalize(name);
    }
}
/**
 * A transform that uncapitalizes its rename targets, that is, makes the
 * first character lowercase.
 * @deprecated UnCapitalizingTransform has moved to the 'yellicode/elements' package, please update your references.
 */
export class UnCapitalizingTransform extends RenamingTransform {
    /**
     * Constructor. Creates a new UnCapitalizingTransform with the specified targets.
     * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
     */
    constructor(targets) {
        console.warn(`UnCapitalizingTransform has moved to the 'yellicode/elements' package, please update your references.`);
        super(targets);
    }
    rename(name, target) {
        return NameUtility.unCapitalize(name);
    }
}
/**
 * A transform that converts its rename targets from UpperCamelCase to lowerCamelCase.
 *  @deprecated UpperToLowerCamelCaseTransform has moved to the 'yellicode/elements' package, please update your references.
 */
export class UpperToLowerCamelCaseTransform extends RenamingTransform {
    /**
       * Constructor. Creates a new UpperToLowerCamelCaseTransform with the specified targets.
       * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
       */
    constructor(targets) {
        console.warn(`UpperToLowerCamelCaseTransform has moved to the 'yellicode/elements' package, please update your references.`);
        super(targets);
    }
    rename(name, target) {
        return NameUtility.upperToLowerCamelCase(name);
    }
}
/**
 * A transform that converts its rename targets from lowerCamelCase to UpperCamelCase.
 * @deprecated LowerToUpperCamelCaseTransform has moved to the 'yellicode/elements' package, please update your references.
 */
export class LowerToUpperCamelCaseTransform extends RenamingTransform {
    /**
       * Constructor. Creates a new LowerToUpperCamelCaseTransform with the specified targets.
       * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
       */
    constructor(targets) {
        console.warn(`LowerToUpperCamelCaseTransform has moved to the 'yellicode/elements' package, please update your references.`);
        super(targets);
    }
    rename(name, target) {
        return NameUtility.lowerToUpperCamelCase(name);
    }
}
/**
 * A transform that adds a prefix to its rename targets.
 * @deprecated PrefixingTransform has moved to the 'yellicode/elements' package, please update your references.
 */
export class PrefixingTransform extends RenamingTransform {
    /**
    * Constructor. Creates a new PrefixingTransform with the specified targets.
    * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
    */
    constructor(targets, prefix) {
        console.warn(`PrefixingTransform has moved to the 'yellicode/elements' package, please update your references.`);
        super(targets);
        this.prefix = prefix;
    }
    rename(name, target) {
        return this.prefix + name;
    }
}
/**
 * A transform that adds a suffix to its rename targets.
 * @deprecated SuffixingTransform has moved to the 'yellicode/elements' package, please update your references.
 */
export class SuffixingTransform extends RenamingTransform {
    /**
    * Constructor. Creates a new SuffixingTransform with the specified targets.
    * @param targets Optional: indicates which elements to rename. The default is RenameTargets.all.
    */
    constructor(targets, suffix) {
        console.warn(`SuffixingTransform has moved to the 'yellicode/elements' package, please update your references.`);
        super(targets);
        this.suffix = suffix;
    }
    rename(name, target) {
        return name + this.suffix;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuYW1pbmctdHJhbnNmb3Jtcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90cmFuc2Zvcm1zL3JlbmFtaW5nLXRyYW5zZm9ybXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBQ0gsT0FBTyxLQUFLLFFBQVEsTUFBTSxxQkFBcUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFOUMsa0VBQWtFO0FBRWxFOztHQUVHO0FBQ0gsTUFBTSxDQUFOLElBQVksYUF5Q1g7QUF6Q0QsV0FBWSxhQUFhO0lBQ3JCOztPQUVHO0lBQ0gsaURBQVEsQ0FBQTtJQUNSOztPQUVHO0lBQ0gsdURBQWdCLENBQUE7SUFDaEI7O09BRUc7SUFDSCw2REFBbUIsQ0FBQTtJQUNuQjs7T0FFRztJQUNILDZEQUFtQixDQUFBO0lBQ25COztPQUVHO0lBQ0gsNkRBQW1CLENBQUE7SUFDbkI7O09BRUc7SUFDSCw4REFBbUIsQ0FBQTtJQUNuQjs7T0FFRztJQUNILGtFQUFxQixDQUFBO0lBQ3JCOztPQUVHO0lBQ0gsZ0ZBQTRCLENBQUE7SUFDNUI7O09BRUc7SUFDSCw4REFBdUUsQ0FBQTtJQUN2RTs7T0FFRztJQUNILGlEQUFzRyxDQUFBO0FBQzFHLENBQUMsRUF6Q1csYUFBYSxLQUFiLGFBQWEsUUF5Q3hCO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSx3QkFBa0MsU0FBUSx3QkFBd0I7SUFHcEU7OztPQUdHO0lBQ0gsWUFBWSxPQUF1QjtRQUMvQixPQUFPLENBQUMsSUFBSSxDQUFDLGlHQUFpRyxDQUFDLENBQUM7UUFDaEgsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9B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