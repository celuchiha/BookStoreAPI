/*
 * Copyright (c) 2019 Yellicode
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
import * as path from 'path';
import * as fs from 'fs';
import { ModelReader } from '@yellicode/elements';
import { StreamWriter } from './stream-writer';
import { FileSystemUtility } from './file-system-utility';
import { OutputMode } from './options';
import { ToHostLogger } from './to-host-logger';
class InternalGenerator {
    constructor() {
        this.outputMode = OutputMode.Overwrite;
        this.modelBuilderResult = null;
        this.modelBuilderPromise = null;
        this.parseProcessArgs(process.argv);
        const startedMessage = { cmd: 'processStarted' };
        this.sendProcessMessage(startedMessage);
        this.logger = new ToHostLogger();
    }
    parseProcessArgs(args) {
        for (let index = 0; index < args.length; index++) {
            const val = args[index];
            if (val === '--templateArgs') {
                this.templateArgs = InternalGenerator.parseTemplateArgs(args, index);
            }
            else if (val === '--outputMode') {
                this.outputMode = InternalGenerator.parseOutputMode(args, index) || this.outputMode;
            }
        }
    }
    static parseOutputMode(args, index) {
        if (args.length <= index + 1)
            return null;
        const outputModeString = args[index + 1];
        switch (outputModeString) {
            case 'append':
                return OutputMode.Append;
            case 'once':
                return OutputMode.Once;
            case 'overwrite':
                return OutputMode.Overwrite;
            default:
                return null;
        }
    }
    static parseTemplateArgs(args, index) {
        if (args.length <= index + 1)
            return null;
        const templateArgsString = args[index + 1];
        if (templateArgsString.length > 0) {
            return JSON.parse(templateArgsString);
        }
        return null;
    }
    sendProcessMessage(message) {
        process.send(message); // https://github.com/Microsoft/TypeScript/issues/10158        
    }
    generate(options, template) {
        this.generateInternal(options, (writer) => {
            template(writer);
            return Promise.resolve();
        });
    }
    generateAsync(options, template) {
        this.generateInternal(options, template);
    }
    /**
     * Executes the provided template using the model that was configured in the code generation configuration.
     */
    generateFromModel(options, template) {
        this.getModel(options)
            .then((model) => {
            this.generateInternal(options, (writer) => {
                template(writer, model);
                return Promise.resolve();
            });
        }).catch((err) => {
            console.log(err);
        });
    }
    generateFromModelAsync(options, template) {
        this.getModel(options)
            .then((model) => {
            this.generateInternal(options, (writer) => {
                return template(writer, model);
            });
        }).catch((err) => {
            console.log(err);
        });
    }
    generateInternal(options, callback) {
        // Get the working directory. The host will make sure that this is the directory in which the template resides.
        const templateDirName = path.resolve('./');
        // console.log('Generator: Template directory name is \'%s\'', templateDirName);
        const fullOutputFileName = path.join(templateDirName, options.outputFile);
        // Ensure that the directory exists        
        FileSystemUtility.ensureDirectory(path.dirname(fullOutputFileName));
        // Let the host know that we started something so that we don't get killed
        var startedMessage = { cmd: 'generateStarted' };
        this.sendProcessMessage(startedMessage);
        // console.log('Generator: Generating file \'%s\'...', fullOutputFileName);
        const mode = options.outputMode === undefined ? this.outputMode : options.outputMode;
        if (mode === OutputMode.Once && fs.existsSync(fullOutputFileName)) {
            // Don't regenerate the file
            var finishedMessage = { cmd: 'generateFinished' };
            this.sendProcessMessage(finishedMessage);
            return;
        }
        const flags = mode === OutputMode.Append ? 'a' : 'w';
        const writeStream = fs.createWriteStream(fullOutputFileName, { flags: flags });
        writeStream.once('open', (fd) => {
            var cw = new StreamWriter(writeStream, options.regionMarkerFormatter);
            callback(cw)
                .then(() => {
                writeStream.end();
                // console.log('Generator: Finished generating \'%s\'...', fullOutputFileName);
                // Let the host know that we are done
                var finishedMessage = { cmd: 'generateFinished' };
                this.sendProcessMessage(finishedMessage);
            });
        });
    }
    /**
    * Loads the model that was configured in the code generation configuration.
    */
    getModel(options) {
        const codeModelOptions = options || {};
        const parseJson = codeModelOptions.noParse !== true;
        if (this.modelBuilderResult || this.modelBuilderPromise) {
            return this.getModelFromModelBuilder(options);
        }
        const promise = new Promise((resolve, reject) => {
            process.on('message', (m) => {
                if (m.cmd !== 'setModel') {
                    return;
                }
                if (!m.modelData) {
                    return reject('The host returned an empty model. Please make sure that a model has been configured for this template.');
                }
                let model;
                // Should we parse the model into a Yellicode model?                                
                if (parseJson && ModelReader.canRead(m.modelData)) {
                    // The modelData will contain a Yellicode document with two main nodes: a 'model' node and an optional 'profiles' node.
                    // We need to parse the entire document (because profiles must be applied) and then return
                    // just the model part.
                    const document = ModelReader.readDocument(m.modelData);
                    if (document) {
                        model = document.model;
                    }
                    else
                        model = null;
                }
                else
                    model = m.modelData; // return plain JSON
                // Apply transforms                
                let targetModel;
                if (model && codeModelOptions.modelTransform) {
                    targetModel = codeModelOptions.modelTransform.transform(model);
                }
                else
                    targetModel = model;
                resolve(targetModel);
            });
        });
        var getModelMessage = { cmd: 'getModel' };
        this.sendProcessMessage(getModelMessage);
        return promise;
    }
    getModelFromModelBuilder(options) {
        const codeModelOptions = options || {};
        const applyTransform = (model) => {
            if (model && codeModelOptions.modelTransform) {
                return codeModelOptions.modelTransform.transform(model);
            }
            return model;
        };
        if (this.modelBuilderResult) {
            // this.logger.verbose('getModelFromModelBuilder: returning current modelBuilderResult.');            
            return Promise.resolve(applyTransform(this.modelBuilderResult));
        }
        else if (this.modelBuilderPromise) {
            // this.logger.verbose('getModelFromModelBuilder: waiting for modelBuilderPromise.');
            return this
                .modelBuilderPromise
                .then(((m) => {
                // this.logger.verbose('getModelFromModelBuilder: modelBuilderPromise done.');
                return applyTransform(m);
            }));
        }
        else
            return Promise.reject('An unexpected internal error has occured.'); // either modelBuilderResult or modelBuilderPromise will have a value, see getModel
    }
    buildModel(builder) {
        // We need to signal the CLI that we started something async and that is should not kill us.
        // Use the 'generateStarted' / 'generateFinished' commands for now, although we should really use a different command.        
        this.logger.verbose(`Generator.buildModel starting...`);
        this.sendProcessMessage({ cmd: 'generateStarted' });
        // Set up a promise to be returned to the caller, althoug it is optional to use it.
        let resolveFunctionPromise;
        let rejectFunctionPromise;
        const functionPromise = new Promise((resolve, reject) => {
            // resolve when builder resolves
            resolveFunctionPromise = resolve;
            rejectFunctionPromise = reject;
        });
        this.modelBuilderResult = null;
        this.modelBuilderPromise = builder()
            .then((result) => {
            this.modelBuilderResult = result;
            // var d2 = new Date();
            // this.logger.verbose(`${d2.getMinutes()}:${d2.getMilliseconds()}: buildModel finished`);
            this.logger.verbose(`Generator.buildModel finished.`);
            resolveFunctionPromise(result);
            // Let the host know that we are 'done'                
            this.sendProcessMessage({ cmd: 'generateFinished' });
            return result;
        })
            .catch((e) => rejectFunctionPromise(e));
        return functionPromise;
    }
}
export const Generator = new InternalGenerator();
//# sourceMappingURL=data:application/json;base64,