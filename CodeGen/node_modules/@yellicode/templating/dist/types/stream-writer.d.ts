/// <reference types="node" />
import { TextWriter } from './text-writer';
import { RegionMarkerFormatter } from './region-marker-formatter';
/**
 * Internal writer class that is passed to WriterBase implementations. We don't let people inherit from TextWriter directly because
 * we want to control the instantiation and lifetime of each StreamWriter instance.
 */
export declare class StreamWriter implements TextWriter {
    private stream;
    private indent;
    private templateDirName;
    private textFileCache;
    private fileRegionMapper;
    endOfLineString: any;
    indentString: string;
    /**
     * Constructor. Creates a new StreamWriter that writes to the provided WritableStream.
     * @param stream A Node.js WritableStream instance.
     * @param regionMarkerFormatter An optional RegionMarkerFormatter.
     */
    constructor(stream: NodeJS.WritableStream, regionMarkerFormatter?: RegionMarkerFormatter);
    /******************************************************************************
     *                          TextWriter implementation
    ******************************************************************************/
    /**
    * Writes a new line to the output. The line is indented automatically. The line is ended with the endOfLineString.
    * @param value The line to write. When omitted, only the endOfLineString is written.
    */
    writeLine(value?: string): this;
    /**
    * Writes a collection of lines to the output. Each line is indented automatically and ended with the endOfLineString.
    * @param values The lines to write.
    * @param delimiter An optional delimiter to be written at the end of each line, except for the last one.
    */
    writeLines(values: string[], delimiter?: string): this;
    /**
     * Writes a new line to the output while temporarily increasing the indent. The line is ended with the endOfLineString.
     * @param value The line to write.
     */
    writeLineIndented(value: string): this;
    writeEndOfLine(value?: string): this;
    writeIndent(): this;
    write(value: string): this;
    writeWhiteSpace(): this;
    increaseIndent(): this;
    decreaseIndent(): this;
    clearIndent(): this;
    writeFile(path: string, encoding?: string): this;
    writeFileRegion(regionName: string, path: string, encoding?: string): boolean;
    /******************************************************************************
     *                         End of TextWriter implementation
    ******************************************************************************/
    private createIndentString;
    private resolveFileName;
    private readTextFile;
}
