import { ChangeDetectionStrategy, ViewEncapsulation } from './directive-config';
/**
 * Provides utility functions for generating Angular 2+ application code.
 */
var AngularWriter = /** @class */ (function () {
    function AngularWriter() {
    }
    /**
    * Writes a full Angular '@Component' class decorator using the provided configuration.
    */
    AngularWriter.writeComponentDecorator = function (writer, config) {
        writer.writeDecoratorCodeBlock('Component', function () {
            AngularWriter.writeComponentConfig(writer, config);
        });
    };
    /**
     * Writes Angular component configuration that can be used inside a component class decorator.
     * Use writeComponentDecorator() to write a full '@Component' class decorator.
     */
    AngularWriter.writeComponentConfig = function (writer, config) {
        var keys = Object.keys(config);
        keys.forEach(function (key, index) {
            writer.writeIndent();
            var value = config[key];
            writer.write(key + ": " + AngularWriter.stringifyComponentProperty(key, value));
            if (index < keys.length - 1)
                writer.write(',');
            writer.writeEndOfLine();
        });
    };
    /**
    * Writes a full Angular '@NgModule' class decorator using the provided configuration.
    */
    AngularWriter.writeModuleDecorator = function (writer, config) {
        writer.writeDecoratorCodeBlock('NgModule', function () {
            AngularWriter.writeComponentConfig(writer, config);
        });
    };
    /**
     * Writes Angular module configuration that can be used inside a module class decorator.
     * Use writeModuleDecorator() to write a full '@NgModule' class decorator.
     */
    AngularWriter.writeModuleConfig = function (writer, config) {
        var keys = Object.keys(config);
        keys.forEach(function (key, index) {
            writer.writeIndent();
            var value = config[key];
            writer.write(key + ": " + AngularWriter.stringifyModuleProperty(key, value));
            if (index < keys.length - 1)
                writer.write(',');
            writer.writeEndOfLine();
        });
    };
    /**
    * Writes a route configuration for the specified component, with the specified route path.
    */
    AngularWriter.writeRoute = function (writer, route) {
        writer.writeLine('{');
        writer.increaseIndent();
        writer.writeLine("path: '" + route.path + "',");
        writer.writeLine("component: " + route.componentName);
        writer.decreaseIndent();
        writer.writeLine('},');
    };
    AngularWriter.stringifyModuleProperty = function (key, value) {
        switch (key) {
            case 'bootstrap':
            case 'declarations':
            case 'entryComponents':
            case 'imports':
            case 'exports':
            case 'providers':
            case 'schemas':
                return AngularWriter.stringifyObjectArray(value);
            default: break;
        }
        if (typeof (value) == typeof (true)) {
            return value ? 'true' : 'false';
        }
        return "'" + value + "'";
    };
    AngularWriter.stringifyComponentProperty = function (key, value) {
        switch (key) {
            case 'changeDetection':
                return "ChangeDetectionStrategy." + ChangeDetectionStrategy[value];
            case 'encapsulation':
                return "ViewEncapsulation." + ViewEncapsulation[value];
            case 'entryComponents':
            case 'providers':
            case 'viewProviders':
                return AngularWriter.stringifyObjectArray(value);
            case 'host':
                return AngularWriter.stringifyKeyValuePair(value);
            default:
                break;
        }
        if (typeof (value) == typeof (true)) {
            return value ? 'true' : 'false';
        }
        if (value instanceof Array) {
            return AngularWriter.stringifyStringArray(value);
        }
        // The value is a string
        else
            return "'" + value + "'";
    };
    AngularWriter.stringifyObjectArray = function (arr) {
        if (!arr.length)
            return '[]';
        return "[" + arr.join(', ') + "]";
    };
    AngularWriter.stringifyStringArray = function (arr) {
        if (!arr.length)
            return '[]';
        return "[" + arr.map(function (item) { return "'" + item + "'"; }).join(', ') + "]";
    };
    AngularWriter.stringifyKeyValuePair = function (value) {
        // {'key1': 'value1', 'key2': 'value2'}
        var keys = Object.keys(value);
        return "{ " + keys.map(function (k) { return "'" + k + "': '" + value[k] + "'"; }).join(', ') + " }";
    };
    return AngularWriter;
}());
export { AngularWriter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci13cml0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYW5ndWxhci13cml0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFtQix1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBTWpHOztHQUVHO0FBQ0g7SUFBQTtJQXdIQSxDQUFDO0lBdEhDOztNQUVFO0lBQ1kscUNBQXVCLEdBQXJDLFVBQXNDLE1BQXdCLEVBQUUsTUFBdUI7UUFDckYsTUFBTSxDQUFDLHVCQUF1QixDQUFDLFdBQVcsRUFBRTtZQUMxQyxhQUFhLENBQUMsb0JBQW9CLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3JELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7T0FHRztJQUNXLGtDQUFvQixHQUFsQyxVQUFtQyxNQUFrQixFQUFFLE1BQXVCO1FBQzVFLElBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFDLEdBQUcsRUFBRSxLQUFLO1lBQ3RCLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNyQixJQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDMUIsTUFBTSxDQUFDLEtBQUssQ0FBSSxHQUFHLFVBQUssYUFBYSxDQUFDLDBCQUEwQixDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUcsQ0FBQyxDQUFDO1lBQ2hGLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQztnQkFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQy9DLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUMxQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7TUFFRTtJQUNZLGtDQUFvQixHQUFsQyxVQUFtQyxNQUF3QixFQUFFLE1BQW9CO1FBQy9FLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLEVBQUU7WUFDekMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNyRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7O09BR0c7SUFDVywrQkFBaUIsR0FBL0IsVUFBZ0MsTUFBa0IsRUFBRSxNQUFvQjtRQUN0RSxJQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBQyxHQUFHLEVBQUUsS0FBSztZQUN0QixNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDckIsSUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzFCLE1BQU0sQ0FBQyxLQUFLLENBQUksR0FBRyxVQUFLLGFBQWEsQ0FBQyx1QkFBdUIsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFHLENBQUMsQ0FBQztZQUM3RSxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUM7Z0JBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMvQyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDMUIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O01BRUU7SUFDWSx3QkFBVSxHQUF4QixVQUF5QixNQUFrQixFQUFFLEtBQThDO1FBQ3pGLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3hCLE1BQU0sQ0FBQyxTQUFTLENBQUMsWUFBVSxLQUFLLENBQUMsSUFBSSxPQUFJLENBQUMsQ0FBQztRQUMzQyxNQUFNLENBQUMsU0FBUyxDQUFDLGdCQUFjLEtBQUssQ0FBQyxhQUFlLENBQUMsQ0FBQztRQUN0RCxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDeEIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRWMscUNBQXVCLEdBQXRDLFVBQXVDLEdBQVcsRUFBRSxLQUFVO1FBQzVELFFBQVEsR0FBRyxFQUFFO1lBQ1gsS0FBSyxXQUFXLENBQUM7WUFDakIsS0FBSyxjQUFjLENBQUM7WUFDcEIsS0FBSyxpQkFBaUIsQ0FBQztZQUN2QixLQUFLLFNBQVMsQ0FBQztZQUNmLEtBQUssU0FBUyxDQUFDO1lBQ2YsS0FBSyxXQUFXLENBQUM7WUFDakIsS0FBSyxTQUFTO2dCQUNaLE9BQU8sYUFBYSxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ25ELE9BQU8sQ0FBQyxDQUFDLE1BQU07U0FDaEI7UUFDRCxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDbkMsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1NBQ2pDO1FBQ0QsT0FBTyxNQUFJLEtBQUssTUFBRyxDQUFDO0lBQ3RCLENBQUM7SUFFYyx3Q0FBMEIsR0FBekMsVUFBMEMsR0FBVyxFQUFFLEtBQVU7UUFDL0QsUUFBUSxHQUFHLEVBQUU7WUFDWCxLQUFLLGlCQUFpQjtnQkFDcEIsT0FBTyw2QkFBMkIsdUJBQXVCLENBQUMsS0FBSyxDQUFHLENBQUM7WUFDckUsS0FBSyxlQUFlO2dCQUNsQixPQUFPLHVCQUFxQixpQkFBaUIsQ0FBQyxLQUFLLENBQUcsQ0FBQztZQUN6RCxLQUFLLGlCQUFpQixDQUFDO1lBQ3ZCLEtBQUssV0FBVyxDQUFDO1lBQ2pCLEtBQUssZUFBZTtnQkFDbEIsT0FBTyxhQUFhLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbkQsS0FBSyxNQUFNO2dCQUNULE9BQU8sYUFBYSxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3BEO2dCQUNFLE1BQU07U0FDVDtRQUNELElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNuQyxPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7U0FDakM7UUFDRCxJQUFJLEtBQUssWUFBWSxLQUFLLEVBQUU7WUFDMUIsT0FBTyxhQUFhLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbEQ7UUFDRCx3QkFBd0I7O1lBQ25CLE9BQU8sTUFBSSxLQUFLLE1BQUcsQ0FBQztJQUMzQixDQUFDO0lBRWMsa0NBQW9CLEdBQW5DLFVBQW9DLEdBQVU7UUFDNUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFDN0IsT0FBTyxNQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQUcsQ0FBQztJQUMvQixDQUFDO0lBRWMsa0NBQW9CLEdBQW5DLFVBQW9DLEdBQVU7UUFDNUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFDN0IsT0FBTyxNQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxNQUFJLElBQUksTUFBRyxFQUFYLENBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBRyxDQUFDO0lBQ3hELENBQUM7SUFFYyxtQ0FBcUIsR0FBcEMsVUFBcUMsS0FBaUM7UUFDcEUsdUNBQXVDO1FBQ3ZDLElBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEMsT0FBTyxPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxNQUFJLENBQUMsWUFBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQUcsRUFBdkIsQ0FBdUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBSSxDQUFDO0lBQ3BFLENBQUM7SUFDSCxvQkFBQztBQUFELENBQUMsQUF4SEQsSUF3SEMifQ==