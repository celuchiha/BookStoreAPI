/*
 * Copyright (c) 2019 Yellicode
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
/**
 * Contains simple utility methods that deal with strings.
 */
var StringUtility = /** @class */ (function () {
    function StringUtility() {
    }
    StringUtility.wordWrap = function (str, width) {
        var result = [];
        if (width < 1 || str == null || str.length <= width)
            return result;
        var len = str.length;
        var rangeMax = len - width; // we don't need to split after this position
        var rangeStart = 0;
        var subString;
        while (rangeStart < rangeMax) {
            var subLength = void 0;
            var rangeEnd = rangeStart + width;
            // First test for newlines in this range. If so, don't split on word break but on the newline.
            var ixNewLine = str.indexOf("\n", rangeStart);
            if (ixNewLine > -1 && ixNewLine > rangeStart && ixNewLine < rangeEnd) {
                subLength = ixNewLine - rangeStart;
                subString = str.substr(rangeStart, subLength);
                rangeStart = rangeStart + subLength + 1;
                result.push(subString);
                continue;
            }
            // No newlines. Find the last wordbreak in the range.
            var ix = str.lastIndexOf(" ", rangeEnd); // find the last word break
            var rangeStartNext = 0;
            if (ix > -1 && ix != rangeStart - 1) {
                subLength = ix - rangeStart;
                if (subLength > 0) {
                    rangeStartNext = rangeStart + subLength + 1; // +1 to skip the whitespace
                }
                //else { // not needed anymore because of the maxPos check
                //    sub = str.substr(pos);
                //    newPos = len + 1;
                //}
            }
            else {
                // The range has no whitespace. 
                subLength = width;
                rangeStartNext = rangeStart + width;
            }
            subString = str.substr(rangeStart, subLength);
            rangeStart = rangeStartNext;
            result.push(subString.trim());
        }
        // Add the remainder
        if (rangeStart < len) {
            subString = str.substr(rangeStart);
            result.push(subString);
        }
        //  console.debug(result);
        return result;
    };
    /**
     * Makes the first character of the string uppercase.
     */
    StringUtility.capitalize = function (str) {
        if (str == null || str.length === 0)
            return str;
        return str.charAt(0).toUpperCase() + str.slice(1);
    };
    /**
     * Makes the first character of the string lowercase.
     */
    StringUtility.unCapitalize = function (str) {
        if (str == null || str.length === 0)
            return str;
        return str.charAt(0).toLowerCase() + str.slice(1);
    };
    /**
     * Returns a boolean value indicating if the string is upperCase.
     */
    StringUtility.isUpperCase = function (str) {
        if (!str)
            return false;
        return (str === str.toUpperCase() && str !== str.toLowerCase());
    };
    /**
     * Returns a boolean value indicating if the string is lowerCase.
     */
    StringUtility.isLowerCase = function (str) {
        if (!str)
            return false;
        return (str === str.toLowerCase() && str !== str.toUpperCase());
    };
    return StringUtility;
}());
export { StringUtility };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nLXV0aWxpdHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc3RyaW5nLXV0aWxpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUY7O0dBRUc7QUFDSjtJQUFBO0lBd0ZBLENBQUM7SUF2RmlCLHNCQUFRLEdBQXRCLFVBQXVCLEdBQVcsRUFBRSxLQUFhO1FBQzdDLElBQU0sTUFBTSxHQUFhLEVBQUUsQ0FBQztRQUU1QixJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksSUFBSSxHQUFHLENBQUMsTUFBTSxJQUFJLEtBQUs7WUFDL0MsT0FBTyxNQUFNLENBQUM7UUFFbEIsSUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQztRQUN2QixJQUFJLFFBQVEsR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsNkNBQTZDO1FBQ3pFLElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQztRQUNuQixJQUFJLFNBQWlCLENBQUM7UUFDdEIsT0FBTyxVQUFVLEdBQUcsUUFBUSxFQUFFO1lBQzFCLElBQUksU0FBUyxTQUFRLENBQUM7WUFDdEIsSUFBSSxRQUFRLEdBQUcsVUFBVSxHQUFHLEtBQUssQ0FBQztZQUNsQyw4RkFBOEY7WUFDOUYsSUFBSSxTQUFTLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDOUMsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDLElBQUksU0FBUyxHQUFHLFVBQVUsSUFBSSxTQUFTLEdBQUcsUUFBUSxFQUFFO2dCQUNsRSxTQUFTLEdBQUcsU0FBUyxHQUFHLFVBQVUsQ0FBQztnQkFDbkMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDO2dCQUM5QyxVQUFVLEdBQUcsVUFBVSxHQUFHLFNBQVMsR0FBRyxDQUFDLENBQUM7Z0JBQ3hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ3ZCLFNBQVM7YUFDWjtZQUNELHFEQUFxRDtZQUNyRCxJQUFJLEVBQUUsR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLDJCQUEyQjtZQUNwRSxJQUFJLGNBQWMsR0FBVyxDQUFDLENBQUM7WUFDL0IsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLFVBQVUsR0FBRyxDQUFDLEVBQUU7Z0JBQ2pDLFNBQVMsR0FBRyxFQUFFLEdBQUcsVUFBVSxDQUFDO2dCQUM1QixJQUFJLFNBQVMsR0FBRyxDQUFDLEVBQUU7b0JBQ2YsY0FBYyxHQUFHLFVBQVUsR0FBRyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsNEJBQTRCO2lCQUM1RTtnQkFDRCwwREFBMEQ7Z0JBQzFELDRCQUE0QjtnQkFDNUIsdUJBQXVCO2dCQUN2QixHQUFHO2FBQ047aUJBQU07Z0JBQ0gsZ0NBQWdDO2dCQUNoQyxTQUFTLEdBQUcsS0FBSyxDQUFDO2dCQUNsQixjQUFjLEdBQUcsVUFBVSxHQUFHLEtBQUssQ0FBQzthQUN2QztZQUNELFNBQVMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztZQUM5QyxVQUFVLEdBQUcsY0FBYyxDQUFDO1lBQzVCLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7U0FDakM7UUFDRCxvQkFBb0I7UUFDcEIsSUFBSSxVQUFVLEdBQUcsR0FBRyxFQUFFO1lBQ2xCLFNBQVMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ25DLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDMUI7UUFDRCwwQkFBMEI7UUFDMUIsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVEOztPQUVHO0lBQ1csd0JBQVUsR0FBeEIsVUFBeUIsR0FBVztRQUNoQyxJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDO1lBQy9CLE9BQU8sR0FBRyxDQUFDO1FBRWYsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVEOztPQUVHO0lBQ1csMEJBQVksR0FBMUIsVUFBMkIsR0FBVztRQUNsQyxJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDO1lBQy9CLE9BQU8sR0FBRyxDQUFDO1FBRWYsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVEOztPQUVHO0lBQ1cseUJBQVcsR0FBekIsVUFBMEIsR0FBVztRQUNqQyxJQUFJLENBQUMsR0FBRztZQUFFLE9BQU8sS0FBSyxDQUFDO1FBQ3ZCLE9BQU8sQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLFdBQVcsRUFBRSxJQUFJLEdBQUcsS0FBSyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUNwRSxDQUFDO0lBRUQ7O09BRUc7SUFDVyx5QkFBVyxHQUF6QixVQUEwQixHQUFXO1FBQ2pDLElBQUksQ0FBQyxHQUFHO1lBQUUsT0FBTyxLQUFLLENBQUM7UUFDdkIsT0FBTyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsV0FBVyxFQUFFLElBQUksR0FBRyxLQUFLLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFBO0lBQ25FLENBQUM7SUFDTCxvQkFBQztBQUFELENBQUMsQUF4RkQsSUF3RkMifQ==