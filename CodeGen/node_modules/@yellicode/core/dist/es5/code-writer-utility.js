/*
 * Copyright (c) 2019 Yellicode
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
/**
 * Contains helper methods that can be used by custom code writers and templates.
 */
var CodeWriterUtility = /** @class */ (function () {
    function CodeWriterUtility() {
    }
    /**
     * Wraps the provided string input to a specified maximum width.
     * @argument str The string to be wrapped.
     * @argument width The maximum width of the wrapped text in characters.
     * @returns A string array containing all lines.
     */
    CodeWriterUtility.wordWrap = function (str, width) {
        var result = [];
        if (width < 1 || str == null || str.length <= width)
            return result;
        var len = str.length;
        var rangeMax = len - width; // we don't need to split after this position
        var rangeStart = 0;
        var subString;
        while (rangeStart < rangeMax) {
            var subLength = void 0;
            var rangeEnd = rangeStart + width;
            // First test for newlines in this range. If so, don't split on word break but on the newline.
            var ixNewLine = str.indexOf("\n", rangeStart);
            if (ixNewLine > -1 && ixNewLine > rangeStart && ixNewLine < rangeEnd) {
                subLength = ixNewLine - rangeStart;
                subString = str.substr(rangeStart, subLength);
                rangeStart = rangeStart + subLength + 1;
                result.push(subString);
                continue;
            }
            // No newlines. Find the last wordbreak in the range.
            var ix = str.lastIndexOf(" ", rangeEnd); // find the last word break
            var rangeStartNext = 0;
            if (ix > -1 && ix != rangeStart - 1) {
                subLength = ix - rangeStart;
                if (subLength > 0) {
                    rangeStartNext = rangeStart + subLength + 1; // +1 to skip the whitespace
                }
                //else { // not needed anymore because of the maxPos check
                //    sub = str.substr(pos);
                //    newPos = len + 1;
                //}
            }
            else {
                // The range has no whitespace. 
                subLength = width;
                rangeStartNext = rangeStart + width;
            }
            subString = str.substr(rangeStart, subLength);
            rangeStart = rangeStartNext;
            result.push(subString.trim());
        }
        // Add the remainder
        if (rangeStart < len) {
            subString = str.substr(rangeStart);
            result.push(subString);
        }
        //  console.debug(result);
        return result;
    };
    return CodeWriterUtility;
}());
export { CodeWriterUtility };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZS13cml0ZXItdXRpbGl0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb2RlLXdyaXRlci11dGlsaXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVIOztHQUVHO0FBQ0g7SUFBQTtJQTBEQSxDQUFDO0lBekRHOzs7OztPQUtHO0lBQ1csMEJBQVEsR0FBdEIsVUFBdUIsR0FBVyxFQUFFLEtBQWE7UUFDN0MsSUFBTSxNQUFNLEdBQWEsRUFBRSxDQUFDO1FBRTVCLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLEdBQUcsQ0FBQyxNQUFNLElBQUksS0FBSztZQUMvQyxPQUFPLE1BQU0sQ0FBQztRQUVsQixJQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDO1FBQ3ZCLElBQUksUUFBUSxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQyw2Q0FBNkM7UUFDekUsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLElBQUksU0FBaUIsQ0FBQztRQUN0QixPQUFPLFVBQVUsR0FBRyxRQUFRLEVBQUU7WUFDMUIsSUFBSSxTQUFTLFNBQVEsQ0FBQztZQUN0QixJQUFJLFFBQVEsR0FBRyxVQUFVLEdBQUcsS0FBSyxDQUFDO1lBQ2xDLDhGQUE4RjtZQUM5RixJQUFJLFNBQVMsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztZQUM5QyxJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUMsSUFBSSxTQUFTLEdBQUcsVUFBVSxJQUFJLFNBQVMsR0FBRyxRQUFRLEVBQUU7Z0JBQ2xFLFNBQVMsR0FBRyxTQUFTLEdBQUcsVUFBVSxDQUFDO2dCQUNuQyxTQUFTLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7Z0JBQzlDLFVBQVUsR0FBRyxVQUFVLEdBQUcsU0FBUyxHQUFHLENBQUMsQ0FBQztnQkFDeEMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDdkIsU0FBUzthQUNaO1lBQ0QscURBQXFEO1lBQ3JELElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsMkJBQTJCO1lBQ3BFLElBQUksY0FBYyxHQUFXLENBQUMsQ0FBQztZQUMvQixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksVUFBVSxHQUFHLENBQUMsRUFBRTtnQkFDakMsU0FBUyxHQUFHLEVBQUUsR0FBRyxVQUFVLENBQUM7Z0JBQzVCLElBQUksU0FBUyxHQUFHLENBQUMsRUFBRTtvQkFDZixjQUFjLEdBQUcsVUFBVSxHQUFHLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQyw0QkFBNEI7aUJBQzVFO2dCQUNELDBEQUEwRDtnQkFDMUQsNEJBQTRCO2dCQUM1Qix1QkFBdUI7Z0JBQ3ZCLEdBQUc7YUFDTjtpQkFBTTtnQkFDSCxnQ0FBZ0M7Z0JBQ2hDLFNBQVMsR0FBRyxLQUFLLENBQUM7Z0JBQ2xCLGNBQWMsR0FBRyxVQUFVLEdBQUcsS0FBSyxDQUFDO2FBQ3ZDO1lBQ0QsU0FBUyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBQzlDLFVBQVUsR0FBRyxjQUFjLENBQUM7WUFDNUIsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUNqQztRQUNELG9CQUFvQjtRQUNwQixJQUFJLFVBQVUsR0FBRyxHQUFHLEVBQUU7WUFDbEIsU0FBUyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDbkMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUMxQjtRQUNELDBCQUEwQjtRQUMxQixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsd0JBQUM7QUFBRCxDQUFDLEFBMURELElBMERDIn0=