/*
 * Copyright (c) 2019 Yellicode
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
/**
 * Enumerates the possible Yellicode logging levels.
 */
export var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["None"] = 0] = "None";
    LogLevel[LogLevel["Error"] = 1] = "Error";
    LogLevel[LogLevel["Warning"] = 2] = "Warning";
    LogLevel[LogLevel["Info"] = 3] = "Info";
    LogLevel[LogLevel["Verbose"] = 4] = "Verbose";
})(LogLevel || (LogLevel = {}));
(function (LogLevel) {
    function parse(str) {
        if (!str)
            return null;
        switch (str.toLowerCase()) {
            case 'none': return LogLevel.None;
            case 'error': return LogLevel.Error;
            case 'warning': return LogLevel.Warning;
            case 'info': return LogLevel.Info;
            case 'verbose': return LogLevel.Verbose;
            default: return null;
        }
    }
    LogLevel.parse = parse;
})(LogLevel || (LogLevel = {}));
/**
 * A Logger implementation that logs to the default Console.
 */
var ConsoleLogger = /** @class */ (function () {
    function ConsoleLogger(console, level, includeTimestamp) {
        if (level === void 0) { level = LogLevel.Info; }
        if (includeTimestamp === void 0) { includeTimestamp = false; }
        this.console = console;
        this.level = level;
        this.includeTimestamp = includeTimestamp;
    }
    ConsoleLogger.prototype.verbose = function (message) {
        if (this.level < LogLevel.Verbose)
            return;
        this.write("Verbose", message);
    };
    ;
    ConsoleLogger.prototype.info = function (message) {
        if (this.level < LogLevel.Info)
            return;
        this.write("Info", message);
    };
    ;
    ConsoleLogger.prototype.warn = function (message) {
        if (this.level < LogLevel.Warning)
            return;
        this.write("Warning", message);
    };
    ;
    ConsoleLogger.prototype.error = function (message) {
        if (this.level < LogLevel.Error)
            return;
        this.write("Error", message);
    };
    ;
    ConsoleLogger.prototype.log = function (message, level) {
        switch (level) {
            case LogLevel.Verbose:
                this.verbose(message);
                break;
            case LogLevel.Info:
                this.info(message);
                break;
            case LogLevel.Warning:
                this.warn(message);
                break;
            case LogLevel.Error:
                this.error(message);
                break;
        }
    };
    ConsoleLogger.prototype.write = function (level, message) {
        if (!this.includeTimestamp) {
            this.console.log(level + ": " + message);
            return;
        }
        var d = new Date();
        var time = d.toLocaleTimeString();
        var ms = ConsoleLogger.padMilliseconds(d.getMilliseconds());
        this.console.log(time + ":" + ms + " - " + level + ": " + message);
    };
    ConsoleLogger.padMilliseconds = function (num, length) {
        if (length === void 0) { length = 3; }
        if (('' + num).length >= length)
            return num;
        var lead = '0' + new Array(length).join('0');
        return (lead + num).slice(-length);
    };
    return ConsoleLogger;
}());
export { ConsoleLogger };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ2dlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFjRjs7R0FFRztBQUNKLE1BQU0sQ0FBTixJQUFZLFFBTVg7QUFORCxXQUFZLFFBQVE7SUFDaEIsdUNBQVEsQ0FBQTtJQUNSLHlDQUFTLENBQUE7SUFDVCw2Q0FBVyxDQUFBO0lBQ1gsdUNBQVEsQ0FBQTtJQUNSLDZDQUFXLENBQUE7QUFDZixDQUFDLEVBTlcsUUFBUSxLQUFSLFFBQVEsUUFNbkI7QUFFRCxXQUFpQixRQUFRO0lBQ3JCLGVBQXNCLEdBQVc7UUFDN0IsSUFBSSxDQUFDLEdBQUc7WUFBRSxPQUFPLElBQUksQ0FBQztRQUN0QixRQUFRLEdBQUcsQ0FBQyxXQUFXLEVBQUUsRUFBRTtZQUN2QixLQUFLLE1BQU0sQ0FBQyxDQUFDLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQztZQUNsQyxLQUFLLE9BQU8sQ0FBQyxDQUFDLE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQztZQUNwQyxLQUFLLFNBQVMsQ0FBQyxDQUFDLE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQztZQUN4QyxLQUFLLE1BQU0sQ0FBQyxDQUFDLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQztZQUNsQyxLQUFLLFNBQVMsQ0FBQyxDQUFDLE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQztZQUN4QyxPQUFPLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQztTQUN4QjtJQUNMLENBQUM7SUFWZSxjQUFLLFFBVXBCLENBQUE7QUFDTCxDQUFDLEVBWmdCLFFBQVEsS0FBUixRQUFRLFFBWXhCO0FBRUQ7O0dBRUc7QUFDSDtJQUNJLHVCQUFvQixPQUFnQixFQUFVLEtBQStCLEVBQVUsZ0JBQXdCO1FBQWpFLHNCQUFBLEVBQUEsUUFBa0IsUUFBUSxDQUFDLElBQUk7UUFBVSxpQ0FBQSxFQUFBLHdCQUF3QjtRQUEzRixZQUFPLEdBQVAsT0FB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