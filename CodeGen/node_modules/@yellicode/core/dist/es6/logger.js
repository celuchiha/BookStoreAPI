/*
 * Copyright (c) 2019 Yellicode
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
/**
 * Enumerates the possible Yellicode logging levels.
 */
export var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["None"] = 0] = "None";
    LogLevel[LogLevel["Error"] = 1] = "Error";
    LogLevel[LogLevel["Warning"] = 2] = "Warning";
    LogLevel[LogLevel["Info"] = 3] = "Info";
    LogLevel[LogLevel["Verbose"] = 4] = "Verbose";
})(LogLevel || (LogLevel = {}));
(function (LogLevel) {
    function parse(str) {
        if (!str)
            return null;
        switch (str.toLowerCase()) {
            case 'none': return LogLevel.None;
            case 'error': return LogLevel.Error;
            case 'warning': return LogLevel.Warning;
            case 'info': return LogLevel.Info;
            case 'verbose': return LogLevel.Verbose;
            default: return null;
        }
    }
    LogLevel.parse = parse;
})(LogLevel || (LogLevel = {}));
/**
 * A Logger implementation that logs to the default Console.
 */
export class ConsoleLogger {
    constructor(console, level = LogLevel.Info, includeTimestamp = false) {
        this.console = console;
        this.level = level;
        this.includeTimestamp = includeTimestamp;
    }
    verbose(message) {
        if (this.level < LogLevel.Verbose)
            return;
        this.write("Verbose", message);
    }
    ;
    info(message) {
        if (this.level < LogLevel.Info)
            return;
        this.write("Info", message);
    }
    ;
    warn(message) {
        if (this.level < LogLevel.Warning)
            return;
        this.write("Warning", message);
    }
    ;
    error(message) {
        if (this.level < LogLevel.Error)
            return;
        this.write("Error", message);
    }
    ;
    log(message, level) {
        switch (level) {
            case LogLevel.Verbose:
                this.verbose(message);
                break;
            case LogLevel.Info:
                this.info(message);
                break;
            case LogLevel.Warning:
                this.warn(message);
                break;
            case LogLevel.Error:
                this.error(message);
                break;
        }
    }
    write(level, message) {
        if (!this.includeTimestamp) {
            this.console.log(`${level}: ${message}`);
            return;
        }
        var d = new Date();
        var time = d.toLocaleTimeString();
        var ms = ConsoleLogger.padMilliseconds(d.getMilliseconds());
        this.console.log(`${time}:${ms} - ${level}: ${message}`);
    }
    static padMilliseconds(num, length = 3) {
        if (('' + num).length >= length)
            return num;
        var lead = '0' + new Array(length).join('0');
        return (lead + num).slice(-length);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ2dlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFjRjs7R0FFRztBQUNKLE1BQU0sQ0FBTixJQUFZLFFBTVg7QUFORCxXQUFZLFFBQVE7SUFDaEIsdUNBQVEsQ0FBQTtJQUNSLHlDQUFTLENBQUE7SUFDVCw2Q0FBVyxDQUFBO0lBQ1gsdUNBQVEsQ0FBQTtJQUNSLDZDQUFXLENBQUE7QUFDZixDQUFDLEVBTlcsUUFBUSxLQUFSLFFBQVEsUUFNbkI7QUFFRCxXQUFpQixRQUFRO0lBQ3JCLGVBQXNCLEdBQVc7UUFDN0IsSUFBSSxDQUFDLEdBQUc7WUFBRSxPQUFPLElBQUksQ0FBQztRQUN0QixRQUFRLEdBQUcsQ0FBQyxXQUFXLEVBQUUsRUFBRTtZQUN2QixLQUFLLE1BQU0sQ0FBQyxDQUFDLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQztZQUNsQyxLQUFLLE9BQU8sQ0FBQyxDQUFDLE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQztZQUNwQyxLQUFLLFNBQVMsQ0FBQyxDQUFDLE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQztZQUN4QyxLQUFLLE1BQU0sQ0FBQyxDQUFDLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQztZQUNsQyxLQUFLLFNBQVMsQ0FBQyxDQUFDLE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQztZQUN4QyxPQUFPLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQztTQUN4QjtJQUNMLENBQUM7SUFWZSxjQUFLLFFBVXBCLENBQUE7QUFDTCxDQUFDLEVBWmdCLFFBQVEsS0FBUixRQUFRLFFBWXhCO0FBRUQ7O0dBRUc7QUFDSCxNQUFNO0lBQ0YsWUFBb0IsT0FBZ0IsRUFBVSxRQUFrQixRQUFRLENBQUMsSUFBSSxFQUFVLG1CQUFtQixLQUFLO1FBQTNGLFlBQU8sR0FBUCxPQUFPLENBQVM7UUFBVSxVQUFLLEdBQUwsS0FBSyxDQUEwQjtRQUFV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