/**
 * Defines the interface for types that implement logging.
 */
export interface Logger {
    verbose(message: string): void;
    info(message: string): void;
    warn(message: string): void;
    error(message: string): void;
    log(message: string, level: LogLevel): void;
}
/**
 * Enumerates the possible Yellicode logging levels.
 */
export declare enum LogLevel {
    None = 0,
    Error = 1,
    Warning = 2,
    Info = 3,
    Verbose = 4
}
export declare namespace LogLevel {
    function parse(str: string): LogLevel | null;
}
/**
 * A Logger implementation that logs to the default Console.
 */
export declare class ConsoleLogger implements Logger {
    private console;
    private level;
    private includeTimestamp;
    constructor(console: Console, level?: LogLevel, includeTimestamp?: boolean);
    verbose(message: string): void;
    info(message: string): void;
    warn(message: string): void;
    error(message: string): void;
    log(message: string, level: LogLevel): void;
    private write;
    private static padMilliseconds;
}
