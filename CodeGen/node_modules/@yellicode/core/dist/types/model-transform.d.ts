/**
 * The base interface for all model transformations.
 */
export interface ModelTransform<TSource, TTarget = TSource> {
    /**
     * Transforms the source model into the target model.
     */
    transform(source: TSource): TTarget;
}
/**
 * Performs a sequence of model transforms, where the output of each transform is
 * the input of the next transform.
 */
export declare class ModelTransformPipeline<TModel = any> implements ModelTransform<TModel> {
    private transforms;
    /**
     * Creates a new ModelTransformPipeline, optionally initialized with a collection of transforms.
     * @param transform sAny transforms to initialize the pipeline with.
     */
    constructor(...transforms: ModelTransform<TModel>[]);
    /**
    * Adds a new collection of transforms to the pipeline.
    * @param transforms The transforms to be added.
    */
    addRange(...transforms: ModelTransform<TModel>[]): void;
    /**
     * Adds a new transform to the pipeline.
     * @param transform The transform to be added.
     */
    add(transform: ModelTransform<TModel>): void;
    /**
    * Transforms the source model by applying the specified transforms in sequence.
    * @returns The output of the last transform that was applied.
    */
    transform(model: TModel): TModel;
}
